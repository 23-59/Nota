Index: app/src/main/java/com/A_23_59/hypernote/domain/use_case/tags/AddTags.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tags/AddTags.kt b/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tags/AddTags.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tags/AddTags.kt	
+++ /dev/null	
@@ -1,11 +0,0 @@
-package com.A_23_59.hypernote.domain.use_case.tags
-
-import com.A_23_59.hypernote.data.data_source.TagDao
-import com.A_23_59.hypernote.domain.model.Tag
-
-class AddTags(private val tagDao: TagDao) {
-
-    suspend operator fun invoke(tags:List<Tag>){
-        tagDao.addTags(tags)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/SearchNote.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/SearchNote.kt b/app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/SearchNote.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/SearchNote.kt	
+++ /dev/null	
@@ -1,34 +0,0 @@
-package com.A_23_59.hypernote.domain.use_case.notes
-
-import com.A_23_59.hypernote.domain.model.Note
-import com.A_23_59.hypernote.domain.repository.NoteRepository
-import com.A_23_59.hypernote.domain.util.NoteOrderType
-import com.A_23_59.hypernote.presentation.tasksTagsList
-import kotlinx.coroutines.flow.Flow
-import kotlinx.coroutines.flow.map
-
-class SearchNote(private val noteRepository: NoteRepository) {
-    operator fun invoke(title: String, noteOrderType: NoteOrderType): Flow<List<Note>> {
-        return noteRepository.searchNote(title).map { notes ->
-            when (noteOrderType) {
-                is NoteOrderType.Descending -> notes.sortedByDescending { it.title }
-                is NoteOrderType.Ascending -> notes.sortedBy { it.title }
-                is NoteOrderType.Tags -> findSelectedTagsInNoteList(notes).sortedBy { sortedTags ->
-                    notes.sortedBy { sortedTags.title }
-                    sortedTags.title
-                }
-            }
-        }
-    }
-
-    private fun findSelectedTagsInNoteList(notes: List<Note>): List<Note> {
-        val sortedTagsList: ArrayList<Note> = arrayListOf()
-        notes.forEach { note ->
-            tasksTagsList.forEach { tag ->
-                if (tag.tagName == note.tagNumber1 || tag.tagName == note.tagNumber2 || tag.tagName == note.tagNumber3)
-                    sortedTagsList.add(note)
-            }
-        }
-        return sortedTagsList
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/domain/util/HomeScreenTasksEvent.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/util/HomeScreenTasksEvent.kt b/app/src/main/java/com/A_23_59/hypernote/domain/util/HomeScreenTasksEvent.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/util/HomeScreenTasksEvent.kt	
+++ /dev/null	
@@ -1,14 +0,0 @@
-package com.A_23_59.hypernote.domain.util
-
-import com.A_23_59.hypernote.domain.model.Tag
-import com.A_23_59.hypernote.domain.model.Task
-
-sealed class HomeScreenTasksEvent {
-    data class HomeScreenTasksOrder(val taskOrderType: TaskOrderType) : HomeScreenTasksEvent()
-    data class DeleteTask(val task: Task) : HomeScreenTasksEvent()
-    data object ToggleToolbarActions :HomeScreenTasksEvent()
-    data object ToggleSearchbarVisibility : HomeScreenTasksEvent()
-    data class SearchValueChanged(val input:String) : HomeScreenTasksEvent()
-    data object TaskScreenLoaded: HomeScreenTasksEvent()
-
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/GetNote.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/GetNote.kt b/app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/GetNote.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/GetNote.kt	
+++ /dev/null	
@@ -1,10 +0,0 @@
-package com.A_23_59.hypernote.domain.use_case.notes
-
-import com.A_23_59.hypernote.domain.model.Note
-import com.A_23_59.hypernote.domain.repository.NoteRepository
-
-class GetNote(private val repository: NoteRepository) {
-    suspend operator fun invoke (id:Int): Note? {
-        return repository.getNoteByTitle(id)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/NotaApplication.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/NotaApplication.kt b/app/src/main/java/com/A_23_59/hypernote/NotaApplication.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/NotaApplication.kt	
+++ /dev/null	
@@ -1,7 +0,0 @@
-package com.A_23_59.hypernote
-
-import android.app.Application
-import dagger.hilt.android.HiltAndroidApp
-
-@HiltAndroidApp
-class NotaApplication: Application()
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/AddTask.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/AddTask.kt b/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/AddTask.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/AddTask.kt	
+++ /dev/null	
@@ -1,17 +0,0 @@
-package com.A_23_59.hypernote.domain.use_case.tasks
-
-import com.A_23_59.hypernote.domain.model.InvalidItemException
-import com.A_23_59.hypernote.domain.model.Task
-import com.A_23_59.hypernote.domain.repository.TaskRepository
-
-class AddTask(val repository: TaskRepository) {
-
-    @Throws
-    suspend operator fun invoke(task: Task) {
-        if (task.title.isBlank()) {
-            throw InvalidItemException("the title is empty")
-        }
-
-        repository.addTask(task)
-    }
-}
\ No newline at end of file
Index: app/src/main/res/drawable/ic_launcher_splash_foreground.xml
===================================================================
diff --git a/app/src/main/res/drawable/ic_launcher_splash_foreground.xml b/app/src/main/res/drawable/ic_launcher_splash_foreground.xml
deleted file mode 100644
--- a/app/src/main/res/drawable/ic_launcher_splash_foreground.xml	
+++ /dev/null	
@@ -1,22 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="108dp"
-    android:height="108dp"
-    android:viewportWidth="317"
-    android:viewportHeight="278.6401">
-  <group android:scaleX="0.4738"
-      android:scaleY="0.41646588"
-      android:translateX="83.4027"
-      android:translateY="76.40839">
-    <group android:translateY="212.83208">
-      <path android:pathData="M33.40625,0.71875Q28.078125,0.71875,25.765625,-1.65625Q23.46875,-4.03125,23.46875,-10.65625Q23.46875,-15.125,24.328125,-21.453125Q25.203125,-27.796875,27.359375,-40.609375Q27.640625,-42.34375,29.65625,-54.640625Q31.6875,-66.953125,33.265625,-80.5Q34.703125,-92.015625,34.703125,-97.78125Q34.703125,-104.25,29.953125,-104.25Q26.359375,-104.25,20.953125,-100.4375Q15.546875,-96.625,9.359375,-88.265625Q7.34375,-85.53125,4.890625,-85.53125Q2.875,-85.53125,1.359375,-87.46875Q-0.140625,-89.421875,-0.140625,-91.875Q-0.140625,-94.3125,0.71875,-96.546875Q1.578125,-98.78125,3.890625,-101.953125Q10.9375,-111.59375,19.578125,-116.84375Q28.21875,-122.109375,37.734375,-122.109375Q45.640625,-122.109375,49.59375,-117.203125Q53.5625,-112.3125,53.5625,-102.953125Q53.5625,-94.609375,51.265625,-78.765625Q58.46875,-100.078125,69.546875,-111.09375Q80.640625,-122.109375,95.609375,-122.109375Q107.421875,-122.109375,113.390625,-115.40625Q119.375,-108.71875,119.375,-97.484375Q119.375,-91.15625,117.5,-82.078125L108.71875,-40.890625Q107.28125,-33.703125,107.28125,-28.515625Q107.28125,-22.46875,110.078125,-19.4375Q112.890625,-16.421875,117.9375,-16.421875Q122.6875,-16.421875,127.21875,-19.578125Q131.76562,-22.75,137.95312,-30.09375Q139.6875,-32.109375,141.84375,-32.109375Q143.71875,-32.109375,144.79688,-30.375Q145.875,-28.65625,145.875,-25.625Q145.875,-20.015625,143.14062,-16.703125Q135.64062,-7.625,128.29688,-3.453125Q120.953125,0.71875,112.890625,0.71875Q100.65625,0.71875,93.734375,-6.546875Q86.828125,-13.828125,86.828125,-26.0625Q86.828125,-30.8125,87.625,-36.421875Q88.421875,-42.046875,90.28125,-50.6875L96.046875,-77.046875Q96.34375,-78.34375,97.0625,-81.640625Q97.78125,-84.953125,98.203125,-87.90625Q98.640625,-90.859375,98.640625,-93.75Q98.640625,-98.359375,96.046875,-101.09375Q93.453125,-103.828125,88.703125,-103.828125Q80.0625,-103.828125,71.421875,-94.609375Q62.78125,-85.390625,55.4375,-64.875Q48.09375,-44.359375,43.921875,-12.390625Q42.90625,-5.046875,40.96875,-2.15625Q39.03125,0.71875,33.40625,0.71875Z"
-          android:fillColor="#FFFFFF"/>
-      <path android:pathData="M207.35938,-44.203125Q209.21875,-44.203125,210.21875,-42.328125Q211.23438,-40.46875,211.23438,-37.578125Q211.23438,-30.671875,207.0625,-29.375Q198.42188,-26.359375,188.0625,-25.921875Q185.3125,-13.828125,177.25,-6.546875Q169.1875,0.71875,158.96875,0.71875Q150.32812,0.71875,144.20312,-3.453125Q138.09375,-7.625,134.92188,-14.53125Q131.75,-21.453125,131.75,-29.515625Q131.75,-40.46875,135.92188,-49.03125Q140.10938,-57.59375,147.45312,-62.421875Q154.79688,-67.25,163.71875,-67.25Q174.65625,-67.25,181.35938,-59.6875Q188.0625,-52.125,189.20312,-41.046875Q195.96875,-41.46875,205.34375,-43.921875Q206.48438,-44.203125,207.35938,-44.203125ZM160.125,-14.546875Q164.73438,-14.546875,168.10938,-18.28125Q171.5,-22.03125,172.64062,-29.09375Q168.1875,-32.109375,165.8125,-37Q163.4375,-41.90625,163.4375,-47.375Q163.4375,-49.6875,163.85938,-51.984375L163.14062,-51.984375Q157.39062,-51.984375,153.5625,-46.4375Q149.75,-40.890625,149.75,-30.8125Q149.75,-22.890625,152.84375,-18.71875Q155.9375,-14.546875,160.125,-14.546875Z"
-          android:fillColor="#FFFFFF"/>
-      <path android:pathData="M263.14062,-32.109375Q265.01562,-32.109375,266.09375,-30.375Q267.17188,-28.65625,267.17188,-25.625Q267.17188,-19.875,264.4375,-16.703125Q258.23438,-9.078125,250.89062,-4.171875Q243.54688,0.71875,234.04688,0.71875Q204.67188,0.71875,204.67188,-40.609375Q204.67188,-46.9375,205.10938,-53.421875L199.48438,-53.421875Q195.17188,-53.421875,193.65625,-55Q192.14062,-56.59375,192.14062,-60.046875Q192.14062,-68.109375,198.625,-68.109375L206.82812,-68.109375Q209.28125,-83.953125,214.3125,-97.046875Q219.35938,-110.15625,226.48438,-117.9375Q233.60938,-125.71875,241.82812,-125.71875Q247.875,-125.71875,251.32812,-120.390625Q254.78125,-115.0625,254.78125,-106.984375Q254.78125,-84.671875,236.0625,-68.109375L252.1875,-68.109375Q254.5,-68.109375,255.5,-67.09375Q256.51562,-66.09375,256.51562,-63.359375Q256.51562,-53.421875,240.23438,-53.421875L222.67188,-53.421875Q222.39062,-46.21875,222.39062,-42.1875Q222.39062,-27.21875,225.90625,-21.171875Q229.4375,-15.125,237.07812,-15.125Q243.26562,-15.125,248.01562,-18.859375Q252.76562,-22.609375,259.25,-30.09375Q260.96875,-32.109375,263.14062,-32.109375ZM237.9375,-111.890625Q235.78125,-111.890625,233.10938,-106.484375Q230.45312,-101.09375,228.07812,-91.515625Q225.70312,-81.9375,224.10938,-70.265625Q232.60938,-77.609375,236.85938,-86.75Q241.10938,-95.90625,241.10938,-103.390625Q241.10938,-111.890625,237.9375,-111.890625Z"
-          android:fillColor="#FFFFFF"/>
-      <path android:pathData="M273.625,0.71875Q264.70312,0.71875,259.375,-5.75Q254.04688,-12.234375,254.04688,-22.75Q254.04688,-34.265625,259.375,-44.5625Q264.70312,-54.859375,273.54688,-61.125Q282.40625,-67.390625,292.34375,-67.390625Q295.51562,-67.390625,296.59375,-66.15625Q297.67188,-64.9375,298.39062,-61.78125Q301.42188,-62.359375,304.73438,-62.359375Q311.78125,-62.359375,311.78125,-57.3125Q311.78125,-54.28125,309.625,-42.90625Q306.3125,-26.359375,306.3125,-19.875Q306.3125,-17.71875,307.39062,-16.421875Q308.46875,-15.125,310.20312,-15.125Q312.9375,-15.125,316.82812,-18.640625Q320.71875,-22.171875,327.34375,-30.09375Q329.0625,-32.109375,331.21875,-32.109375Q333.09375,-32.109375,334.17188,-30.375Q335.25,-28.65625,335.25,-25.625Q335.25,-19.875,332.51562,-16.703125Q326.60938,-9.359375,319.98438,-4.3125Q313.375,0.71875,307.17188,0.71875Q302.42188,0.71875,298.45312,-2.515625Q294.5,-5.765625,292.48438,-11.375Q285,0.71875,273.625,0.71875ZM278.8125,-13.828125Q281.96875,-13.828125,284.84375,-17.5625Q287.73438,-21.3125,289.03125,-27.5L294.35938,-54Q288.3125,-53.859375,283.20312,-49.46875Q278.09375,-45.078125,275.0625,-37.875Q272.04688,-30.671875,272.04688,-22.609375Q272.04688,-18.140625,273.84375,-15.984375Q275.64062,-13.828125,278.8125,-13.828125Z"
-          android:fillColor="#FFFFFF"/>
-    </group>
-  </group>
-</vector>
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/domain/use_case/tags/UpdateTags.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tags/UpdateTags.kt b/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tags/UpdateTags.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tags/UpdateTags.kt	
+++ /dev/null	
@@ -1,11 +0,0 @@
-package com.A_23_59.hypernote.domain.use_case.tags
-
-import com.A_23_59.hypernote.data.data_source.TagDao
-import com.A_23_59.hypernote.domain.model.Tag
-
-class UpdateTags(private val tagDao: TagDao) {
-
-    suspend operator fun invoke(tags:List<Tag>){
-        tagDao.updateTags(tags)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/domain/util/HomeScreenNotesEvent.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/util/HomeScreenNotesEvent.kt b/app/src/main/java/com/A_23_59/hypernote/domain/util/HomeScreenNotesEvent.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/util/HomeScreenNotesEvent.kt	
+++ /dev/null	
@@ -1,27 +0,0 @@
-package com.A_23_59.hypernote.domain.util
-
-import com.A_23_59.hypernote.domain.model.Note
-import com.A_23_59.hypernote.domain.model.Tag
-
-sealed class HomeScreenNotesEvent {
-
-    data class OrderNote( val noteOrder: NoteOrderType , val tagOrderIsActive : Boolean =false ):HomeScreenNotesEvent()
-
-    data class DeleteNote(val note: Note):HomeScreenNotesEvent()
-
-   data object ToggleToolbarActions:HomeScreenNotesEvent()
-
-    data object ToggleSearchbarVisibility:HomeScreenNotesEvent()
-
-    data class SearchValueChanged(val input:String):HomeScreenNotesEvent()
-
-    data class OnTagDialogClick(val tags: List<Tag>):HomeScreenNotesEvent()
-
-    data object ClearSearchValue: HomeScreenNotesEvent()
-
-    data object NoteScreenLoaded:HomeScreenNotesEvent()
-
-
-
-
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/presentation/AddItemScreen.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/presentation/AddItemScreen.kt b/app/src/main/java/com/A_23_59/hypernote/presentation/AddItemScreen.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/presentation/AddItemScreen.kt	
+++ /dev/null	
@@ -1,893 +0,0 @@
-package com.A_23_59.hypernote.presentation
-
-
-//noinspection UsingMaterialAndMaterial3Libraries
-//noinspection UsingMaterialAndMaterial3Libraries
-//noinspection UsingMaterialAndMaterial3Libraries
-//noinspection UsingMaterialAndMaterial3Libraries
-//noinspection UsingMaterialAndMaterial3Libraries
-//noinspection UsingMaterialAndMaterial3Libraries
-//noinspection UsingMaterialAndMaterial3Libraries
-//noinspection UsingMaterialAndMaterial3Libraries
-import android.annotation.SuppressLint
-import android.content.Context
-import androidx.activity.compose.BackHandler
-import androidx.compose.animation.AnimatedContent
-import androidx.compose.animation.AnimatedVisibility
-import androidx.compose.animation.animateColorAsState
-import androidx.compose.animation.core.animateDpAsState
-import androidx.compose.animation.core.animateFloatAsState
-import androidx.compose.animation.fadeOut
-import androidx.compose.foundation.background
-import androidx.compose.foundation.border
-import androidx.compose.foundation.clickable
-import androidx.compose.foundation.interaction.MutableInteractionSource
-import androidx.compose.foundation.layout.Arrangement
-import androidx.compose.foundation.layout.Box
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.Spacer
-import androidx.compose.foundation.layout.fillMaxSize
-import androidx.compose.foundation.layout.fillMaxWidth
-import androidx.compose.foundation.layout.height
-import androidx.compose.foundation.layout.padding
-import androidx.compose.foundation.layout.size
-import androidx.compose.foundation.rememberScrollState
-import androidx.compose.foundation.shape.RoundedCornerShape
-import androidx.compose.foundation.text.KeyboardOptions
-import androidx.compose.foundation.verticalScroll
-import androidx.compose.material.Button
-import androidx.compose.material.Icon
-import androidx.compose.material.IconButton
-import androidx.compose.material.MaterialTheme
-import androidx.compose.material.OutlinedTextField
-import androidx.compose.material.Text
-import androidx.compose.material.TextFieldDefaults
-import androidx.compose.material.TopAppBar
-import androidx.compose.material.icons.Icons
-import androidx.compose.material.icons.automirrored.filled.ArrowBack
-import androidx.compose.material.icons.rounded.Add
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.remember
-import androidx.compose.runtime.saveable.rememberSaveable
-import androidx.compose.runtime.setValue
-import androidx.compose.ui.AbsoluteAlignment
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.draw.clip
-import androidx.compose.ui.draw.shadow
-import androidx.compose.ui.graphics.Brush
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.platform.LocalContext
-import androidx.compose.ui.res.painterResource
-import androidx.compose.ui.res.stringResource
-import androidx.compose.ui.text.font.FontWeight
-import androidx.compose.ui.text.input.ImeAction
-import androidx.compose.ui.text.style.TextAlign
-import androidx.compose.ui.tooling.preview.Preview
-import androidx.compose.ui.unit.dp
-import androidx.constraintlayout.compose.ConstraintLayout
-import androidx.constraintlayout.compose.Dimension
-import androidx.hilt.navigation.compose.hiltViewModel
-import androidx.navigation.NavController
-import androidx.navigation.compose.rememberNavController
-import com.A_23_59.hypernote.R
-import com.A_23_59.hypernote.domain.model.Note
-import com.A_23_59.hypernote.domain.model.Task
-import com.A_23_59.hypernote.domain.util.Add_Edit_Events
-import com.A_23_59.hypernote.ui.theme.Gold200
-import com.A_23_59.hypernote.ui.theme.darkerBlue
-import com.A_23_59.hypernote.ui.theme.darkerRed
-import com.A_23_59.hypernote.ui.theme.darkerYellow
-import com.A_23_59.hypernote.ui.theme.elevatedSurface
-import com.A_23_59.hypernote.ui.theme.lighterBlue
-import com.A_23_59.hypernote.ui.theme.lighterRed
-import com.A_23_59.hypernote.ui.theme.lighterYellow
-
-
-var title by mutableStateOf("")
-var description by mutableStateOf("")
-
-var blueIsSelected by mutableStateOf(true)
-var yellowIsSelected by mutableStateOf(false)
-var redIsSelected by mutableStateOf(false)
-var txtShowDateAndTime by mutableStateOf("")
-
-
-@SuppressLint("SuspiciousIndentation")
-@Composable
-fun Add_Edit_Item(
-    navController: NavController,
-    currentPage: Int,
-    addEditViewmodel: Add_EditScreenViewModel = hiltViewModel()
-) {
-
-    val context = LocalContext.current
-    BackHandler {
-        txtShowDateAndTime = context.getString(R.string.due_date)
-        yearFromTextField = 0.toString()
-        monthFromTextField = 0.toString()
-        dayFromTextField = 0.toString()
-        hourFromTextField = 0.toString()
-        minuteFromTextField = 0.toString()
-        navController.popBackStack()
-    }
-    txtShowDateAndTime = stringResource(id = R.string.due_date)
-
-
-    val confirmButtonText =
-        if (addEditViewmodel.currentNoteId == null) {
-            if (currentPage == 0) stringResource(id = R.string.add_to_the_tasks) else stringResource(
-                id = R.string.add_to_the_notes
-            )
-        } else {
-            if (currentPage == 0) stringResource(id = R.string.edit_the_task) else stringResource(id = R.string.edit_the_note)
-        }
-
-
-    val topAppBarText =
-        if (addEditViewmodel.currentNoteId == null) {
-            if (currentPage == 0) stringResource(R.string.adding_task) else stringResource(R.string.adding_note)
-        } else {
-            if (currentPage == 0) stringResource(id = R.string.edit_the_task) else stringResource(id = R.string.edit_the_note)
-        }
-
-
-
-    ConstraintLayout(
-        Modifier
-            .fillMaxSize()
-            .background(MaterialTheme.colors.surface)
-            .verticalScroll(rememberScrollState())
-    ) {
-        val (titlePosition, priorityPosition, lowerColumnPosition, descriptionPosition, priorityTextPosition, topBarPosition) = createRefs()
-
-
-
-        TopAppBar(title = {
-            Text(
-                text = topAppBarText,
-                style = MaterialTheme.typography.h6, fontWeight = FontWeight.Bold,
-                color = MaterialTheme.colors.primaryVariant
-            )
-        }, backgroundColor = MaterialTheme.colors.surface, elevation = 0.dp, navigationIcon = {
-            IconButton(onClick = { navController.popBackStack() }) {
-                Icon(
-                    imageVector = Icons.AutoMirrored.Filled.ArrowBack,
-                    tint = MaterialTheme.colors.primaryVariant,
-                    contentDescription = "back"
-                )
-            }
-        }, modifier = Modifier.constrainAs(topBarPosition) {
-            top.linkTo(parent.top)
-            start.linkTo(parent.start)
-            end.linkTo(parent.end)
-
-        })
-
-        OutlinedTextField(
-            value = addEditViewmodel.state.value.title,
-            colors = TextFieldDefaults.textFieldColors(
-                textColor = MaterialTheme.colors.onSurface,
-                backgroundColor = if (themeIsDark) elevatedSurface else Color.Black.copy(0.12f)
-            ),
-            onValueChange = { addEditViewmodel.onEvent(Add_Edit_Events.EnteredTitle(it)) },
-            label = {
-                Text(
-                    text = stringResource(
-                        R.string.text_field_title
-                    )
-                )
-            },
-            modifier = Modifier.constrainAs(titlePosition) {
-                top.linkTo(topBarPosition.bottom, 16.dp)
-                start.linkTo(parent.start, 16.dp)
-                end.linkTo(parent.end, 16.dp)
-                width = Dimension.fillToConstraints
-            })
-
-        OutlinedTextField(
-            value = addEditViewmodel.state.value.description,
-            colors = TextFieldDefaults.textFieldColors(
-                textColor = MaterialTheme.colors.onSurface,
-                backgroundColor = if (themeIsDark) elevatedSurface else Color.Black.copy(0.12f)
-            ),
-            onValueChange = { addEditViewmodel.onEvent(Add_Edit_Events.EnteredDescription(it)) },
-            label = {
-                Text(
-                    text = if (currentPage == 0) stringResource(R.string.textfield_description_optional) else stringResource(
-                        id = R.string.textfield_description
-                    )
-                )
-            },
-            modifier = Modifier.constrainAs(descriptionPosition) {
-                start.linkTo(parent.start, 16.dp)
-                end.linkTo(parent.end, 16.dp)
-                width = Dimension.fillToConstraints
-                top.linkTo(titlePosition.bottom, 32.dp)
-            })
-
-
-        if (currentPage == 0) {
-            Text(
-                text = stringResource(R.string.level_of_importance),
-                style = MaterialTheme.typography.h6,
-                color = MaterialTheme.colors.onSurface,
-                modifier = Modifier.constrainAs(priorityTextPosition) {
-                    top.linkTo(descriptionPosition.bottom, 24.dp)
-                    start.linkTo(parent.start, 16.dp)
-                    end.linkTo(parent.end, 16.dp)
-                    width = Dimension.fillToConstraints
-                })
-            Row(
-                verticalAlignment = Alignment.CenterVertically,
-                horizontalArrangement = Arrangement.spacedBy(24.dp),
-                modifier = Modifier.constrainAs(priorityPosition) {
-                    width = Dimension.fillToConstraints
-                    start.linkTo(parent.start, 16.dp)
-                    end.linkTo(parent.end, 16.dp)
-                    top.linkTo(priorityTextPosition.bottom, 24.dp)
-
-                }) {
-
-                val redWeight by animateFloatAsState(targetValue = if (redIsSelected) 2f else 1f)
-                val yellowWeight by animateFloatAsState(targetValue = if (yellowIsSelected) 2f else 1f)
-                val blueWeight by animateFloatAsState(targetValue = if (blueIsSelected) 2f else 1f)
-                val redBorder by animateDpAsState(targetValue = if (redIsSelected) 3.dp else 0.dp)
-                val yellowBorder by animateDpAsState(targetValue = if (yellowIsSelected) 3.dp else 0.dp)
-                val blueBorder by animateDpAsState(targetValue = if (blueIsSelected) 3.dp else 0.dp)
-                val interactionSource = remember { MutableInteractionSource() }
-                val blueSize by animateDpAsState(targetValue = if (blueIsSelected) 75.dp else 45.dp)
-                Box(
-                    modifier = Modifier
-                        .shadow(
-                            20.dp,
-                            RoundedCornerShape(15.dp),
-                            spotColor = if (themeIsDark && blueIsSelected) Color.White else Color.Black
-                        )
-                        .border(
-                            width = blueBorder,
-                            color = if (blueIsSelected) MaterialTheme.colors.onSurface else Color.Transparent,
-                            RoundedCornerShape(15.dp)
-                        )
-                        .clip(RoundedCornerShape(15.dp))
-                        .height(blueSize)
-                        .background(
-                            Brush.verticalGradient(listOf(lighterBlue, darkerBlue), startY = -10f)
-                        )
-                        .weight(blueWeight)
-                        .clickable(
-                            indication = null,
-                            interactionSource = interactionSource
-                        ) {
-                            blueIsSelected = true
-                            yellowIsSelected = false
-                            redIsSelected = false
-                        },
-                ) {
-                    AnimatedContent(
-                        targetState = blueIsSelected,
-                        modifier = Modifier.align(Alignment.Center), label = ""
-                    ) {
-                        if (it)
-                            Text(
-                                text = stringResource(id = R.string.low),
-                                style = MaterialTheme.typography.h6,
-                                fontWeight = FontWeight.Bold,
-                                color = Color.White,
-                                modifier = Modifier.align(Alignment.Center)
-                            )
-                        else
-                            Text(
-                                text = stringResource(id = R.string.low),
-                                style = MaterialTheme.typography.body1,
-                                color = Color.White,
-                                modifier = Modifier.align(Alignment.Center)
-                            )
-                    }
-                }
-
-
-                val yellowSize by animateDpAsState(targetValue = if (yellowIsSelected) 75.dp else 45.dp)
-                Box(
-                    modifier = Modifier
-                        .shadow(
-                            20.dp, RoundedCornerShape(15.dp),
-                            spotColor = if (themeIsDark && yellowIsSelected) Color.White else Color.Black
-                        )
-                        .border(
-                            yellowBorder,
-                            if (yellowIsSelected) MaterialTheme.colors.onSurface else Color.Transparent,
-                            RoundedCornerShape(15.dp)
-                        )
-                        .clip(RoundedCornerShape(15.dp))
-                        .background(
-                            Brush.verticalGradient(
-                                listOf(lighterYellow, darkerYellow),
-                                startY = -10f
-                            )
-                        )
-                        .weight(yellowWeight)
-                        .clickable(
-                            indication = null,
-                            interactionSource = interactionSource
-                        ) {
-                            yellowIsSelected = true
-                            redIsSelected = false
-                            blueIsSelected = false
-                        }
-                        .size(yellowSize),
-                ) {
-                    AnimatedContent(
-                        targetState = yellowIsSelected,
-                        modifier = Modifier.align(Alignment.Center)
-                    ) {
-                        if (it)
-                            Text(
-                                text = stringResource(id = R.string.medium),
-                                style = MaterialTheme.typography.h6,
-                                fontWeight = FontWeight.Bold,
-                                color = Color.White,
-                                modifier = Modifier.align(Alignment.Center)
-                            )
-                        else
-                            Text(
-                                text = stringResource(id = R.string.medium),
-                                style = MaterialTheme.typography.body1,
-                                color = Color.White,
-                                modifier = Modifier.align(Alignment.Center)
-                            )
-                    }
-
-                }
-
-
-                val redSize by animateDpAsState(targetValue = if (redIsSelected) 75.dp else 45.dp)
-
-                Box(
-                    modifier = Modifier
-                        .shadow(
-                            20.dp, RoundedCornerShape(15.dp),
-                            spotColor = if (themeIsDark && redIsSelected) Color.White else Color.Black
-                        )
-                        .border(
-                            redBorder,
-                            if (redIsSelected) MaterialTheme.colors.onSurface else Color.Transparent,
-                            RoundedCornerShape(15.dp)
-                        )
-                        .clip(RoundedCornerShape(15.dp))
-                        .weight(redWeight)
-                        .background(
-                            Brush.verticalGradient(
-                                listOf(lighterRed, darkerRed),
-                                startY = -15f
-                            )
-                        )
-                        .clickable(
-                            indication = null,
-                            interactionSource = interactionSource
-                        ) {
-                            redIsSelected = true
-                            yellowIsSelected = false
-                            blueIsSelected = false
-                        }
-                        .height(redSize),
-                ) {
-                    AnimatedContent(
-                        targetState = redIsSelected,
-                        modifier = Modifier.align(Alignment.Center)
-                    ) {
-                        if (it)
-                            Text(
-                                text = stringResource(id = R.string.high),
-                                style = MaterialTheme.typography.h6,
-                                fontWeight = FontWeight.Bold,
-                                color = Color.White,
-                                modifier = Modifier.align(Alignment.Center)
-                            )
-                        else
-                            Text(
-                                text = stringResource(id = R.string.high),
-                                style = MaterialTheme.typography.body1,
-                                color = Color.White,
-                                modifier = Modifier.align(Alignment.Center)
-                            )
-
-                    }
-                }
-            }
-
-            Column(
-                Modifier
-                    .constrainAs(lowerColumnPosition) {
-                        start.linkTo(priorityPosition.start)
-                        end.linkTo(priorityPosition.end)
-                        top.linkTo(priorityTextPosition.bottom, 135.dp)
-                        bottom.linkTo(parent.bottom)
-                        width = Dimension.fillToConstraints
-                    }
-                    .fillMaxWidth(), horizontalAlignment = Alignment.Start)
-            {
-                var dueDateButtonIsSelected by remember { mutableStateOf(false) }
-                val taskOptions =
-                    listOf(
-                        context.getString(R.string.repeat),
-                        context.getString(R.string.due_date_add_screen)
-                    )
-
-                Row(
-                    verticalAlignment = Alignment.CenterVertically,
-                    horizontalArrangement = Arrangement.spacedBy(32.dp),
-                    modifier = Modifier.padding(bottom = 32.dp)
-                ) {
-                    var repeatButtonSelected by remember { mutableStateOf(false) }
-
-                    val repeatIsSelectedColor by animateColorAsState(  //TODO   WE WANT TO TURN THIS BUTTON ON ONLY WHEN REPEAT DATE HAS BEEN SET , AND THEN TURN IT OFF
-                        targetValue = if (selectedRepeatTaskOption.isNotEmpty()) MaterialTheme.colors.primary else MaterialTheme.colors.onSurface.copy(
-                            0.6f
-                        ),
-                        label = "repeatColorIsSelected"
-                    )
-                    val dueDateIsSelectedColor by animateColorAsState(
-                        targetValue = if (dueDateHasBeenSet || selectedRepeatTaskOption.isNotEmpty()) MaterialTheme.colors.primary else MaterialTheme.colors.onSurface.copy(
-                            0.6f
-                        ),
-                        label = "dueDateColorIsSelected"
-                    )
-                    taskOptions.forEach {
-
-                        Column(
-                            horizontalAlignment = Alignment.CenterHorizontally,
-                            modifier = Modifier
-                                .weight(1f)
-                                .border(
-                                    width = 1.5.dp,
-                                    if (it == context.getString(R.string.repeat)) repeatIsSelectedColor else dueDateIsSelectedColor,
-                                    RoundedCornerShape(12.dp)
-                                )
-                                .clip(
-                                    RoundedCornerShape(12.dp)
-                                )
-                                .clickable(
-                                    indication = null,
-                                    interactionSource = MutableInteractionSource()
-                                ) {
-                                    if (it == context.getString(R.string.repeat)) {
-                                        if (selectedRepeatTaskOption.isNotEmpty()) {
-                                            selectedRepeatTaskOption = ""
-                                            repeatButtonSelected = false
-                                        } else {
-                                            showRepeatDialog = true
-                                            repeatButtonSelected = true
-
-
-                                        }
-
-                                    } else {
-
-                                        if (dueDateHasBeenSet && !repeatButtonSelected) {
-                                            dueDateHasBeenSet = false
-                                            txtShowDateAndTime = ""
-                                        } else {
-                                            showDateAndTimeDialog = true
-                                            dueDateButtonIsSelected = true
-                                        }
-
-                                    }
-
-                                }
-                                .padding(vertical = 8.dp)
-                        ) {
-                            Icon(
-                                painter = painterResource(
-                                    id = if (it == context.getString(R.string.repeat))
-                                        R.drawable.clock_refresh
-                                    else
-                                        R.drawable.calendar
-                                ),
-                                contentDescription = "repeat",
-                                tint = if (it == context.getString(R.string.repeat)) repeatIsSelectedColor else dueDateIsSelectedColor
-                            )
-                            if (it == context.getString(R.string.due_date_add_screen)) {
-                                AnimatedContent(
-                                    targetState = dueDateHasBeenSet,
-                                    label = "dueDateAnimation"
-                                ) { dueDateHasBeenSet ->
-                                    Text(
-                                        modifier = Modifier.fillMaxWidth(),
-                                        textAlign = TextAlign.Center,
-                                        text = if (dueDateHasBeenSet) {
-                                            if (reminderIsChecked)
-                                                "$txtShowDateAndTime \n ${stringResource(R.string.has_reminder)}"
-                                            else
-                                                txtShowDateAndTime
-                                        } else
-                                            context.getString(
-                                                R.string.due_date_add_screen
-                                            ),
-                                        color = if (it == context.getString(R.string.repeat)) repeatIsSelectedColor else dueDateIsSelectedColor
-                                    )
-                                }
-                            } else
-                                AnimatedContent(
-                                    targetState = selectedRepeatTaskOption.isNotEmpty(),
-                                    label = "repeatAnimation"
-                                ) { dueDateIsSet ->
-                                    Text(
-                                        modifier = Modifier.fillMaxWidth(),
-                                        textAlign = TextAlign.Center,
-                                        text = if (dueDateIsSet) selectedRepeatTaskOption else context.getString(
-                                            R.string.repeat
-                                        ),
-                                        color = if (it == context.getString(R.string.repeat)) repeatIsSelectedColor else dueDateIsSelectedColor
-                                    )
-                                }
-
-
-                        }
-                    }
-                }
-
-                Text(
-                    text = stringResource(R.string.tags),
-                    color = MaterialTheme.colors.onSurface,
-                    style = MaterialTheme.typography.h6
-                )
-
-                Text(
-                    text = stringResource(R.string.up_to_three_tags),
-                    color = Gold200,
-                    style = MaterialTheme.typography.body2,
-                    modifier = Modifier.padding(top = 12.dp)
-                )
-
-                var tagValue by rememberSaveable { mutableStateOf("") }
-
-                var tagError by rememberSaveable { mutableStateOf(false) }
-
-                var characterLimit by rememberSaveable { mutableStateOf<Byte>(0) }
-
-                Column(Modifier.fillMaxWidth()) {
-                    AnimatedContent(
-                        targetState = characterLimit,
-                        label = "characterLimit",
-                        modifier = Modifier
-                            .align(AbsoluteAlignment.Left)
-                            .padding(end = 4.dp, bottom = 4.dp)
-                    ) {
-                        Text(text = "$it / 25", color = MaterialTheme.colors.onSurface.copy(0.5f))
-                    }
-                    OutlinedTextField(
-                        value = tagValue,
-                        enabled = addEditViewmodel.state.value.tagNumber1.isBlank() || addEditViewmodel.state.value.tagNumber2.isBlank() || addEditViewmodel.state.value.tagNumber3.isBlank(),
-                        keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
-                        onValueChange = {
-
-                            if (!it.startsWith(" ") && it.length <= 25) {
-                                characterLimit = it.length.toByte()
-                                tagValue = it
-                                tagError = false
-                            } else tagError = true
-
-
-                        },
-                        isError = tagError,
-                        trailingIcon = {
-                            IconButton(enabled = addEditViewmodel.state.value.tagNumber1.isBlank() || addEditViewmodel.state.value.tagNumber2.isBlank() || addEditViewmodel.state.value.tagNumber3.isBlank(),
-                                onClick = {
-
-                                    addEditViewmodel.onEvent(
-                                        Add_Edit_Events.PressedAddTagButton(
-                                            tagValue
-                                        )
-                                    )
-                                    tagValue = ""
-                                    characterLimit = 0
-
-                                }) {
-                                Icon(
-                                    imageVector = Icons.Rounded.Add,
-                                    contentDescription = "",
-                                    tint = MaterialTheme.colors.onSurface
-                                )
-                            }
-                        },
-                        placeholder = { Text(text = stringResource(R.string.tag_name)) },
-                        colors = TextFieldDefaults.outlinedTextFieldColors(
-                            textColor = MaterialTheme.colors.onSurface,
-                            backgroundColor = if (themeIsDark) elevatedSurface else Color.Black.copy(
-                                0.12f
-                            )
-                        ),
-                        modifier = Modifier
-                            .fillMaxWidth()
-                            .padding(bottom = if (addEditViewmodel.state.value.tagNumber1.isEmpty()) 24.dp else 0.dp)
-                    )
-
-
-                }
-
-                Spacer(
-                    modifier = Modifier
-                        .fillMaxWidth()
-                        .weight(1f)
-                )
-                Button(
-                    onClick = {
-                        addEditViewmodel.onEvent(Add_Edit_Events.Save)
-                    }, modifier = Modifier
-                        .fillMaxWidth()
-                        .padding(bottom = 16.dp)
-                ) {
-                    Text(
-                        text = confirmButtonText,
-                        color = Color.White,
-                        fontWeight = FontWeight.Bold,
-                        style = MaterialTheme.typography.body1,
-                        modifier = Modifier.padding(bottom = 3.dp)
-                    )
-                }
-            }
-        } else {
-            Column(Modifier.constrainAs(lowerColumnPosition) {
-                start.linkTo(descriptionPosition.start)
-                end.linkTo(descriptionPosition.end)
-                top.linkTo(descriptionPosition.bottom, 16.dp)
-                bottom.linkTo(parent.bottom)
-                width = Dimension.fillToConstraints
-                height = Dimension.fillToConstraints
-            }) {
-                Text(
-                    text = stringResource(R.string.tags),
-                    color = MaterialTheme.colors.onSurface,
-                    style = MaterialTheme.typography.h6, modifier = Modifier.padding(top = 8.dp)
-                )
-
-                Text(
-                    text = stringResource(R.string.up_to_three_tags),
-                    color = Gold200,
-                    style = MaterialTheme.typography.body2,
-                    modifier = Modifier.padding(top = 12.dp)
-                )
-
-                var tagValue by remember { mutableStateOf("") }
-
-                var characterLimit by remember { mutableStateOf<Byte>(0) }
-
-                Column(Modifier.fillMaxWidth()) {
-                    AnimatedContent(
-                        targetState = characterLimit,
-                        label = "characterLimit",
-                        modifier = Modifier
-                            .align(Alignment.End)
-                            .padding(end = 4.dp, bottom = 4.dp)
-                    ) {
-                        Text(text = "$it / 25", color = MaterialTheme.colors.onSurface.copy(0.5f))
-                    }
-                    OutlinedTextField(
-                        value = tagValue,
-                        enabled = addEditViewmodel.state.value.tagNumber1.isBlank() || addEditViewmodel.state.value.tagNumber2.isBlank() || addEditViewmodel.state.value.tagNumber3.isBlank(),
-                        keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
-                        onValueChange = {
-
-                            if (!it.startsWith(" ") && it.length <= 25) {
-                                characterLimit = it.length.toByte()
-                                tagValue = it
-
-                            }
-
-
-                        },
-                        trailingIcon = {
-                            IconButton(enabled = addEditViewmodel.state.value.tagNumber1.isBlank() || addEditViewmodel.state.value.tagNumber2.isBlank() || addEditViewmodel.state.value.tagNumber3.isBlank(),
-                                onClick = {
-
-                                    addEditViewmodel.onEvent(
-                                        Add_Edit_Events.PressedAddTagButton(
-                                            tagValue
-                                        )
-                                    )
-
-                                    tagValue = ""
-                                    characterLimit = 0
-
-                                }) {
-                                Icon(
-                                    imageVector = Icons.Rounded.Add,
-                                    contentDescription = "",
-                                    tint = MaterialTheme.colors.onSurface
-                                )
-                            }
-                        },
-                        placeholder = { Text(text = stringResource(R.string.tag_name)) },
-                        colors = TextFieldDefaults.outlinedTextFieldColors(
-                            textColor = MaterialTheme.colors.onSurface,
-                            backgroundColor = if (themeIsDark) elevatedSurface else Color.Black.copy(
-                                0.12f
-                            )
-                        ),
-                        modifier = Modifier
-                            .fillMaxWidth()
-                            .padding(bottom = if (addEditViewmodel.state.value.tagNumber1.isEmpty()) 24.dp else 0.dp)
-                    )
-
-
-                }
-
-
-                AnimatedVisibility(visible = addEditViewmodel.state.value.tagNumber1.isNotEmpty() || addEditViewmodel.state.value.tagNumber2.isNotEmpty() || addEditViewmodel.state.value.tagNumber3.isNotEmpty()) {
-                    Column(
-                        Modifier
-                            .fillMaxWidth()
-                            .padding(vertical = 24.dp),
-                        verticalArrangement = Arrangement.spacedBy(12.dp)
-                    ) {
-
-                        Row(
-                            Modifier.fillMaxWidth(),
-                            horizontalArrangement = Arrangement.spacedBy(12.dp),
-                            verticalAlignment = Alignment.CenterVertically
-                        ) {
-
-
-                            AnimatedVisibility(
-                                visible = addEditViewmodel.state.value.tagNumber1.isNotEmpty() && addEditViewmodel.state.value.tagNumber1.length < 25,
-                                exit = fadeOut()
-                            ) {
-                                myTag(
-                                    addEditViewmodel.state.value.tagNumber1,
-                                    MaterialTheme.colors.onSurface,
-                                    borderStroke = 1.dp, deletable = true
-                                ) {
-                                    addEditViewmodel.onEvent(
-                                        Add_Edit_Events.PressedDeleteTagButton(
-                                            "tagNumber1"
-                                        )
-                                    )
-                                    return@myTag Unit
-                                }
-                            }
-                            AnimatedVisibility(
-                                visible = addEditViewmodel.state.value.tagNumber2.isNotEmpty() && addEditViewmodel.state.value.tagNumber2.length < 16,
-                                exit = fadeOut()
-                            ) {
-                                myTag(
-                                    addEditViewmodel.state.value.tagNumber2,
-                                    MaterialTheme.colors.onSurface,
-                                    borderStroke = 1.dp, deletable = true
-                                ) {
-                                    addEditViewmodel.onEvent(
-                                        Add_Edit_Events.PressedDeleteTagButton(
-                                            "tagNumber2"
-                                        )
-                                    )
-                                    return@myTag Unit
-                                }
-                            }
-
-                            AnimatedVisibility(
-                                visible = addEditViewmodel.state.value.tagNumber3.isNotEmpty() && addEditViewmodel.state.value.tagNumber2.length < 13,
-                                exit = fadeOut()
-                            ) {
-                                myTag(
-                                    addEditViewmodel.state.value.tagNumber3,
-                                    MaterialTheme.colors.onSurface,
-                                    borderStroke = 1.dp, deletable = true
-                                ) {
-                                    addEditViewmodel.onEvent(
-                                        Add_Edit_Events.PressedDeleteTagButton(
-                                            "tagNumber3"
-                                        )
-                                    )
-                                    return@myTag Unit
-                                }
-                            }
-
-                        }
-                        AnimatedVisibility(
-                            visible = addEditViewmodel.state.value.tagNumber1.isNotEmpty() && addEditViewmodel.state.value.tagNumber1.length >= 25,
-                            exit = fadeOut()
-                        ) {
-                            myTag(
-                                addEditViewmodel.state.value.tagNumber1,
-                                MaterialTheme.colors.onSurface,
-                                borderStroke = 1.dp,
-                                deletable = true
-                            ) {
-                                addEditViewmodel.onEvent(Add_Edit_Events.PressedDeleteTagButton("tagNumber1"))
-                                return@myTag Unit
-                            }
-
-                        }
-
-                        AnimatedVisibility(
-                            visible = addEditViewmodel.state.value.tagNumber2.length >= 16,
-                            exit = fadeOut()
-                        ) {
-                            myTag(
-                                addEditViewmodel.state.value.tagNumber2,
-                                MaterialTheme.colors.onSurface,
-                                borderStroke = 1.dp,
-                                deletable = true
-                            ) {
-                                addEditViewmodel.onEvent(Add_Edit_Events.PressedDeleteTagButton("tagNumber2"))
-                                return@myTag Unit
-                            }
-
-                        }
-
-                        AnimatedVisibility(
-                            visible = addEditViewmodel.state.value.tagNumber3.length >= 13,
-                            exit = fadeOut()
-                        ) {
-                            myTag(
-                                addEditViewmodel.state.value.tagNumber3,
-                                MaterialTheme.colors.onSurface,
-                                borderStroke = 1.dp,
-                                deletable = true
-                            ) {
-                                addEditViewmodel.onEvent(Add_Edit_Events.PressedDeleteTagButton("tagNumber3"))
-                                return@myTag Unit
-                            }
-                        }
-
-
-                    }
-                }
-
-
-                Spacer(
-                    modifier = Modifier
-                        .fillMaxWidth()
-                        .weight(1f)
-                )
-                Button(
-                    onClick = {
-                        addEditViewmodel.onEvent(Add_Edit_Events.Save)
-                        navController.popBackStack()
-                    }, modifier = Modifier
-                        .fillMaxWidth()
-                        .padding(bottom = 16.dp)
-                ) {
-                    Text(
-                        text = confirmButtonText,
-                        color = Color.White,
-                        fontWeight = FontWeight.Bold,
-                        style = MaterialTheme.typography.body1,
-                        modifier = Modifier.padding(bottom = 3.dp)
-                    )
-                }
-            }
-        }
-
-
-    }
-}
-
-/**
- * this function will reset all the values in the Temporary section
- * to their default values when Persistent Button is clicked
- * @param context is for fetching Due Date string from strings.xml
- */
-fun resetTemporary(context: Context) {
-    txtShowDateAndTime = context.getString(
-        R.string.due_date
-    )
-    dayFromTextField = ""
-    monthFromTextField = ""
-    yearFromTextField = ""
-    minuteFromTextField = ""
-    hourFromTextField = ""
-    todayIsSelected = false
-    tomorrowIsSelected = false
-    afterTomorrowIsSelected = false
-
-}
-
-@Preview(showBackground = true, showSystemUi = true)
-@Composable
-fun AddItemScreenPreview() {
-    Add_Edit_Item(navController = rememberNavController(), currentPage = 0)
-}
Index: app/src/main/java/com/A_23_59/hypernote/presentation/ChooseDateAndTimeDialogPreview.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/presentation/ChooseDateAndTimeDialogPreview.kt b/app/src/main/java/com/A_23_59/hypernote/presentation/ChooseDateAndTimeDialogPreview.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/presentation/ChooseDateAndTimeDialogPreview.kt	
+++ /dev/null	
@@ -1,427 +0,0 @@
-@file:Suppress("AnimatedContentLabel")
-
-package com.A_23_59.hypernote.presentation
-
-import android.widget.Toast
-import androidx.compose.animation.AnimatedContent
-import androidx.compose.animation.ContentTransform
-import androidx.compose.animation.animateColorAsState
-import androidx.compose.animation.fadeIn
-import androidx.compose.animation.fadeOut
-import androidx.compose.animation.slideInVertically
-import androidx.compose.foundation.ExperimentalFoundationApi
-import androidx.compose.foundation.basicMarquee
-import androidx.compose.foundation.clickable
-import androidx.compose.foundation.interaction.MutableInteractionSource
-import androidx.compose.foundation.layout.Arrangement
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.Spacer
-import androidx.compose.foundation.layout.fillMaxWidth
-import androidx.compose.foundation.layout.height
-import androidx.compose.foundation.layout.padding
-import androidx.compose.foundation.layout.width
-import androidx.compose.foundation.shape.RoundedCornerShape
-import androidx.compose.foundation.text.KeyboardOptions
-import androidx.compose.material.Button
-import androidx.compose.material.Card
-import androidx.compose.material.DropdownMenu
-import androidx.compose.material.DropdownMenuItem
-import androidx.compose.material.ExperimentalMaterialApi
-import androidx.compose.material.ExposedDropdownMenuBox
-import androidx.compose.material.ExposedDropdownMenuDefaults
-import androidx.compose.material.MaterialTheme
-import androidx.compose.material.Text
-import androidx.compose.material.TextField
-import androidx.compose.material3.Icon
-import androidx.compose.material3.Switch
-import androidx.compose.material3.SwitchDefaults
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.remember
-import androidx.compose.runtime.setValue
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.platform.LocalContext
-import androidx.compose.ui.res.painterResource
-import androidx.compose.ui.res.stringResource
-import androidx.compose.ui.text.input.KeyboardType
-import androidx.compose.ui.tooling.preview.Preview
-import androidx.compose.ui.unit.dp
-import androidx.compose.ui.window.Dialog
-import com.A_23_59.hypernote.R
-import java.lang.Exception
-import java.text.SimpleDateFormat
-import java.util.Date
-
-var todayIsSelected by mutableStateOf(false)
-var tomorrowIsSelected by mutableStateOf(false)
-var afterTomorrowIsSelected by mutableStateOf(false)
-var yearFromTextField by mutableStateOf("")
-var monthFromTextField by mutableStateOf("")
-var dayFromTextField by mutableStateOf("")
-var hourFromTextField by mutableStateOf("")
-var minuteFromTextField by mutableStateOf("")
-var predefinedIsSelected by mutableStateOf(false)
-var customIsSelected by mutableStateOf(true)
-var dueDateHasBeenSet by mutableStateOf(false)
-var reminderIsChecked by mutableStateOf(false)
-var showDateAndTimeDialog by mutableStateOf(false)
-
-@OptIn(ExperimentalMaterialApi::class, ExperimentalFoundationApi::class)
-@Composable
-fun ChooseDateTimeDialog() {
-
-    var minuteError by remember { mutableStateOf(false) }
-    var hourError by remember { mutableStateOf(false) }
-    var dayError by remember { mutableStateOf(false) }
-    var monthError by remember { mutableStateOf(false) }
-    var yearError by remember { mutableStateOf(false) }
-    val customTagColor by animateColorAsState(
-        targetValue = if (customIsSelected) MaterialTheme.colors.primaryVariant else MaterialTheme.colors.onSurface.copy(
-            0.8f
-        )
-    )
-    val predefinedTagColor by animateColorAsState(
-        targetValue = if (predefinedIsSelected) MaterialTheme.colors.primaryVariant else MaterialTheme.colors.onSurface.copy(
-            0.8f
-        )
-    )
-
-
-    val context = LocalContext.current
-    var setDateAndTimeIsEnabled by remember { mutableStateOf(false) }
-    setDateAndTimeIsEnabled =
-        !hourError && !minuteError && !dayError && !monthError && !yearError && minuteFromTextField.isNotEmpty() && hourFromTextField.isNotEmpty() && yearFromTextField.isNotEmpty() && monthFromTextField.isNotEmpty() && dayFromTextField.isNotEmpty()
-
-Dialog(onDismissRequest = { showDateAndTimeDialog =false }) {
-    Card(modifier = Modifier.fillMaxWidth(),
-        shape = RoundedCornerShape(15.dp)
-    ) {
-        Column(modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp)) {
-            Row(
-                Modifier.fillMaxWidth(),
-                horizontalArrangement = Arrangement.spacedBy(
-                    12.dp,
-                    alignment = Alignment.CenterHorizontally
-                ),
-                verticalAlignment = Alignment.CenterVertically
-            ) {
-
-                Text(
-                    text = stringResource(R.string.date),
-                    style = MaterialTheme.typography.h6,
-                    modifier = Modifier.padding(top = 14.dp, end = 6.dp)
-                )
-                myTag(
-                    color = predefinedTagColor,
-                    tagTitle = stringResource(R.string.predefined),
-                    roundedCornerValue = 10.dp,
-                    modifier = Modifier
-                        .weight(1f)
-                        .padding(top = 15.dp)
-                        .clickable(indication = null,
-                            interactionSource = remember { MutableInteractionSource() }) {
-                            predefinedIsSelected = true
-                            customIsSelected = false
-                        }, textModifier = Modifier.padding(all = 6.dp)
-                )
-                myTag(
-                    color = customTagColor,
-                    tagTitle = stringResource(R.string.custom),
-                    roundedCornerValue = 10.dp,
-                    modifier = Modifier
-                        .weight(1f)
-                        .padding(top = 15.dp)
-                        .clickable(indication = null,
-                            interactionSource = remember { MutableInteractionSource() }) {
-                            customIsSelected = true
-                            predefinedIsSelected = false
-                        }, textModifier = Modifier.padding(all = 6.dp)
-                )
-            }
-
-            Spacer(modifier = Modifier.height(12.dp))
-
-            var expanded by remember { mutableStateOf(false) }
-            val dropdownItems = listOf(
-                context.getString(R.string.today),
-                context.getString(R.string.tomorrow),
-                context.getString(R.string.after_tomorrow)
-            )
-            var selectedItemDropDown by remember { mutableStateOf("") }
-
-            AnimatedContent(
-                targetState = customIsSelected,
-                transitionSpec = {
-                    ContentTransform(
-                        targetContentEnter = slideInVertically() + fadeIn(),
-                        initialContentExit = fadeOut()
-                    )
-                }) { selected ->
-                if (selected) {
-                    Row(
-                        horizontalArrangement = Arrangement.spacedBy(16.dp),
-                        modifier = Modifier.padding(top = 12.dp)
-
-                    ) {
-                        TextField(value = dayFromTextField,
-                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
-                            placeholder = { Text(text = stringResource(R.string.day)) },
-                            modifier = Modifier
-                                .width(60.dp)
-                                .weight(1f), isError = dayError,
-                            onValueChange = {
-                                try {
-                                    if (it.length < 3) dayFromTextField = it
-                                    if (dayFromTextField.isNotEmpty())
-                                        dayError =
-                                            dayFromTextField.toInt() > 31 || dayFromTextField.toInt() == 0
-                                } catch (e: Exception) {
-                                    Toast.makeText(
-                                        context,
-                                        context.getString(R.string.invalid_input),
-                                        Toast.LENGTH_SHORT
-                                    ).show()
-                                    dayFromTextField = ""
-                                }
-
-                            })
-                        TextField(value = monthFromTextField,
-                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
-                            placeholder = { Text(text = stringResource(R.string.month)) },
-                            modifier = Modifier
-                                .width(60.dp)
-                                .weight(1f), isError = monthError,
-                            onValueChange = {
-                                try {
-                                    if (it.length < 3) monthFromTextField = it
-                                    if (monthFromTextField.isNotEmpty())
-                                        monthError =
-                                            monthFromTextField.toInt() > 12 || monthFromTextField.toInt() == 0
-                                } catch (e: Exception) {
-                                    Toast.makeText(
-                                        context,
-                                        context.getString(R.string.invalid_input),
-                                        Toast.LENGTH_SHORT
-                                    ).show()
-                                    monthFromTextField = ""
-                                }
-
-                            })
-                        TextField(value = yearFromTextField,
-                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
-                            placeholder = { Text(text = stringResource(R.string.year)) },
-                            modifier = Modifier
-                                .width(60.dp)
-                                .weight(1f), isError = yearError,
-                            onValueChange = {
-                                try {
-                                    if (it.length < 5) {
-                                        yearFromTextField = it
-                                        yearError = it.length != 4
-                                    } else yearError = true
-
-                                } catch (e: Exception) {
-                                    Toast.makeText(
-                                        context,
-                                        context.getString(R.string.invalid_input),
-                                        Toast.LENGTH_SHORT
-                                    ).show()
-                                    yearFromTextField = ""
-                                }
-
-                            })
-                    }
-                } else {
-                    ExposedDropdownMenuBox(
-                        expanded = expanded,
-                        onExpandedChange = { expanded = !expanded }) {
-
-                        TextField(
-                            value = selectedItemDropDown,
-                            onValueChange = {},
-                            readOnly = true,
-                            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },
-                            placeholder = { Text(text = stringResource(R.string.choose)) },
-                            modifier = Modifier
-                                .fillMaxWidth()
-                                .padding(top = 12.dp)
-
-
-                        )
-                        DropdownMenu(
-                            expanded = expanded,
-                            onDismissRequest = { expanded = false }, modifier = Modifier.fillMaxWidth().basicMarquee()) {
-                            dropdownItems.forEach { currentItem ->
-                                DropdownMenuItem(onClick = {
-                                    when (currentItem) {
-                                        context.getString(R.string.today) -> {
-                                            dayFromTextField = currentSystemDay.toString()
-                                            monthFromTextField = currentSystemMonth.toString()
-                                            yearFromTextField = currentSystemYear.toString()
-                                        }
-
-                                        context.getString(R.string.tomorrow) -> {
-                                            dayFromTextField =
-                                                if (currentSystemDay < 30) (1 + currentSystemDay).toString()
-                                                else 1.toString()
-                                            monthFromTextField = currentSystemMonth.toString()
-                                            yearFromTextField = currentSystemYear.toString()
-                                        }
-
-                                        context.getString(R.string.after_tomorrow) -> {
-                                            if (currentSystemDay < 30)
-                                                dayFromTextField = (2 + currentSystemDay).toString()
-                                            else 2.toString()
-                                            monthFromTextField = currentSystemMonth.toString()
-                                            yearFromTextField = currentSystemYear.toString()
-                                        }
-                                    }
-                                    selectedItemDropDown = currentItem
-                                    expanded = false
-
-                                }) {
-                                    Text(text = currentItem)
-                                }
-                            }
-                        }
-
-
-                    }
-
-                }
-
-
-            }
-
-
-
-            Spacer(modifier = Modifier.height(32.dp))
-            Text(
-                text = stringResource(R.string.time),
-                style = MaterialTheme.typography.h6
-            )
-            Row(
-                horizontalArrangement = Arrangement.Absolute.spacedBy(16.dp),
-                modifier = Modifier.padding(top = 16.dp)
-            ) {
-                TextField(
-                    value = hourFromTextField,
-                    placeholder = { Text(text = stringResource(R.string.hour)) },
-                    onValueChange = {
-                        try {
-                            if (it.length < 3) hourFromTextField = it
-                            if (hourFromTextField.isNotEmpty())
-                                hourError =
-                                    hourFromTextField.toInt() > 23 || hourFromTextField.toInt() == 0
-                        } catch (e: Exception) {
-                            Toast.makeText(
-                                context,
-                                context.getString(R.string.invalid_input),
-                                Toast.LENGTH_SHORT
-                            ).show()
-                            hourFromTextField = ""
-                        }
-
-                    },
-                    modifier = Modifier
-                        .width(60.dp)
-                        .weight(1F), isError = hourError,
-                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)
-                )
-                Text(text = ":", style = MaterialTheme.typography.h4)
-                TextField(
-                    value = minuteFromTextField,
-                    placeholder = { Text(text = stringResource(R.string.minute)) },
-                    onValueChange = {
-                        try {
-                            if (it.length < 3) minuteFromTextField = it
-                            if (minuteFromTextField.isNotEmpty())
-                                minuteError =
-                                    minuteFromTextField.toInt() > 59 || minuteFromTextField.toInt() == 0
-                        } catch (e: Exception) {
-                            Toast.makeText(
-                                context,
-                                context.getString(R.string.invalid_input),
-                                Toast.LENGTH_SHORT
-                            ).show()
-                            minuteFromTextField = ""
-                        }
-
-                    }, isError = minuteError,
-                    modifier = Modifier
-                        .width(60.dp)
-                        .weight(1F),
-                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)
-                )
-            }
-
-
-
-            Row(
-                modifier = Modifier
-                    .fillMaxWidth()
-                    .padding(vertical = 18.dp),
-                verticalAlignment = Alignment.CenterVertically,
-                horizontalArrangement = Arrangement.Center
-            ) {
-                Icon(painter = painterResource(id = R.drawable.bell_01), contentDescription ="reminder", tint = MaterialTheme.colors.onSurface)
-                Spacer(modifier = Modifier.width(12.dp))
-                Text(text = stringResource(R.string.have_reminder))
-                Spacer(modifier = Modifier.width(16.dp))
-                Switch(
-                    checked = reminderIsChecked,
-                    colors = SwitchDefaults.colors(
-                        Color.White,
-                        MaterialTheme.colors.primary
-                    ),
-                    onCheckedChange = { reminderIsChecked = !reminderIsChecked })
-            }
-
-            Button(
-                onClick = {
-                    val simpleFormat = SimpleDateFormat("yyyy-MM-dd")
-                    val currentDate: Date =
-                        simpleFormat.parse("$currentSystemYear-$currentSystemMonth-$currentSystemDay") as Date
-                    val enteredDate: Date =
-                        simpleFormat.parse("${yearFromTextField.toInt()}-${monthFromTextField.toInt()}-${dayFromTextField.toInt()}") as Date
-                    val dateIsOld = enteredDate.before(currentDate)
-                    if (dateIsOld) {
-                        setDateAndTimeIsEnabled = false
-                        Toast.makeText(
-                            context,
-                            context.getString(R.string.the_date_entered_is_before_today_s_date),
-                            Toast.LENGTH_LONG
-                        ).show()
-                    } else {
-                        txtShowDateAndTime =
-                            " ${dayFromTextField.toInt()}/${monthFromTextField.toInt()}/${yearFromTextField.toInt()} \n  ${if (selectedLocale == "fa-ir") "${minuteFromTextField.toInt()} : ${hourFromTextField.toInt()}" else "${hourFromTextField.toInt()} : ${minuteFromTextField.toInt()}"}"
-                        showDateAndTimeDialog = false
-                    }
-                    dueDateHasBeenSet = true
-
-                }, enabled = setDateAndTimeIsEnabled, modifier = Modifier
-                    .fillMaxWidth()
-                    .padding(bottom = 16.dp)
-
-            ) {
-                Text(
-                    text = stringResource(R.string.set_time_and_date),
-                    style = MaterialTheme.typography.body1,
-                    color = MaterialTheme.colors.onSurface
-                )
-            }
-        }
-    }
-}
-
-}
-
-@Preview(showBackground = true, showSystemUi = true)
-@Composable
-fun ChooseDateAndTimeDialogPreview() {
-    ChooseDateTimeDialog()
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/DI/AppModule.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/DI/AppModule.kt b/app/src/main/java/com/A_23_59/hypernote/DI/AppModule.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/DI/AppModule.kt	
+++ /dev/null	
@@ -1,96 +0,0 @@
-package com.A_23_59.hypernote.DI
-
-import android.app.Application
-import androidx.room.Room
-import com.A_23_59.hypernote.data.data_source.NotaDatabase
-import com.A_23_59.hypernote.data.data_source.TagDao
-import com.A_23_59.hypernote.data.repository.NoteRepositoryImpl
-import com.A_23_59.hypernote.data.repository.TaskRepositoryImpl
-import com.A_23_59.hypernote.domain.repository.NoteRepository
-import com.A_23_59.hypernote.domain.repository.TaskRepository
-import com.A_23_59.hypernote.domain.use_case.notes.AddNote
-import com.A_23_59.hypernote.domain.use_case.notes.DeleteNote
-import com.A_23_59.hypernote.domain.use_case.notes.GetNote
-import com.A_23_59.hypernote.domain.use_case.notes.GetNotes
-import com.A_23_59.hypernote.domain.use_case.notes.NoteUseCases
-import com.A_23_59.hypernote.domain.use_case.notes.SearchNote
-import com.A_23_59.hypernote.domain.use_case.tags.AddTags
-import com.A_23_59.hypernote.domain.use_case.tags.DeleteTags
-import com.A_23_59.hypernote.domain.use_case.tags.GetTags
-import com.A_23_59.hypernote.domain.use_case.tags.TagsUseCases
-import com.A_23_59.hypernote.domain.use_case.tags.UpdateTags
-import com.A_23_59.hypernote.domain.use_case.tasks.AddTask
-import com.A_23_59.hypernote.domain.use_case.tasks.DeleteTask
-import com.A_23_59.hypernote.domain.use_case.tasks.GetTask
-import com.A_23_59.hypernote.domain.use_case.tasks.GetTasks
-import com.A_23_59.hypernote.domain.use_case.tasks.SearchTask
-import com.A_23_59.hypernote.domain.use_case.tasks.TaskUseCases
-import dagger.Module
-import dagger.Provides
-import dagger.hilt.InstallIn
-import dagger.hilt.components.SingletonComponent
-import javax.inject.Singleton
-
-@Module
-@InstallIn(SingletonComponent::class)
-object AppModule {
-    @Provides
-    @Singleton
-    fun provideNotaDatabase(app: Application): NotaDatabase {
-        return Room.databaseBuilder(app, NotaDatabase::class.java, NotaDatabase.DATABASE_NAME)
-            .build()
-    }
-
-    @Provides
-    @Singleton
-    fun provideNoteRepository(db: NotaDatabase): NoteRepository {
-        return NoteRepositoryImpl(db.noteDao)
-    }
-
-    @Provides
-    @Singleton
-    fun provideTaskRepository(db: NotaDatabase): TaskRepository {
-        return TaskRepositoryImpl(db.taskDao)
-    }
-
-    @Provides
-    @Singleton
-    fun provideTagDao(db: NotaDatabase): TagDao {
-        return db.tagDao
-    }
-
-    @Provides
-    @Singleton
-    fun provideNoteUseCases(noteRepository: NoteRepository): NoteUseCases {
-        return NoteUseCases(
-            GetNotes(noteRepository),
-            DeleteNote(noteRepository),
-            AddNote(noteRepository),
-            GetNote(noteRepository),
-            SearchNote(noteRepository)
-        )
-    }
-
-    @Provides
-    @Singleton
-    fun provideTaskUseCases(taskRepository: TaskRepository): TaskUseCases {
-        return TaskUseCases(
-            GetTasks(taskRepository),
-            DeleteTask(taskRepository),
-            AddTask(taskRepository),
-            GetTask(taskRepository),
-            SearchTask(taskRepository)
-        )
-    }
-
-    @Provides
-    @Singleton
-    fun provideTagUseCases(tagDao: TagDao): TagsUseCases {
-        return TagsUseCases(
-            AddTags(tagDao),
-            DeleteTags(tagDao),
-            UpdateTags(tagDao),
-            GetTags(tagDao)
-        )
-    }
-}
\ No newline at end of file
Index: app/src/main/res/drawable/ic_launcher_splash_background.xml
===================================================================
diff --git a/app/src/main/res/drawable/ic_launcher_splash_background.xml b/app/src/main/res/drawable/ic_launcher_splash_background.xml
deleted file mode 100644
--- a/app/src/main/res/drawable/ic_launcher_splash_background.xml	
+++ /dev/null	
@@ -1,35 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="108dp"
-    android:height="108dp"
-    android:viewportWidth="1024"
-    android:viewportHeight="1024">
-  <group android:scaleX="0.67"
-      android:scaleY="0.67"
-      android:translateX="168.96"
-      android:translateY="168.96">
-    <path
-        android:pathData="M0,0h1024v1024h-1024z"
-        android:strokeWidth="0"
-        android:fillColor="#662483"/>
-    <path
-        android:pathData="m1024,0v1024H352c-11.2,-68.7 32.2,-144.3 -18.7,-221.9 -37.9,-57.8 -100.8,-75 -128,-85.3 -76,-28.9 -149.2,-109.1 -205.3,-210.9V0h1024Z"
-        android:strokeWidth="0"
-        android:fillColor="#f39200"/>
-    <path
-        android:pathData="m1024,0v1024h-370c-53.9,-36.6 -105.9,-84.9 -138.8,-154.6 -43.9,-93.1 -5,-120.7 -44.9,-222.3 -55,-139.8 -152.4,-147.3 -222.3,-258.2C178.1,277.9 170.9,119.5 213.1,0c0,0 810.9,0 810.9,0Z"
-        android:strokeWidth="0"
-        android:fillColor="#e6332a"/>
-    <path
-        android:pathData="m1024,0v1024s-344.5,-221.9 -387.5,-437.5c-43,-215.6 -248.1,-26.9 -270,-220.1C352.9,246.7 379.8,96.7 402.2,0 402.2,0 1024,0 1024,0Z"
-        android:strokeWidth="0"
-        android:fillColor="#2a4b9b"/>
-    <path
-        android:pathData="m1024,0v572.8c-59,-102.7 -185.6,-256 -407.7,-233.3C371.6,364.4 453.8,125.4 512.8,0h511.2Z"
-        android:strokeWidth="0"
-        android:fillColor="#1d71b8"/>
-    <path
-        android:pathData="m1024,0v283.9s-201.6,40.1 -362,-203.2C642.5,51.2 623.7,24.4 605.5,0 605.5,0 1024,0 1024,0Z"
-        android:strokeWidth="0"
-        android:fillColor="#009fe3"/>
-  </group>
-</vector>
Index: app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/GetTask.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/GetTask.kt b/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/GetTask.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/GetTask.kt	
+++ /dev/null	
@@ -1,10 +0,0 @@
-package com.A_23_59.hypernote.domain.use_case.tasks
-
-import com.A_23_59.hypernote.domain.model.Task
-import com.A_23_59.hypernote.domain.repository.TaskRepository
-
-class GetTask(private val repository:TaskRepository) {
-    suspend operator fun invoke (id:Int) : Task? {
-        return repository.getTaskByTitle(id)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/domain/util/Add_Edit_Events.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/util/Add_Edit_Events.kt b/app/src/main/java/com/A_23_59/hypernote/domain/util/Add_Edit_Events.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/util/Add_Edit_Events.kt	
+++ /dev/null	
@@ -1,28 +0,0 @@
-package com.A_23_59.hypernote.domain.util
-
-import com.A_23_59.hypernote.domain.model.Priority
-import java.time.LocalDate
-
-
-sealed class Add_Edit_Events {
-    data class EnteredTitle(val title:String):Add_Edit_Events()
-
-    data class EnteredDescription(val description : String) : Add_Edit_Events()
-
-    data class ChangePriority(val priority: Priority): Add_Edit_Events()
-
-    data class EnteredTaskPeriod(val period: String) : Add_Edit_Events()
-
-    data class EnteredDueDate(val dueDate : LocalDate) : Add_Edit_Events()
-
-    data object ToggleTaskReminder : Add_Edit_Events()
-
-    data class PressedAddTagButton(val tag:String) : Add_Edit_Events()
-
-    data class PressedDeleteTagButton(val selectedTag:String): Add_Edit_Events()
-
-
-    data object ShowValidationSnackBar : Add_Edit_Events()
-
-    data object Save : Add_Edit_Events()
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/presentation/SettingsScreen.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/presentation/SettingsScreen.kt b/app/src/main/java/com/A_23_59/hypernote/presentation/SettingsScreen.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/presentation/SettingsScreen.kt	
+++ /dev/null	
@@ -1,2 +0,0 @@
-package com.A_23_59.hypernote.presentation
-
Index: app/src/main/java/com/A_23_59/hypernote/domain/repository/NoteRepository.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/repository/NoteRepository.kt b/app/src/main/java/com/A_23_59/hypernote/domain/repository/NoteRepository.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/repository/NoteRepository.kt	
+++ /dev/null	
@@ -1,20 +0,0 @@
-package com.A_23_59.hypernote.domain.repository
-
-import com.A_23_59.hypernote.domain.model.Note
-import kotlinx.coroutines.flow.Flow
-
-interface NoteRepository {
-    fun getAllNotes(): Flow<List<Note>>
-
-    fun searchNote(input:String):Flow<List<Note>>
-
-    suspend fun addNote(note: Note)
-
-    suspend fun deleteSelectedNotes(notes: List<Note>)
-
-    suspend fun updateSelectedNotes(notes: List<Note>)
-
-    suspend fun deleteNote(note: Note)
-
-    suspend fun getNoteByTitle(id: Int) : Note?
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/GetNotes.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/GetNotes.kt b/app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/GetNotes.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/GetNotes.kt	
+++ /dev/null	
@@ -1,27 +0,0 @@
-package com.A_23_59.hypernote.domain.use_case.notes
-
-
-import com.A_23_59.hypernote.data.data_source.TagDao
-import com.A_23_59.hypernote.domain.model.Note
-import com.A_23_59.hypernote.domain.model.Tag
-import com.A_23_59.hypernote.domain.repository.NoteRepository
-import com.A_23_59.hypernote.domain.util.NoteOrderType
-import kotlinx.coroutines.flow.Flow
-import kotlinx.coroutines.flow.last
-import kotlinx.coroutines.flow.map
-
-class GetNotes(private val noteRepository: NoteRepository,private val tagDao: TagDao) {
-    operator fun invoke(noteOrderType: NoteOrderType): Flow<List<Note>>{
-        return noteRepository.getAllNotes()
-            .map { notes ->
-            when(noteOrderType){
-                is NoteOrderType.Descending ->notes.sortedByDescending { it.title }
-                is NoteOrderType.Ascending -> notes.sortedBy { it.title }
-                is NoteOrderType.Tags -> //TODO do something when tag button in chips section has been clicked
-            }
-        }
-    }
-
-
-
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/presentation/HomeScreenViewModel.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/presentation/HomeScreenViewModel.kt b/app/src/main/java/com/A_23_59/hypernote/presentation/HomeScreenViewModel.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/presentation/HomeScreenViewModel.kt	
+++ /dev/null	
@@ -1,287 +0,0 @@
-package com.A_23_59.hypernote.presentation
-
-import androidx.compose.runtime.State
-import androidx.compose.runtime.mutableStateListOf
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.snapshots.SnapshotStateList
-import androidx.compose.runtime.toMutableStateList
-import androidx.lifecycle.ViewModel
-import androidx.lifecycle.viewModelScope
-import com.A_23_59.hypernote.domain.model.Note
-import com.A_23_59.hypernote.domain.model.Tag
-import com.A_23_59.hypernote.domain.use_case.notes.NoteUseCases
-import com.A_23_59.hypernote.domain.use_case.tags.TagsUseCases
-import com.A_23_59.hypernote.domain.use_case.tasks.TaskUseCases
-import com.A_23_59.hypernote.domain.util.HomeScreenNotesEvent
-import com.A_23_59.hypernote.domain.util.HomeScreenTasksEvent
-import com.A_23_59.hypernote.domain.util.NoteOrderType
-import com.A_23_59.hypernote.domain.util.NotesState
-import com.A_23_59.hypernote.domain.util.TaskOrderType
-import com.A_23_59.hypernote.domain.util.TasksState
-import dagger.hilt.android.lifecycle.HiltViewModel
-import kotlinx.coroutines.Job
-import kotlinx.coroutines.flow.first
-import kotlinx.coroutines.flow.launchIn
-import kotlinx.coroutines.flow.onEach
-import kotlinx.coroutines.launch
-import javax.inject.Inject
-
-
-@HiltViewModel
-class HomeScreenViewModel @Inject constructor(
-    private val noteUseCases: NoteUseCases,
-    private val taskUseCases: TaskUseCases,
-    private val tagsUseCases: TagsUseCases
-) : ViewModel() {
-
-    var currentNoteOrder: NoteOrderType? = null
-    var taskCurrentOrder: TaskOrderType? = null
-
-    private var getNotesJob: Job? = null
-    private var getTasksJob: Job? = null
-    private var getTagsJob: Job? = null
-
-    private val _taskState = mutableStateOf(TasksState())
-    val taskState: State<TasksState> = _taskState
-
-    private val _noteState = mutableStateOf(NotesState())
-    val noteState: State<NotesState> = _noteState
-
-    private var _distinctNoteTagsList = mutableStateListOf<String>()
-    val distinctNoteTagsList: List<String> = _distinctNoteTagsList
-
-    private var _distinctTaskTagsList = mutableStateListOf<String>()
-    val distinctTaskTagsList: List<String> = _distinctNoteTagsList
-
-    private var _notesTagsList = mutableStateListOf(Tag())
-    val notesTagsList: List<Tag> = _notesTagsList
-
-    private var _taskTagsList = mutableStateListOf(Tag())
-    val tasksTagsList: List<Tag> = _taskTagsList
-
-
-    private fun createDistinctNoteTagList() {
-        _distinctNoteTagsList = notesTagsList.distinctBy { it.tagName }
-            .filterIsInstance<String>() as SnapshotStateList<String>
-    }
-
-    private fun createDistinctTagsTaskList() {
-        _distinctTaskTagsList = tasksTagsList.distinctBy { it.tagName }
-            .filterIsInstance<String>() as SnapshotStateList<String>
-    }
-
-    init {
-        getTasks(TaskOrderType.Ascending)
-
-        viewModelScope.launch {
-            if (tagsUseCases.getTags().first().isEmpty()){
-                tagsUseCases.getTags().onEach {
-                    for (i in noteState.value.notes.indices) {
-                        noteState.value.notes[i].tagNumber1?.let { Tag(tagName = it) }
-                            ?.let { _notesTagsList.add(it) }
-                        noteState.value.notes[i].tagNumber2?.let { Tag(tagName = it) }
-                            ?.let { _notesTagsList.add(it) }
-                        noteState.value.notes[i].tagNumber3?.let { Tag(tagName = it) }
-                            ?.let { _notesTagsList.add(it) }
-                    }
-                }.launchIn(viewModelScope)
-            }
-            else  tagsUseCases.getTags().onEach { tags ->
-                _notesTagsList = tags.toMutableStateList()
-            }.launchIn(viewModelScope)
-        }
-
-        if (currentPage == 0 && tasksTagsList.isNotEmpty())
-            createDistinctTagsTaskList()
-        else if (currentPage == 1 && notesTagsList.isNotEmpty())
-            createDistinctNoteTagList()
-    }
-
-    fun onEvent(homeScreenNotesEvent: HomeScreenNotesEvent) {
-        when (homeScreenNotesEvent) {
-
-            is HomeScreenNotesEvent.DeleteNote -> {
-                viewModelScope.launch {
-                    noteUseCases.deleteNote(homeScreenNotesEvent.note)
-                    deleteTags(homeScreenNotesEvent.note)
-
-                }
-            }
-
-            is HomeScreenNotesEvent.OrderNote -> {
-                if (noteState.value.noteOrder::class == homeScreenNotesEvent.noteOrder::class)
-                    return
-
-                currentNoteOrder = homeScreenNotesEvent.noteOrder
-                getNotes(homeScreenNotesEvent.noteOrder)
-                createDistinctNoteTagList()
-
-            }
-
-            is HomeScreenNotesEvent.ToggleToolbarActions -> {
-                _noteState.value =
-                    noteState.value.copy(isToolbarActionVisible = !noteState.value.isToolbarActionVisible)
-            }
-
-            is HomeScreenNotesEvent.ToggleSearchbarVisibility -> {
-                _noteState.value =
-                    noteState.value.copy(isSearchbarVisible = !noteState.value.isSearchbarVisible)
-            }
-
-            HomeScreenNotesEvent.NoteScreenLoaded -> {
-                getNotes(currentNoteOrder ?: NoteOrderType.Ascending)
-                createDistinctNoteTagList()
-            }
-
-
-            is HomeScreenNotesEvent.SearchValueChanged -> {
-
-                if (homeScreenNotesEvent.input.isNotBlank()) {
-                    noteUseCases.searchNote(
-                        homeScreenNotesEvent.input,
-                        currentNoteOrder ?: NoteOrderType.Ascending
-                    ).onEach {
-                        _noteState.value = noteState.value.copy(
-                            notes = it,
-                            searchBarValue = homeScreenNotesEvent.input
-                        )
-                    }.launchIn(viewModelScope)
-                } else
-                    noteUseCases.getNotes(currentNoteOrder ?: NoteOrderType.Ascending)
-                        .onEach {
-                            _noteState.value =
-                                noteState.value.copy(
-                                    notes = it,
-                                    searchBarValue = homeScreenNotesEvent.input
-                                )
-                        }.launchIn(viewModelScope)
-
-
-            }
-
-            HomeScreenNotesEvent.ClearSearchValue -> {
-                getNotes(NoteOrderType.Ascending)
-                _noteState.value = noteState.value.copy(searchBarValue = "")
-            }
-
-            is HomeScreenNotesEvent.OnTagDialogClick -> {
-                getTagsJob?.cancel()
-                getTasksJob = tagsUseCases.getTags().onEach {tags ->
-                    _noteState.value = noteState.value.copy(notesTagsList = tags)
-                }.launchIn(viewModelScope)
-            }
-        }
-    }
-
-    fun onEvent(taskEvents: HomeScreenTasksEvent) {
-        when (taskEvents) {
-
-            is HomeScreenTasksEvent.HomeScreenTasksOrder -> {
-                if (taskState.value.taskOrder::class == taskEvents.taskOrderType::class)
-                    return
-                taskCurrentOrder = taskEvents.taskOrderType
-                getTasks(taskEvents.taskOrderType)
-            }
-
-            is HomeScreenTasksEvent.DeleteTask -> {
-                viewModelScope.launch {
-                    taskUseCases.deleteTask(taskEvents.task)
-//                    deleteTags(taskEvents.task)
-                }
-            }
-
-            is HomeScreenTasksEvent.ToggleSearchbarVisibility -> {
-                _taskState.value =
-                    taskState.value.copy(isSearchBarVisible = !taskState.value.isSearchBarVisible)
-            }
-
-            is HomeScreenTasksEvent.ToggleToolbarActions -> {
-                _taskState.value =
-                    taskState.value.copy(isToolbarActionsVisible = !taskState.value.isToolbarActionsVisible)
-            }
-
-            HomeScreenTasksEvent.TaskScreenLoaded -> {
-                getTasks(
-                    taskCurrentOrder ?: TaskOrderType.Ascending
-                )
-                createDistinctTagsTaskList()
-            }
-
-            is HomeScreenTasksEvent.SearchValueChanged -> if (taskEvents.input.isNotBlank()) {
-                taskUseCases.searchTask(
-                    taskEvents.input,
-                    taskCurrentOrder ?: TaskOrderType.Ascending
-                ).onEach {
-                    _taskState.value = taskState.value.copy(tasks = it)
-                }.launchIn(viewModelScope)
-            } else {
-                getTasks(taskCurrentOrder ?: TaskOrderType.Ascending)
-                createDistinctTagsTaskList()
-            }
-        }
-    }
-
-    private fun deleteTags(note: Note) {
-
-//        notesTagsList.forEach { tag ->
-//            if (notesTagsList.count {
-//                note.tagNumber1 == tag.tagName
-//            } == 1) {
-//                notesTagsList.remove(tag)
-//            }
-//            if (notesTagsList.count { note.tagNumber2 == tag.tagName } == 1) {
-//                notesTagsList.remove(tag)
-//            }
-//            if (notesTagsList.count { note.tagNumber3 == tag.tagName } == 1) {
-//                notesTagsList.remove(tag)
-//            }
-//        }
-//            notesTagsList.find { it.tagName == note.tagNumber1 }?.let {
-//                notesTagsList.remove(it)
-//            }
-//            notesTagsList.find { it.tagName == note.tagNumber2 }?.let {
-//                notesTagsList.remove(it)
-//            }
-//            notesTagsList.find { it.tagName == note.tagNumber3 }?.let {
-//                notesTagsList.remove(it)
-//            }
-
-
-    }
-
-//    private fun deleteTags(task: Task) {
-//        taskTagsList.find { it.tagName == task.tagNumber1 }?.let {
-//            _taskTagsList.remove(it)
-//        }
-//        taskTagsList.find { it.tagName == task.tagNumber2 }?.let {
-//            _taskTagsList.remove(it)
-//        }
-//        taskTagsList.find { it.tagName == task.tagNumber3 }?.let {
-//            _taskTagsList.remove(it)
-//        }
-//    }
-
-    private fun getNotes(noteOrderType: NoteOrderType) {
-        getNotesJob?.cancel()
-        getNotesJob = noteUseCases.getNotes(noteOrderType).onEach { notes ->
-            _noteState.value = noteState.value.copy(
-                notes = notes,
-                noteOrder = noteOrderType,
-                listIsEmpty = noteState.value.notes.isEmpty()
-            )
-        }.launchIn(viewModelScope)
-    }
-
-
-    private fun getTasks(taskOrderType: TaskOrderType) {
-        getTasksJob?.cancel()
-        getTasksJob = taskUseCases.getTasks(taskOrderType).onEach { tasks ->
-            _taskState.value = taskState.value.copy(
-                tasks = tasks,
-                taskOrder = taskOrderType,
-                listIsEmpty = taskState.value.tasks.isEmpty()
-            )
-
-        }.launchIn(viewModelScope)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/domain/use_case/tags/DeleteTags.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tags/DeleteTags.kt b/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tags/DeleteTags.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tags/DeleteTags.kt	
+++ /dev/null	
@@ -1,11 +0,0 @@
-package com.A_23_59.hypernote.domain.use_case.tags
-
-import com.A_23_59.hypernote.data.data_source.TagDao
-import com.A_23_59.hypernote.domain.model.Tag
-
-class DeleteTags(private val tagDao: TagDao) {
-
-    suspend operator fun invoke (tag: Tag){
-        tagDao.deleteTag(tag)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/SearchTask.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/SearchTask.kt b/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/SearchTask.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/SearchTask.kt	
+++ /dev/null	
@@ -1,39 +0,0 @@
-package com.A_23_59.hypernote.domain.use_case.tasks
-
-import com.A_23_59.hypernote.domain.model.Task
-import com.A_23_59.hypernote.domain.repository.TaskRepository
-import com.A_23_59.hypernote.domain.util.TaskOrderType
-import com.A_23_59.hypernote.presentation.tasksTagsList
-import kotlinx.coroutines.flow.Flow
-import kotlinx.coroutines.flow.map
-
-class SearchTask(private val taskRepository: TaskRepository) {
-    operator fun invoke(input:String,taskOrderType: TaskOrderType):Flow<List<Task>>{
-        return taskRepository.searchTask(input).map { tasks ->
-            when (taskOrderType) {
-                is TaskOrderType.Ascending -> tasks.sortedBy { it.title.lowercase() }
-                is TaskOrderType.Descending -> tasks.sortedByDescending { it.title }
-                is TaskOrderType.DueDate -> tasks.sortedBy { it.dueDate }
-                is TaskOrderType.Priority -> tasks.sortedBy { it.priority }
-                is TaskOrderType.Completed -> tasks.sortedBy { it.isChecked }
-                is TaskOrderType.Undone -> tasks.sortedBy { it.isChecked?.not() }
-                is TaskOrderType.Tags -> findSelectedTagsInTaskList(tasks)
-                    .sortedBy { sortedTags ->
-                        tasks.sortedBy { sortedTags.title }
-                        sortedTags.title
-                    }
-            }
-
-        }
-    }
-    private fun findSelectedTagsInTaskList(tasks: List<Task>): List<Task> {
-        val sortedTagsList: ArrayList<Task> = arrayListOf()
-        tasks.forEach { task ->
-            tasksTagsList.forEach { tag ->
-                if (tag.tagName == task.tagNumber1 || tag.tagName == task.tagNumber2 || tag.tagName == task.tagNumber3)
-                    sortedTagsList.add(task)
-            }
-        }
-        return sortedTagsList
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/domain/repository/TaskRepository.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/repository/TaskRepository.kt b/app/src/main/java/com/A_23_59/hypernote/domain/repository/TaskRepository.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/repository/TaskRepository.kt	
+++ /dev/null	
@@ -1,27 +0,0 @@
-package com.A_23_59.hypernote.domain.repository
-
-
-import com.A_23_59.hypernote.domain.model.Task
-import kotlinx.coroutines.flow.Flow
-
-interface TaskRepository {
-
-    fun getAllTasks (): Flow<List<Task>>
-
-    fun searchTask(input:String): Flow<List<Task>>
-
-
-    suspend fun addTask(task: Task)
-
-
-    suspend fun deleteSelectedTasks(tasks:List<Task>)
-
-
-    suspend fun updateSelectedTasks(tasks:List<Task>)
-
-
-    suspend fun deleteTask(task: Task)
-
-
-    suspend fun getTaskByTitle(id:Int): Task?
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/AddNote.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/AddNote.kt b/app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/AddNote.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/AddNote.kt	
+++ /dev/null	
@@ -1,21 +0,0 @@
-package com.A_23_59.hypernote.domain.use_case.notes
-
-import com.A_23_59.hypernote.domain.model.InvalidItemException
-import com.A_23_59.hypernote.domain.model.InvalidNoteException
-import com.A_23_59.hypernote.domain.model.Note
-import com.A_23_59.hypernote.domain.repository.NoteRepository
-
-class AddNote(val repository: NoteRepository) {
-    @Throws
-    suspend operator fun invoke (note:Note){
-        if (note.title.isBlank()){
-           throw InvalidItemException("the title is empty")
-        }
-        if (note.description.isBlank()){
-            throw InvalidNoteException("the description is empty")
-        }
-        repository.addNote(note)
-
-    }
-
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/DeleteNote.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/DeleteNote.kt b/app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/DeleteNote.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/notes/DeleteNote.kt	
+++ /dev/null	
@@ -1,10 +0,0 @@
-package com.A_23_59.hypernote.domain.use_case.notes
-
-import com.A_23_59.hypernote.domain.model.Note
-import com.A_23_59.hypernote.domain.repository.NoteRepository
-
-class DeleteNote(private val repository: NoteRepository) {
-    suspend operator fun invoke(note: Note) {
-        repository.deleteNote(note)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/data/data_source/TaskDao.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/data/data_source/TaskDao.kt b/app/src/main/java/com/A_23_59/hypernote/data/data_source/TaskDao.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/data/data_source/TaskDao.kt	
+++ /dev/null	
@@ -1,33 +0,0 @@
-package com.A_23_59.hypernote.data.data_source
-
-import androidx.room.Dao
-import androidx.room.Delete
-import androidx.room.Insert
-import androidx.room.OnConflictStrategy
-import androidx.room.Query
-import androidx.room.Update
-import com.A_23_59.hypernote.domain.model.Task
-import kotlinx.coroutines.flow.Flow
-@Dao
-interface TaskDao {
-    @Query("SELECT * FROM tbl_task")
-    fun getAllTasks (): Flow<List<Task>>
-
-    @Query("SELECT * FROM TBL_TASK WHERE title || description LIKE '%' || :input || '%' ")
-    fun searchTask(input:String):Flow<List<Task>>
-
-    @Insert(onConflict = OnConflictStrategy.REPLACE)
-   suspend fun addTask(task: Task)
-
-    @Delete
-    suspend fun deleteAllTasks(tasks:List<Task>)
-
-    @Update
-    suspend fun updateTasks(tasks:List<Task>)
-
-    @Delete
-    suspend fun deleteTask(task: Task)
-
-    @Query("SELECT * FROM TBL_TASK WHERE id = :id")
-   suspend fun getTaskById(id:Int):Task?
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/TaskUseCases.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/TaskUseCases.kt b/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/TaskUseCases.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/TaskUseCases.kt	
+++ /dev/null	
@@ -1,12 +0,0 @@
-package com.A_23_59.hypernote.domain.use_case.tasks
-
-/**
- * this class is for wrap use cases into one class for cleaner access when get called in parameter
- */
-data class TaskUseCases(
-    val getTasks: GetTasks,
-    val deleteTask: DeleteTask,
-    val addTask: AddTask,
-    val getTask: GetTask,
-    val searchTask: SearchTask
-)
Index: app/src/main/java/com/A_23_59/hypernote/presentation/Add_EditScreenViewModel.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/presentation/Add_EditScreenViewModel.kt b/app/src/main/java/com/A_23_59/hypernote/presentation/Add_EditScreenViewModel.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/presentation/Add_EditScreenViewModel.kt	
+++ /dev/null	
@@ -1,140 +0,0 @@
-package com.A_23_59.hypernote.presentation
-
-import android.util.Log
-import androidx.compose.runtime.State
-import androidx.compose.runtime.mutableStateOf
-import androidx.lifecycle.SavedStateHandle
-import androidx.lifecycle.ViewModel
-import androidx.lifecycle.viewModelScope
-import com.A_23_59.hypernote.domain.model.InvalidItemException
-import com.A_23_59.hypernote.domain.model.Note
-import com.A_23_59.hypernote.domain.model.Task
-import com.A_23_59.hypernote.domain.use_case.notes.NoteUseCases
-import com.A_23_59.hypernote.domain.use_case.tasks.TaskUseCases
-import com.A_23_59.hypernote.domain.util.Add_Edit_Events
-import com.A_23_59.hypernote.domain.util.Add_Edit_State
-import dagger.hilt.android.lifecycle.HiltViewModel
-import kotlinx.coroutines.launch
-import javax.inject.Inject
-
-@HiltViewModel
-class Add_EditScreenViewModel @Inject constructor(
-    private val noteUseCases: NoteUseCases,
-    private val taskUseCases: TaskUseCases,
-    savedStateHandle: SavedStateHandle
-) : ViewModel() {
-    private val _state = mutableStateOf(Add_Edit_State())
-    val state: State<Add_Edit_State> = _state
-
-
-
-    var currentNoteId: Int? = null
-
-    init {
-        savedStateHandle.get<Int>("id")?.let {
-            if (it != -1) {
-                if (currentPage == 1) {
-                    viewModelScope.launch {
-                        noteUseCases.getNote(it)?.also { note ->
-                            currentNoteId = note.id
-                            _state.value = state.value.copy(
-                                title = note.title,
-                                description = note.description,
-                                tagNumber1 = note.tagNumber1 ?: "",
-                                tagNumber2 = note.tagNumber2 ?: "",
-                                tagNumber3 = note.tagNumber3 ?: "",
-                            )
-                        }
-
-                    }
-                }
-            }
-
-
-        } ?: println("title is null , from ViewModel")
-
-
-    }
-
-    fun onEvent(events: Add_Edit_Events) {
-        when (events) {
-            is Add_Edit_Events.EnteredTitle -> _state.value = state.value.copy(title = events.title)
-            is Add_Edit_Events.EnteredDescription -> _state.value =
-                state.value.copy(description = events.description)
-
-            is Add_Edit_Events.ChangePriority -> _state.value =
-                state.value.copy(taskPriority = events.priority)
-
-            is Add_Edit_Events.EnteredDueDate -> _state.value =
-                state.value.copy(dateAndTime = events.dueDate.format(Task.timeFormat))
-
-            is Add_Edit_Events.EnteredTaskPeriod -> _state.value =
-                state.value.copy(repeatTime = events.period)
-
-            is Add_Edit_Events.PressedAddTagButton -> {
-
-                if (state.value.tagNumber1.isBlank())
-                    _state.value = state.value.copy(tagNumber1 = events.tag)
-                else if (state.value.tagNumber2.isBlank())
-                    _state.value = state.value.copy(tagNumber2 = events.tag)
-                else if (state.value.tagNumber3.isBlank())
-                    _state.value = state.value.copy(tagNumber3 = events.tag)
-            }
-
-            Add_Edit_Events.ToggleTaskReminder -> _state.value =
-                state.value.copy(itHasReminder = !state.value.itHasReminder)
-
-            Add_Edit_Events.Save -> {
-                viewModelScope.launch {
-                    try {
-                        if (currentPage == 0) {
-
-                            taskUseCases.addTask(
-                                Task(
-                                    title = state.value.title,
-                                    description = state.value.description,
-                                    priority = state.value.taskPriority,
-                                    tagNumber1 = state.value.tagNumber1,
-                                    tagNumber2 = state.value.tagNumber2,
-                                    tagNumber3 = state.value.tagNumber3,
-                                    dueDate = state.value.dateAndTime.toLong(), // this might be a bug source in future
-                                    repeatTime = state.value.repeatTime,
-                                    isChecked = false,
-                                    hasReminder = state.value.itHasReminder
-                                )
-                            )
-                        } else {
-
-                            noteUseCases.addNote(
-                                Note(
-                                    title = state.value.title,
-                                    description = state.value.description,
-                                    tagNumber1 = state.value.tagNumber1,
-                                    tagNumber2 = state.value.tagNumber2,
-                                    tagNumber3 = state.value.tagNumber3,
-                                    id = currentNoteId
-                                )
-                            )
-                        }
-
-                    } catch (e: InvalidItemException) {
-                        Log.e(TAG, "onEvent: ${e.message}")
-                    }
-                }
-            }
-
-            is Add_Edit_Events.PressedDeleteTagButton -> {
-
-                when (events.selectedTag) {
-                    "tagNumber1" -> _state.value = state.value.copy(tagNumber1 = "")
-                    "tagNumber2" -> _state.value = state.value.copy(tagNumber2 = "")
-                    "tagNumber3" -> _state.value = state.value.copy(tagNumber3 = "")
-                }
-            }
-
-            Add_Edit_Events.ShowValidationSnackBar -> TODO()
-        }
-
-    }
-
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/DeleteTask.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/DeleteTask.kt b/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/DeleteTask.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/DeleteTask.kt	
+++ /dev/null	
@@ -1,10 +0,0 @@
-package com.A_23_59.hypernote.domain.use_case.tasks
-
-import com.A_23_59.hypernote.domain.model.Task
-import com.A_23_59.hypernote.domain.repository.TaskRepository
-
-class DeleteTask(private val repository: TaskRepository) {
-    suspend operator fun invoke(task: Task){
-        repository.deleteTask(task)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/GetTasks.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/GetTasks.kt b/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/GetTasks.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/domain/use_case/tasks/GetTasks.kt	
+++ /dev/null	
@@ -1,40 +0,0 @@
-package com.A_23_59.hypernote.domain.use_case.tasks
-
-import com.A_23_59.hypernote.presentation.tasksTagsList
-import com.A_23_59.hypernote.domain.model.Task
-import com.A_23_59.hypernote.domain.repository.TaskRepository
-import com.A_23_59.hypernote.domain.util.TaskOrderType
-import kotlinx.coroutines.flow.Flow
-import kotlinx.coroutines.flow.map
-
-class GetTasks(private val taskRepository: TaskRepository) {
-     operator fun invoke(taskOrderType: TaskOrderType = TaskOrderType.Descending): Flow<List<Task>> {
-        return taskRepository.getAllTasks().map { tasks ->
-            when (taskOrderType) {
-                is TaskOrderType.Ascending -> tasks.sortedBy { it.title.lowercase() }
-                is TaskOrderType.Descending -> tasks.sortedByDescending { it.title }
-                is TaskOrderType.DueDate -> tasks.sortedBy { it.dueDate }
-                is TaskOrderType.Priority -> tasks.sortedBy { it.priority }
-                is TaskOrderType.Completed -> tasks.sortedBy { it.isChecked }
-                is TaskOrderType.Undone -> tasks.sortedBy { it.isChecked?.not() }
-                is TaskOrderType.Tags -> findSelectedTagsInTaskList(tasks)
-                    .sortedBy { sortedTags ->
-                    tasks.sortedBy { sortedTags.title }
-                    sortedTags.title
-                }
-
-            }
-
-        }
-    }
-    private fun findSelectedTagsInTaskList(tasks: List<Task>): List<Task> {
-        val sortedTagsList: ArrayList<Task> = arrayListOf()
-        tasks.forEach { task ->
-            tasksTagsList.forEach { tag ->
-                if (tag.tagName == task.tagNumber1 || tag.tagName == task.tagNumber2 || tag.tagName == task.tagNumber3)
-                    sortedTagsList.add(task)
-            }
-        }
-        return sortedTagsList
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/data/repository/TaskRepositoryImpl.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/data/repository/TaskRepositoryImpl.kt b/app/src/main/java/com/A_23_59/hypernote/data/repository/TaskRepositoryImpl.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/data/repository/TaskRepositoryImpl.kt	
+++ /dev/null	
@@ -1,36 +0,0 @@
-package com.A_23_59.hypernote.data.repository
-
-import com.A_23_59.hypernote.data.data_source.TaskDao
-import com.A_23_59.hypernote.domain.model.Task
-import com.A_23_59.hypernote.domain.repository.TaskRepository
-import kotlinx.coroutines.flow.Flow
-
-class TaskRepositoryImpl(private val taskDao: TaskDao):TaskRepository {
-    override fun getAllTasks(): Flow<List<Task>> {
-        return taskDao.getAllTasks()
-    }
-
-    override fun searchTask(input: String): Flow<List<Task>> {
-        return taskDao.searchTask(input)
-    }
-
-    override suspend fun addTask(task: Task) {
-       return taskDao.addTask(task)
-    }
-
-    override suspend fun deleteSelectedTasks(tasks: List<Task>) {
-        return taskDao.deleteAllTasks(tasks)
-    }
-
-    override suspend fun updateSelectedTasks(tasks: List<Task>) {
-        return taskDao.updateTasks(tasks)
-    }
-
-    override suspend fun deleteTask(task: Task) {
-        return taskDao.deleteTask(task)
-    }
-
-    override suspend fun getTaskByTitle(id: Int): Task? {
-        return taskDao.getTaskById(id)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/A_23_59/hypernote/presentation/TagsDialog.kt
===================================================================
diff --git a/app/src/main/java/com/A_23_59/hypernote/presentation/TagsDialog.kt b/app/src/main/java/com/A_23_59/hypernote/presentation/TagsDialog.kt
deleted file mode 100644
--- a/app/src/main/java/com/A_23_59/hypernote/presentation/TagsDialog.kt	
+++ /dev/null	
@@ -1,133 +0,0 @@
-package com.A_23_59.hypernote.presentation
-
-import androidx.compose.foundation.clickable
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.fillMaxWidth
-import androidx.compose.foundation.layout.height
-import androidx.compose.foundation.layout.padding
-import androidx.compose.foundation.lazy.LazyColumn
-import androidx.compose.foundation.lazy.items
-import androidx.compose.foundation.lazy.rememberLazyListState
-import androidx.compose.foundation.shape.RoundedCornerShape
-import androidx.compose.material.Button
-import androidx.compose.material.Card
-import androidx.compose.material.Divider
-import androidx.compose.material.MaterialTheme
-import androidx.compose.material.Text
-import androidx.compose.material3.Checkbox
-import androidx.compose.material3.CheckboxDefaults
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.saveable.rememberSaveable
-import androidx.compose.runtime.setValue
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.res.stringResource
-import androidx.compose.ui.text.style.TextAlign
-import androidx.compose.ui.tooling.preview.Preview
-import androidx.compose.ui.unit.dp
-import androidx.compose.ui.window.Dialog
-import androidx.hilt.navigation.compose.hiltViewModel
-import com.A_23_59.hypernote.R
-import com.A_23_59.hypernote.domain.model.Tag
-
-
-var showTagsDialog by mutableStateOf(false)
-
-
-
-@Composable
-fun TagsSelectionDialog(viewModel: HomeScreenViewModel = hiltViewModel()) {
-
-
-
-    var enableApplyButton by rememberSaveable { mutableStateOf(false) }
-
-
-
-    Dialog(onDismissRequest = { showTagsDialog = false }) {
-        Card(shape = RoundedCornerShape(15.dp), modifier = Modifier.padding(horizontal = 24.dp)) {
-            Column {
-                LazyColumn(Modifier.height(300.dp), state = rememberLazyListState()) {
-
-                    items(if (currentPage == 0)
-                        viewModel.notesTagsList.distinctBy { it.tagName }
-                    else viewModel.tasksTagsList.distinctBy { it.tagName } , key = {it})  { tag ->
-
-                        var currentTagIsChecked by rememberSaveable { mutableStateOf(tag.isChecked) } // it should store in sharedPreferences or equivalent
-                        enableApplyButton = if (currentPage == 0)
-                            tasksTagsList.any { it.isChecked }
-                        else
-                            notesTagsList.any { it.isChecked }
-
-
-                        Column(Modifier.fillMaxWidth()) {
-                            Row(
-                                Modifier
-                                    .fillMaxWidth()
-                                    .clickable {
-                                        currentTagIsChecked = !currentTagIsChecked
-                                        notesTagsList
-                                            .indexOfFirst {
-                                                it.tagName == tag.tagName
-                                            }
-                                            .also { index ->
-                                                notesTagsList[index] = tag.tagName?.let { Tag(tagName = it) }!!
-                                            }
-
-                                        tag.isChecked = currentTagIsChecked
-                                    }, verticalAlignment = Alignment.CenterVertically
-                            ) {
-                                Checkbox(modifier = Modifier.padding(start = 8.dp),
-                                    colors = CheckboxDefaults.colors(
-                                        MaterialTheme.colors.primary,
-                                        checkmarkColor = Color.White
-                                    ),
-                                    checked = currentTagIsChecked,
-                                    onCheckedChange = {
-                                        currentTagIsChecked = !currentTagIsChecked
-                                        tag.isChecked = currentTagIsChecked
-                                    })
-                                tag.tagName?.let {
-                                    Text(
-                                        text = it,
-                                        textAlign = TextAlign.Start,
-                                        modifier = Modifier.padding(
-                                            horizontal = 12.dp,
-                                            vertical = 14.dp
-                                        )
-                                    )
-                                }
-                            }
-                            Divider(color = MaterialTheme.colors.onSurface.copy(0.3f))
-                        }
-                    }
-
-
-                }
-                Button(
-                    onClick = { showTagsDialog = false },
-                    enabled = enableApplyButton,
-                    modifier = Modifier
-                        .fillMaxWidth()
-                        .padding(16.dp)
-                ) {
-                    Text(
-                        text = stringResource(R.string.filter_tags),
-                        color = MaterialTheme.colors.onSurface
-                    )
-                }
-            }
-        }
-    }
-
-}
-
-@Preview(showBackground = true, showSystemUi = true)
-@Composable
-fun TagsDialogPreview() {
-    TagsSelectionDialog()
-}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/data/data_source/SettingsDataStore.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/data/data_source/SettingsDataStore.kt b/app/src/main/java/com/golden_minute/nota/data/data_source/SettingsDataStore.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/data/data_source/SettingsDataStore.kt	
@@ -0,0 +1,55 @@
+package com.golden_minute.nota.data.data_source
+
+import android.content.Context
+import androidx.datastore.preferences.core.booleanPreferencesKey
+import androidx.datastore.preferences.core.edit
+import androidx.datastore.preferences.core.stringPreferencesKey
+import androidx.datastore.preferences.preferencesDataStore
+import kotlinx.coroutines.flow.Flow
+import kotlinx.coroutines.flow.map
+
+
+class SettingsDataStore(private val context : Context) {
+    private val Context.dataStore by preferencesDataStore(name = "SETTINGS_DATA_STORE")
+
+
+    companion object{
+        private val LANGUAGE = stringPreferencesKey("fa-ir")
+        private val THEME_IS_DARK = booleanPreferencesKey("dark")
+        private val SHOW_WELCOME_SCREEN = booleanPreferencesKey("welcome_screen")
+
+    }
+
+    suspend fun showWelcomeScreen(value:Boolean){
+        context.dataStore.edit { preferences ->
+            preferences[SHOW_WELCOME_SCREEN] = value
+        }
+    }
+
+    suspend fun saveLanguage(language : String){
+        context.dataStore.edit { preferences ->
+            preferences[LANGUAGE] = language
+        }
+    }
+
+    suspend fun saveTheme(isDark : Boolean){
+        context.dataStore.edit { preferences ->
+            preferences[THEME_IS_DARK] = isDark
+        }
+    }
+    val readLanguage : Flow<String>
+    get() = context.dataStore.data.map { preferences ->
+        preferences[LANGUAGE] ?: "fa-ir"
+
+    }
+    val readTheme : Flow<Boolean>
+    get() = context.dataStore.data.map { preferences ->
+        preferences[THEME_IS_DARK]?: true
+    }
+
+    val showWelcomeScreen : Flow<Boolean>
+        get() = context.dataStore.data.map { preferences ->
+            preferences[SHOW_WELCOME_SCREEN]?: true
+        }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/util/ChooseDateTimeDialogEvents.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/util/ChooseDateTimeDialogEvents.kt b/app/src/main/java/com/golden_minute/nota/domain/util/ChooseDateTimeDialogEvents.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/util/ChooseDateTimeDialogEvents.kt	
@@ -0,0 +1,15 @@
+package com.golden_minute.nota.domain.util
+
+sealed class ChooseDateTimeDialogEvents {
+    data class EnteredYear(val year: String) : ChooseDateTimeDialogEvents()
+    data class EnteredMonth(val month: String) : ChooseDateTimeDialogEvents()
+    data class EnteredDateType(val isPredefined: Boolean) : ChooseDateTimeDialogEvents()
+    data class ToggleDueDate(val dueDateIsSet: Boolean) : ChooseDateTimeDialogEvents()
+    data class EnteredHour(val hour: String) : ChooseDateTimeDialogEvents()
+    data class EnteredMinute(val minute: String) : ChooseDateTimeDialogEvents()
+    data class EnteredDay(val day: String) : ChooseDateTimeDialogEvents()
+    data class ReminderStatusIsChanged(val isChecked: Boolean) : ChooseDateTimeDialogEvents()
+    data class ShowDateAndTimeDialog(val status: Boolean) : ChooseDateTimeDialogEvents()
+    data class TimeDialogVisibility(val status: Boolean) : ChooseDateTimeDialogEvents()
+    data object ClearAllValues : ChooseDateTimeDialogEvents()
+}
\ No newline at end of file
Index: app/src/main/res/drawable/light_bulb_com.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/light_bulb_com.xml b/app/src/main/res/drawable/light_bulb_com.xml
new file mode 100644
--- /dev/null	
+++ b/app/src/main/res/drawable/light_bulb_com.xml	
@@ -0,0 +1,5 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="512dp" android:viewportHeight="571.2" android:viewportWidth="571.2" android:width="512dp">
+      
+    <path android:fillColor="#FFFFFF" android:pathData="M353.6,496.4c0,7.51 -6.09,13.6 -13.6,13.6H231.2c-7.51,0 -13.6,-6.09 -13.6,-13.6c0,-7.51 6.09,-13.6 13.6,-13.6H340C347.51,482.8 353.6,488.89 353.6,496.4zM340,516.8H231.2c-8.95,0 -15.88,8.64 -12.9,18.03c1.79,5.66 7.53,9.17 13.47,9.17h0.2c7.85,0 15.03,4.44 18.55,11.47l0.14,0.29c4.74,9.47 14.42,15.45 25,15.45h19.86c10.59,0 20.26,-5.98 25,-15.45l0.14,-0.29c3.52,-7.02 10.7,-11.47 18.55,-11.47h0.2c5.94,0 11.68,-3.5 13.47,-9.17C355.88,525.44 348.95,516.8 340,516.8zM285.6,81.6c7.51,0 13.6,-6.09 13.6,-13.6V13.6c0,-7.51 -6.09,-13.6 -13.6,-13.6C278.09,0 272,6.09 272,13.6V68C272,75.51 278.09,81.6 285.6,81.6zM141.35,133.38c2.65,2.66 6.13,3.98 9.61,3.98c3.48,0 6.96,-1.33 9.61,-3.98c5.31,-5.31 5.31,-13.92 0,-19.23l-38.47,-38.47c-5.3,-5.31 -13.93,-5.31 -19.23,0c-5.31,5.31 -5.31,13.92 0,19.23L141.35,133.38zM108.8,258.4c0,-7.51 -6.09,-13.6 -13.6,-13.6H40.8c-7.51,0 -13.6,6.09 -13.6,13.6c0,7.51 6.09,13.6 13.6,13.6h54.4C102.71,272 108.8,265.91 108.8,258.4zM141.35,383.42l-38.47,38.47c-5.31,5.31 -5.31,13.92 0,19.23c2.65,2.66 6.13,3.98 9.61,3.98c3.48,0 6.96,-1.33 9.61,-3.98l38.47,-38.47c5.31,-5.31 5.31,-13.92 0,-19.23C155.28,378.11 146.66,378.11 141.35,383.42zM429.85,383.42c-5.31,-5.31 -13.92,-5.31 -19.23,0s-5.31,13.92 0,19.23l38.47,38.47c2.66,2.66 6.13,3.98 9.61,3.98s6.96,-1.33 9.61,-3.98c5.31,-5.31 5.31,-13.92 0,-19.23L429.85,383.42zM530.4,244.8H476c-7.51,0 -13.6,6.09 -13.6,13.6c0,7.51 6.09,13.6 13.6,13.6h54.4c7.51,0 13.6,-6.09 13.6,-13.6C544,250.89 537.91,244.8 530.4,244.8zM420.23,137.37c3.48,0 6.96,-1.33 9.61,-3.98l38.47,-38.47c5.31,-5.31 5.31,-13.92 0,-19.23c-5.31,-5.31 -13.92,-5.31 -19.23,0l-38.47,38.47c-5.31,5.31 -5.31,13.92 0,19.23C413.27,136.04 416.75,137.37 420.23,137.37zM353.6,462.4c0,7.51 -6.09,13.6 -13.6,13.6H231.2c-7.51,0 -13.6,-6.09 -13.6,-13.6c0,-7.24 5.68,-13.11 12.82,-13.52C221.95,372.35 142.8,355.31 142.8,265.2c0,-78.87 63.93,-142.8 142.8,-142.8c78.87,0 142.8,63.93 142.8,142.8c0,90.11 -79.15,107.15 -87.62,183.68C347.92,449.29 353.6,455.16 353.6,462.4zM254.26,160.55c-2.12,-5.22 -8.05,-7.72 -13.29,-5.62c-34.76,14.08 -61.1,44.19 -70.48,80.53c-1.41,5.46 1.88,11.02 7.33,12.42c0.85,0.22 1.71,0.33 2.55,0.33c4.54,0 8.68,-3.05 9.87,-7.65c7.77,-30.11 29.59,-55.05 58.38,-66.71C253.85,171.72 256.37,165.78 254.26,160.55z"/>
+    
+</vector>
Index: app/src/main/java/com/golden_minute/nota/domain/util/ChooseDateDialogState.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/util/ChooseDateDialogState.kt b/app/src/main/java/com/golden_minute/nota/domain/util/ChooseDateDialogState.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/util/ChooseDateDialogState.kt	
@@ -0,0 +1,14 @@
+package com.golden_minute.nota.domain.util
+
+data class ChooseDateDialogState(
+    val yearFromTextField: String = "",
+    val monthFromTextField: String = "",
+    val dayFromTextField: String = "",
+    val hourValue: String = "",
+    val minuteValue: String = "",
+    val dateTypeIsPredefined : Boolean = true,
+    val dueDateHasBeenSet: Boolean = false,
+    val reminderIsChecked: Boolean = false,
+    val showDateAndTimeDialog: Boolean = false,
+    val showTimePickerDialog : Boolean = false
+)
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/util/Add_Edit_Events.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/util/Add_Edit_Events.kt b/app/src/main/java/com/golden_minute/nota/domain/util/Add_Edit_Events.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/util/Add_Edit_Events.kt	
@@ -0,0 +1,27 @@
+package com.golden_minute.nota.domain.util
+
+import com.golden_minute.nota.domain.model.Priority
+import java.time.LocalDateTime
+
+
+sealed class Add_Edit_Events {
+    data class EnteredTitle(val title: String) : Add_Edit_Events()
+
+    data class EnteredDescription(val description: String) : Add_Edit_Events()
+
+    data class ChangePriority(val priority: Priority) : Add_Edit_Events()
+
+    data class SaveDueDate(val dueDate: LocalDateTime) : Add_Edit_Events()
+
+    data object ToggleTaskReminder : Add_Edit_Events()
+
+    data class EnteredRepeatDialog(val period: String) : Add_Edit_Events()
+
+    data class PressedAddTagButton(val tag: String) : Add_Edit_Events()
+
+    data class PressedDeleteTagButton(val selectedTag: String) : Add_Edit_Events()
+
+    data object ShowValidationSnackBar : Add_Edit_Events()
+
+    data object Save : Add_Edit_Events()
+}
\ No newline at end of file
Index: app/src/main/res/drawable/nota.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/nota.xml b/app/src/main/res/drawable/nota.xml
new file mode 100644
--- /dev/null	
+++ b/app/src/main/res/drawable/nota.xml	
@@ -0,0 +1,34 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportWidth="108"
+    android:viewportHeight="108">
+  <path
+      android:pathData="M0,0h108v108h-108z"
+      android:strokeWidth="0"
+      android:fillColor="#662483"/>
+  <path
+      android:pathData="M108,0v108H37.13c-1.19,-7.24 3.4,-15.22 -1.97,-23.41 -4,-6.09 -10.63,-7.91 -13.5,-9 -8.02,-3.05 -15.73,-11.5 -21.65,-22.24V0h108Z"
+      android:strokeWidth="0"
+      android:fillColor="#f39200"/>
+  <path
+      android:pathData="M108,0v108h-39.02c-5.68,-3.86 -11.17,-8.95 -14.64,-16.3 -4.63,-9.81 -0.52,-12.73 -4.74,-23.45 -5.8,-14.75 -16.07,-15.53 -23.45,-27.24 -7.37,-11.7 -8.13,-28.41 -3.68,-41.01 0,0 85.53,0 85.53,0Z"
+      android:strokeWidth="0"
+      android:fillColor="#e6332a"/>
+  <path
+      android:pathData="M108,0v108s-36.34,-23.41 -40.87,-46.15c-4.53,-22.74 -26.17,-2.84 -28.48,-23.21C37.22,26.01 40.05,10.2 42.41,0 42.41,0 108,0 108,0Z"
+      android:strokeWidth="0"
+      android:fillColor="#2a4b9b"/>
+  <path
+      android:pathData="M108,0v60.41c-6.22,-10.83 -19.57,-27 -43,-24.61C39.19,38.44 47.87,13.23 54.08,0h53.92Z"
+      android:strokeWidth="0"
+      android:fillColor="#1d71b8"/>
+  <path
+      android:pathData="M108,0v29.95s-21.27,4.23 -38.18,-21.44C67.77,5.4 65.78,2.57 63.86,0 63.86,0 108,0 108,0Z"
+      android:strokeWidth="0"
+      android:fillColor="#009fe3"/>
+  <path
+      android:pathData="M63.26,80.71c0,1.02 -0.83,1.85 -1.85,1.85h-14.82c-1.02,0 -1.85,-0.83 -1.85,-1.85 0,-1.02 0.83,-1.85 1.85,-1.85h14.82c1.02,0 1.85,0.83 1.85,1.85ZM61.41,83.49h-14.82c-1.22,0 -2.16,1.18 -1.76,2.46 0.24,0.77 1.03,1.25 1.83,1.25h0.03c1.07,0 2.05,0.6 2.53,1.56l0.02,0.04c0.65,1.29 1.96,2.1 3.41,2.1h2.7c1.44,0 2.76,-0.81 3.4,-2.1l0.02,-0.04c0.48,-0.96 1.46,-1.56 2.53,-1.56h0.03c0.81,0 1.59,-0.48 1.83,-1.25 0.41,-1.28 -0.54,-2.46 -1.76,-2.46ZM54,24.22c1.02,0 1.85,-0.83 1.85,-1.85v-7.41c0,-1.02 -0.83,-1.85 -1.85,-1.85 -1.02,0 -1.85,0.83 -1.85,1.85v7.41c0,1.02 0.83,1.85 1.85,1.85ZM34.35,31.27c0.36,0.36 0.84,0.54 1.31,0.54 0.47,0 0.95,-0.18 1.31,-0.54 0.72,-0.72 0.72,-1.9 0,-2.62l-5.24,-5.24c-0.72,-0.72 -1.9,-0.72 -2.62,0 -0.72,0.72 -0.72,1.9 0,2.62l5.24,5.24ZM29.92,48.3c0,-1.02 -0.83,-1.85 -1.85,-1.85h-7.41c-1.02,0 -1.85,0.83 -1.85,1.85 0,1.02 0.83,1.85 1.85,1.85h7.41c1.02,0 1.85,-0.83 1.85,-1.85ZM34.35,65.32l-5.24,5.24c-0.72,0.72 -0.72,1.9 0,2.62 0.36,0.36 0.84,0.54 1.31,0.54 0.47,0 0.95,-0.18 1.31,-0.54l5.24,-5.24c0.72,-0.72 0.72,-1.9 0,-2.62 -0.72,-0.72 -1.9,-0.72 -2.62,0ZM73.65,65.32c-0.72,-0.72 -1.9,-0.72 -2.62,0s-0.72,1.9 0,2.62l5.24,5.24c0.36,0.36 0.84,0.54 1.31,0.54s0.95,-0.18 1.31,-0.54c0.72,-0.72 0.72,-1.9 0,-2.62l-5.24,-5.24ZM87.34,46.44h-7.41c-1.02,0 -1.85,0.83 -1.85,1.85s0.83,1.85 1.85,1.85h7.41c1.02,0 1.85,-0.83 1.85,-1.85 0,-1.02 -0.83,-1.85 -1.85,-1.85ZM72.34,31.81c0.47,0 0.95,-0.18 1.31,-0.54l5.24,-5.24c0.72,-0.72 0.72,-1.9 0,-2.62s-1.9,-0.72 -2.62,0l-5.24,5.24c-0.72,0.72 -0.72,1.9 0,2.62 0.36,0.36 0.84,0.54 1.31,0.54ZM63.26,76.08c0,1.02 -0.83,1.85 -1.85,1.85h-14.82c-1.02,0 -1.85,-0.83 -1.85,-1.85 0,-0.99 0.77,-1.79 1.75,-1.84 -1.15,-10.42 -11.93,-12.74 -11.93,-25.02 0,-10.74 8.71,-19.45 19.45,-19.45s19.45,8.71 19.45,19.45c0,12.27 -10.78,14.59 -11.93,25.02 0.97,0.06 1.75,0.85 1.75,1.84ZM49.73,34.97c-0.29,-0.71 -1.1,-1.05 -1.81,-0.77 -4.73,1.92 -8.32,6.02 -9.6,10.97 -0.19,0.74 0.26,1.5 1,1.69 0.12,0.03 0.23,0.04 0.35,0.04 0.62,0 1.18,-0.42 1.34,-1.04 1.06,-4.1 4.03,-7.5 7.95,-9.09 0.71,-0.29 1.05,-1.1 0.77,-1.81Z"
+      android:strokeWidth="0"
+      android:fillColor="#fff"/>
+</vector>
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/tags/DeleteTag.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/tags/DeleteTag.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/tags/DeleteTag.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/tags/DeleteTag.kt	
@@ -0,0 +1,11 @@
+package com.golden_minute.nota.domain.use_case.tags
+
+import com.golden_minute.nota.data.data_source.TagDao
+import com.golden_minute.nota.domain.model.Tag
+
+class DeleteTag(private val tagDao: TagDao) {
+
+    suspend operator fun invoke (tag: Tag){
+        tagDao.deleteTag(tag)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/tags/UpdateTags.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/tags/UpdateTags.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/tags/UpdateTags.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/tags/UpdateTags.kt	
@@ -0,0 +1,11 @@
+package com.golden_minute.nota.domain.use_case.tags
+
+import com.golden_minute.nota.data.data_source.TagDao
+import com.golden_minute.nota.domain.model.Tag
+
+class UpdateTags(private val tagDao: TagDao) {
+
+    suspend operator fun invoke(tags:List<Tag>){
+        tagDao.updateTags(tags)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/tags/AddTags.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/tags/AddTags.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/tags/AddTags.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/tags/AddTags.kt	
@@ -0,0 +1,11 @@
+package com.golden_minute.nota.domain.use_case.tags
+
+import com.golden_minute.nota.data.data_source.TagDao
+import com.golden_minute.nota.domain.model.Tag
+
+class AddTags(private val tagDao: TagDao) {
+
+    suspend operator fun invoke(tags: List<Tag>){
+        tagDao.addTags(tags)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/notes/GetNote.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/GetNote.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/GetNote.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/GetNote.kt	
@@ -0,0 +1,10 @@
+package com.golden_minute.nota.domain.use_case.notes
+
+import com.golden_minute.nota.domain.model.Note
+import com.golden_minute.nota.domain.repository.NoteRepository
+
+class GetNote(private val repository: NoteRepository) {
+    suspend operator fun invoke (id:Int): Note? {
+        return repository.getNoteByTitle(id)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/notes/DeleteNote.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/DeleteNote.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/DeleteNote.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/DeleteNote.kt	
@@ -0,0 +1,10 @@
+package com.golden_minute.nota.domain.use_case.notes
+
+import com.golden_minute.nota.domain.model.Note
+import com.golden_minute.nota.domain.repository.NoteRepository
+
+class DeleteNote(private val repository: NoteRepository) {
+    suspend operator fun invoke(note: Note) {
+        repository.deleteNote(note)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/notes/DeleteNotes.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/DeleteNotes.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/DeleteNotes.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/DeleteNotes.kt	
@@ -0,0 +1,11 @@
+package com.golden_minute.nota.domain.use_case.notes
+
+import com.golden_minute.nota.domain.model.Note
+import com.golden_minute.nota.domain.repository.NoteRepository
+
+class DeleteNotes(val repository: NoteRepository) {
+
+    suspend operator fun invoke(notes: List<Note>) {
+        repository.deleteSelectedNotes(notes)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/notes/AddNote.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/AddNote.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/AddNote.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/AddNote.kt	
@@ -0,0 +1,22 @@
+package com.golden_minute.nota.domain.use_case.notes
+
+import android.content.Context
+import com.golden_minute.nota.R
+import com.golden_minute.nota.domain.model.InvalidItemException
+import com.golden_minute.nota.domain.model.Note
+import com.golden_minute.nota.domain.repository.NoteRepository
+
+class AddNote(val repository: NoteRepository, private val context: Context){
+    @Throws
+    suspend operator fun invoke (note:Note):Long {
+        if (note.title.isBlank()){
+           throw InvalidItemException(context.getString(R.string.the_title_is_empty))
+        }
+        if (note.description.isBlank()){
+            throw InvalidItemException(context.getString(R.string.the_description_is_empty))
+        }
+       return repository.addNote(note)
+
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/GetTask.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/GetTask.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/GetTask.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/GetTask.kt	
@@ -0,0 +1,10 @@
+package com.golden_minute.nota.domain.use_case.tasks
+
+import com.golden_minute.nota.domain.model.Task
+import com.golden_minute.nota.domain.repository.TaskRepository
+
+class GetTask(private val repository:TaskRepository) {
+    suspend operator fun invoke (id:Int) : Task? {
+        return repository.getTaskByTitle(id)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/DeleteTask.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/DeleteTask.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/DeleteTask.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/DeleteTask.kt	
@@ -0,0 +1,10 @@
+package com.golden_minute.nota.domain.use_case.tasks
+
+import com.golden_minute.nota.domain.model.Task
+import com.golden_minute.nota.domain.repository.TaskRepository
+
+class DeleteTask(private val repository: TaskRepository) {
+    suspend operator fun invoke(task: Task){
+        repository.deleteTask(task)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/AddTask.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/AddTask.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/AddTask.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/AddTask.kt	
@@ -0,0 +1,19 @@
+package com.golden_minute.nota.domain.use_case.tasks
+
+import android.content.Context
+import com.golden_minute.nota.R
+import com.golden_minute.nota.domain.model.InvalidItemException
+import com.golden_minute.nota.domain.model.Task
+import com.golden_minute.nota.domain.repository.TaskRepository
+
+class AddTask(val repository: TaskRepository,private val context:Context) {
+
+    @Throws
+    suspend operator fun invoke(task: Task):Long {
+        if (task.title.isBlank()) {
+            throw InvalidItemException(context.getString(R.string.the_title_is_empty))
+        }
+
+        return repository.addTask(task)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/util/HelperFunctions.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/util/HelperFunctions.kt b/app/src/main/java/com/golden_minute/nota/domain/util/HelperFunctions.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/util/HelperFunctions.kt	
@@ -0,0 +1,23 @@
+package com.golden_minute.nota.domain.util
+
+import java.time.LocalDateTime
+import java.time.format.DateTimeFormatter
+
+fun compareDateTimes(date1: String, date2: String, format: String): Int {
+    val formatter = DateTimeFormatter.ofPattern(format)
+    val dateTime1 = LocalDateTime.parse(date1, formatter)
+    val dateTime2 = LocalDateTime.parse(date2, formatter)
+
+    return when {
+        dateTime1 == null || dateTime2 == null -> 0
+        dateTime1.isBefore(dateTime2) -> -1
+        dateTime1.isAfter(dateTime2) -> 1
+        else -> 0
+    }
+}
+
+fun leadingZero(date: String): String {
+    return if (date.toInt() < 10) "0$date" else date
+}
+
+fun customInterval(hours: Int): Long  =  hours * 60 * 60 * 1000L
Index: app/src/main/java/com/golden_minute/nota/domain/alarm_manager/AlarmScheduler.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/alarm_manager/AlarmScheduler.kt b/app/src/main/java/com/golden_minute/nota/domain/alarm_manager/AlarmScheduler.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/alarm_manager/AlarmScheduler.kt	
@@ -0,0 +1,10 @@
+package com.golden_minute.nota.domain.alarm_manager
+
+import com.golden_minute.nota.domain.model.Task
+
+interface AlarmScheduler {
+
+    fun schedule(task:Task)
+
+    fun cancel(task: Task)
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/SearchTask.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/SearchTask.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/SearchTask.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/SearchTask.kt	
@@ -0,0 +1,25 @@
+package com.golden_minute.nota.domain.use_case.tasks
+
+import com.golden_minute.nota.domain.model.Task
+import com.golden_minute.nota.domain.repository.TaskRepository
+import com.golden_minute.nota.domain.util.TaskOrderType
+import kotlinx.coroutines.flow.Flow
+import kotlinx.coroutines.flow.map
+
+class SearchTask(private val taskRepository: TaskRepository) {
+    operator fun invoke(input:String,taskOrderType: TaskOrderType):Flow<List<Task>>{
+        return taskRepository.searchTask(input).map { tasks ->
+            when (taskOrderType) {
+                is TaskOrderType.Ascending -> tasks.sortedBy { it.title }
+                is TaskOrderType.Descending -> tasks.sortedByDescending { it.title }
+                is TaskOrderType.DueDate -> tasks.sortedBy { it.dueDate }
+                is TaskOrderType.Priority -> tasks.sortedByDescending { it.priority }
+                is TaskOrderType.Completed -> tasks.sortedBy { it.isChecked?.not()}
+                is TaskOrderType.Undone -> tasks.sortedBy { it.isChecked?: false }
+                is TaskOrderType.Default -> tasks
+            }
+
+        }
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/notes/SearchNote.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/SearchNote.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/SearchNote.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/SearchNote.kt	
@@ -0,0 +1,22 @@
+package com.golden_minute.nota.domain.use_case.notes
+
+import com.golden_minute.nota.domain.model.Note
+import com.golden_minute.nota.domain.repository.NoteRepository
+import com.golden_minute.nota.domain.util.NoteOrderType
+import kotlinx.coroutines.flow.Flow
+import kotlinx.coroutines.flow.map
+
+class SearchNote(private val noteRepository: NoteRepository) {
+    operator fun invoke(title: String, noteOrderType: NoteOrderType): Flow<List<Note>> {
+        return noteRepository.searchNote(title).map { notes ->
+            when (noteOrderType) {
+                is NoteOrderType.Descending -> notes.sortedByDescending { it.title }
+                is NoteOrderType.Ascending -> notes.sortedBy { it.title }
+                NoteOrderType.CreationDate -> notes.sortedByDescending { it.creationDate }
+                NoteOrderType.Default -> notes
+            }
+        }
+    }
+
+
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/presentation/SettingsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/presentation/SettingsScreen.kt b/app/src/main/java/com/golden_minute/nota/presentation/SettingsScreen.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/presentation/SettingsScreen.kt	
@@ -0,0 +1,2 @@
+package com.golden_minute.nota.presentation
+
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/DeleteTasks.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/DeleteTasks.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/DeleteTasks.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/DeleteTasks.kt	
@@ -0,0 +1,11 @@
+package com.golden_minute.nota.domain.use_case.tasks
+
+import com.golden_minute.nota.domain.model.Task
+import com.golden_minute.nota.domain.repository.TaskRepository
+
+class DeleteTasks(private val repository: TaskRepository) {
+
+    suspend operator fun invoke(tasks: List<Task>) {
+        repository.deleteSelectedTasks(tasks)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/presentation/MainActivityViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/presentation/MainActivityViewModel.kt b/app/src/main/java/com/golden_minute/nota/presentation/MainActivityViewModel.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/presentation/MainActivityViewModel.kt	
@@ -0,0 +1,58 @@
+package com.golden_minute.nota.presentation
+
+import androidx.compose.runtime.State
+import androidx.compose.runtime.mutableStateOf
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import com.golden_minute.nota.data.data_source.SettingsDataStore
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.delay
+import kotlinx.coroutines.flow.MutableStateFlow
+import kotlinx.coroutines.flow.asStateFlow
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+@HiltViewModel
+class MainActivityViewModel @Inject constructor(settingsDataStore: SettingsDataStore)
+    :ViewModel() {
+    private val _showSplashScreen = MutableStateFlow(true)
+    val showSplashScreen = _showSplashScreen.asStateFlow()
+
+    private var _startPage = MutableStateFlow("welcome_screen")
+    val startPage = _startPage.asStateFlow()
+
+    private var _languageData = mutableStateOf("fa-ir")
+    val languageData: State<String> = _languageData
+
+    private var _themeData = mutableStateOf(true)
+    val themeData : State<Boolean> = _themeData
+
+    init {
+        viewModelScope.launch {
+            launch {
+                settingsDataStore.showWelcomeScreen.collect { showWelcomeScreen ->
+                    _startPage.value = if (!showWelcomeScreen) "main_screen" else "welcome_screen"
+                    delay(300)
+                    _showSplashScreen.value = false
+                }
+
+            }
+
+            launch {
+                settingsDataStore.readLanguage.collect { language ->
+                    _languageData.value = language
+
+                }
+            }
+            launch {
+                settingsDataStore.readTheme.collect{ theme ->
+                    _themeData.value = theme
+                }
+            }
+
+
+
+        }
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/tags/DeleteTags.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/tags/DeleteTags.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/tags/DeleteTags.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/tags/DeleteTags.kt	
@@ -0,0 +1,11 @@
+package com.golden_minute.nota.domain.use_case.tags
+
+import com.golden_minute.nota.data.data_source.TagDao
+import com.golden_minute.nota.domain.model.Tag
+
+class DeleteTags(private val tagDao: TagDao) {
+
+    suspend operator fun invoke(tags: List<Tag>): Int{
+       return tagDao.deleteTags(tags)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/CheckSelectedTasks.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/CheckSelectedTasks.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/CheckSelectedTasks.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/CheckSelectedTasks.kt	
@@ -0,0 +1,9 @@
+package com.golden_minute.nota.domain.use_case.tasks
+
+import com.golden_minute.nota.domain.repository.TaskRepository
+
+class CheckSelectedTasks(private val repository: TaskRepository) {
+    suspend operator fun invoke(selectedTasks: List<Int>) {
+        repository.checkSelectedTasks(selectedTasks)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/tags/AddTag.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/tags/AddTag.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/tags/AddTag.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/tags/AddTag.kt	
@@ -0,0 +1,11 @@
+package com.golden_minute.nota.domain.use_case.tags
+
+import com.golden_minute.nota.data.data_source.TagDao
+import com.golden_minute.nota.domain.model.Tag
+
+class AddTag(private val tagDao: TagDao) {
+    suspend operator fun invoke(tag: Tag) {
+        tagDao.addTag(tag)
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/MRebootReceiver.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/MRebootReceiver.kt b/app/src/main/java/com/golden_minute/nota/MRebootReceiver.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/MRebootReceiver.kt	
@@ -0,0 +1,35 @@
+package com.golden_minute.nota
+
+import android.content.BroadcastReceiver
+import android.content.Context
+import android.content.Intent
+import com.golden_minute.nota.data.Alarm_manager.AlarmSchedulerImpl
+import com.golden_minute.nota.domain.repository.TaskRepository
+import dagger.hilt.android.AndroidEntryPoint
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+private const val TAG = "MRebootReceiver"
+@AndroidEntryPoint
+class MRebootReceiver : BroadcastReceiver() {
+
+    @Inject
+    lateinit var taskRepository: TaskRepository
+
+    override fun onReceive(context: Context?, intent: Intent?) {
+
+        if (intent?.action == Intent.ACTION_BOOT_COMPLETED) {
+            val alarmReceiverImpl = AlarmSchedulerImpl(context!!)
+            CoroutineScope(Dispatchers.IO).launch {
+                taskRepository.getScheduledTasks().collect {
+                    it.forEach { task ->
+                        alarmReceiverImpl.schedule(task)
+                    }
+                }
+            }
+
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/data/Alarm_manager/AlarmSchedulerImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/data/Alarm_manager/AlarmSchedulerImpl.kt b/app/src/main/java/com/golden_minute/nota/data/Alarm_manager/AlarmSchedulerImpl.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/data/Alarm_manager/AlarmSchedulerImpl.kt	
@@ -0,0 +1,65 @@
+package com.golden_minute.nota.data.Alarm_manager
+
+import android.annotation.SuppressLint
+import android.app.AlarmManager
+import android.app.PendingIntent
+import android.content.Context
+import android.content.Intent
+import com.golden_minute.nota.domain.alarm_manager.AlarmScheduler
+import com.golden_minute.nota.domain.model.Task
+import java.time.LocalDateTime
+import java.time.temporal.ChronoUnit
+import java.util.Calendar
+
+class AlarmSchedulerImpl(private val context: Context) : AlarmScheduler {
+
+    private val alarmManager = context.getSystemService(AlarmManager::class.java)
+
+    @SuppressLint("ScheduleExactAlarm", "MissingPermission")
+    override fun schedule(task: Task) {
+        val intent = Intent(context, AlarmReceiver::class.java).apply {
+            putExtra("TASK_TITLE", task.title)
+            putExtra("TASK_DESCRIPTION", task.description)
+            putExtra("TASK_ID", task.id)
+            putExtra("TASK_REPEAT_TIME", task.repeatTime)
+            putExtra("TASK_DUE_DATE", task.dueDate)
+
+        }
+
+        val localDateTime = LocalDateTime.parse(task.dueDate).truncatedTo(ChronoUnit.SECONDS)
+
+        val calendar = Calendar.getInstance().apply {
+            set(
+                localDateTime.year,
+                localDateTime.monthValue - 1,
+                localDateTime.dayOfMonth,
+                localDateTime.hour,
+                localDateTime.minute,
+                0
+            )
+        }
+
+                alarmManager.setExactAndAllowWhileIdle(
+                    AlarmManager.RTC_WAKEUP,
+                    calendar.timeInMillis,
+                    PendingIntent.getBroadcast(
+                        context,
+                        task.id!!,
+                        intent,
+                        PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
+                    )
+                )
+
+    }
+
+    override fun cancel(task: Task) {
+        alarmManager.cancel(
+            PendingIntent.getBroadcast(
+                context,
+                task.id!!,
+                Intent(context, AlarmReceiver::class.java),
+                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
+            )
+        )
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/data/Alarm_manager/AlarmReceiver.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/data/Alarm_manager/AlarmReceiver.kt b/app/src/main/java/com/golden_minute/nota/data/Alarm_manager/AlarmReceiver.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/data/Alarm_manager/AlarmReceiver.kt	
@@ -0,0 +1,143 @@
+package com.golden_minute.nota.data.Alarm_manager
+
+import android.annotation.SuppressLint
+import android.app.AlarmManager
+import android.app.NotificationManager
+import android.app.PendingIntent
+import android.content.Context
+import android.content.Intent
+import androidx.core.app.NotificationCompat
+import androidx.work.impl.utils.ForceStopRunnable.BroadcastReceiver
+import com.golden_minute.nota.R
+import dagger.hilt.android.AndroidEntryPoint
+import java.time.LocalDateTime
+import java.util.Calendar
+
+@AndroidEntryPoint
+@SuppressLint("RestrictedApi")
+class AlarmReceiver : BroadcastReceiver() {
+    companion object {
+        const val REMINDER_CHANNEL_ID = "reminder_id"
+    }
+
+
+    @SuppressLint("MissingPermission")
+    override fun onReceive(context: Context, intent: Intent?) {
+
+
+        val alarmManager = context.getSystemService(AlarmManager::class.java)
+
+        val taskTitle = intent?.getStringExtra("TASK_TITLE")
+            ?: ""
+        val taskDescription = intent?.getStringExtra("TASK_DESCRIPTION")
+            ?: ""
+        val taskID = intent?.getIntExtra("TASK_ID", -1)
+            ?: return
+        val taskRepeatTime = intent.getStringExtra("TASK_REPEAT_TIME")
+        val taskDueDate = intent.getStringExtra("TASK_DUE_DATE")
+
+        val localDateTime = LocalDateTime.parse(taskDueDate)
+
+        val calendar = Calendar.getInstance().apply {
+            set(
+                localDateTime.year,
+                localDateTime.monthValue - 1,
+                localDateTime.dayOfMonth,
+                localDateTime.hour,
+                localDateTime.minute,
+                0
+            )
+        }
+
+        val notificationManager =
+            context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
+        showNotification(
+            title = taskTitle,
+            description = taskDescription,
+            id = taskID,
+            context,
+            notificationManager
+        )
+
+        when (taskRepeatTime) {
+            context.getString(R.string.daily) -> {
+                calendar.timeInMillis =System.currentTimeMillis()
+                calendar.add(Calendar.DAY_OF_WEEK,1)
+                alarmManager.setExactAndAllowWhileIdle(
+                    AlarmManager.RTC_WAKEUP,
+                    calendar.timeInMillis,
+                    PendingIntent.getBroadcast(
+                        context,
+                        taskID,
+                        intent,
+                        PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
+                    )
+                )
+            }
+
+            context.getString(R.string.weekly) -> {
+                calendar.timeInMillis =System.currentTimeMillis()
+                calendar.add(Calendar.DAY_OF_MONTH,7)
+                alarmManager.setExactAndAllowWhileIdle(
+                    AlarmManager.RTC_WAKEUP,
+                    calendar.timeInMillis,
+                    PendingIntent.getBroadcast(
+                        context,
+                        taskID,
+                        intent,
+                        PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
+                    )
+                )
+            }
+
+            context.getString(R.string.monthly) -> {
+                calendar.timeInMillis =System.currentTimeMillis()
+                calendar.add(Calendar.MONTH,1)
+                alarmManager.setExactAndAllowWhileIdle(
+                    AlarmManager.RTC_WAKEUP,
+                    calendar.timeInMillis,
+                    PendingIntent.getBroadcast(
+                        context,
+                        taskID,
+                        intent,
+                        PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
+                    )
+                )
+            }
+
+            context.getString(R.string.yearly) -> {
+                calendar.timeInMillis =System.currentTimeMillis()
+                calendar.add(Calendar.YEAR,1)
+                alarmManager.setExactAndAllowWhileIdle(
+                    AlarmManager.RTC_WAKEUP,
+                    calendar.timeInMillis,
+                    PendingIntent.getBroadcast(
+                        context,
+                        taskID,
+                        intent,
+                        PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
+                    )
+                )
+            }
+        }
+
+
+    }
+
+    private fun showNotification(
+        title: String,
+        description: String,
+        id: Int,
+        context: Context,
+        notificationManager: NotificationManager
+    ) {
+        val notification = NotificationCompat.Builder(context, REMINDER_CHANNEL_ID)
+            .setContentTitle(title)
+            .setSmallIcon(R.drawable.light_bulb_com)
+            .setContentText(description)
+            .build()
+
+        notificationManager.notify(id, notification)
+
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/TimeChangeReceiver.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/TimeChangeReceiver.kt b/app/src/main/java/com/golden_minute/nota/TimeChangeReceiver.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/TimeChangeReceiver.kt	
@@ -0,0 +1,39 @@
+package com.golden_minute.nota
+
+import android.content.BroadcastReceiver
+import android.content.Context
+import android.content.Intent
+import com.golden_minute.nota.data.Alarm_manager.AlarmSchedulerImpl
+import com.golden_minute.nota.domain.repository.TaskRepository
+import dagger.hilt.android.AndroidEntryPoint
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import java.time.LocalDateTime
+import java.time.temporal.ChronoUnit
+import javax.inject.Inject
+
+private const val TAG = "TimeChangeReceiver"
+
+@AndroidEntryPoint
+class TimeChangeReceiver:BroadcastReceiver() {
+
+    @Inject
+    lateinit var taskRepository: TaskRepository
+
+    override fun onReceive(context: Context?, intent: Intent?) {
+        if (intent?.action == Intent.ACTION_TIME_CHANGED) {
+            val alarmReceiverImpl = AlarmSchedulerImpl(context!!)
+            val currentTime = LocalDateTime.now().truncatedTo(ChronoUnit.SECONDS)
+            CoroutineScope(Dispatchers.IO).launch {
+                taskRepository.getScheduledTasks().collect {
+                    it.forEach { task ->
+                        val taskTime = LocalDateTime.parse(task.dueDate)
+                        if(!taskTime.isBefore(currentTime))
+                        alarmReceiverImpl.schedule(task)
+                    }
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/notes/UpdateNote.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/UpdateNote.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/UpdateNote.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/UpdateNote.kt	
@@ -0,0 +1,10 @@
+package com.golden_minute.nota.domain.use_case.notes
+
+import com.golden_minute.nota.domain.model.Note
+import com.golden_minute.nota.domain.repository.NoteRepository
+
+class UpdateNote(private val noteRepository: NoteRepository) {
+    suspend operator fun invoke(note: Note){
+        noteRepository.updateNote(note)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/notes/GetNotes.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/GetNotes.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/GetNotes.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/notes/GetNotes.kt	
@@ -0,0 +1,27 @@
+package com.golden_minute.nota.domain.use_case.notes
+
+
+import com.golden_minute.nota.domain.model.Note
+import com.golden_minute.nota.domain.repository.NoteRepository
+import com.golden_minute.nota.domain.util.NoteOrderType
+import kotlinx.coroutines.flow.Flow
+import kotlinx.coroutines.flow.map
+
+class GetNotes(private val noteRepository: NoteRepository) {
+
+    operator fun invoke(
+        noteOrderType: NoteOrderType,
+    ): Flow<List<Note>> {
+        return noteRepository.getAllNotes()
+                .map { notes ->
+                    when (noteOrderType) {
+                        is NoteOrderType.Descending -> notes.sortedByDescending { it.title }
+                        is NoteOrderType.Ascending -> notes.sortedBy { it.title }
+                        NoteOrderType.CreationDate -> notes.sortedByDescending { it.creationDate }
+                        NoteOrderType.Default -> notes
+                    }
+                }
+
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/repository/NoteRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/repository/NoteRepository.kt b/app/src/main/java/com/golden_minute/nota/domain/repository/NoteRepository.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/repository/NoteRepository.kt	
@@ -0,0 +1,24 @@
+package com.golden_minute.nota.domain.repository
+
+import com.golden_minute.nota.domain.model.Note
+import kotlinx.coroutines.flow.Flow
+
+interface NoteRepository {
+    fun getAllNotes(): Flow<List<Note>>
+
+    fun searchNote(input: String): Flow<List<Note>>
+
+    suspend fun addNote(note: Note):Long
+
+    suspend fun deleteSelectedNotes(notes: List<Note>)
+
+    suspend fun updateSelectedNotes(notes: List<Note>)
+
+    suspend fun updateNote(note: Note)
+
+    suspend fun updateNotes(notes: List<Note>)
+
+    suspend fun deleteNote(note: Note)
+
+    suspend fun getNoteByTitle(id: Int): Note?
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/util/HomeScreenTasksEvent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/util/HomeScreenTasksEvent.kt b/app/src/main/java/com/golden_minute/nota/domain/util/HomeScreenTasksEvent.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/util/HomeScreenTasksEvent.kt	
@@ -0,0 +1,34 @@
+package com.golden_minute.nota.domain.util
+
+import com.golden_minute.nota.domain.model.Tag
+import com.golden_minute.nota.domain.model.Task
+import com.golden_minute.nota.presentation.SelectModeEvents
+
+sealed class HomeScreenTasksEvent {
+
+    data class HomeScreenTasksOrder(val taskOrderType: TaskOrderType) : HomeScreenTasksEvent()
+
+    data class DeleteTask(val task: Task) : HomeScreenTasksEvent()
+
+    data class OnCheckChange(val checkedTask: Task) : HomeScreenTasksEvent()
+
+    data class ToolbarActionClicked(val action: SelectModeEvents) : HomeScreenTasksEvent()
+
+    data class OnSelectionTaskClick(val task: Task, val isSelected: Boolean) :
+        HomeScreenTasksEvent()
+
+    data object ToggleToolbarActions : HomeScreenTasksEvent()
+
+    data class OnTasksFilteredByTags(val selectedTags: List<Tag>) : HomeScreenTasksEvent()
+
+    data object ToggleSearchbarVisibility : HomeScreenTasksEvent()
+
+    data object OnTagDialogClick : HomeScreenTasksEvent()
+
+    data class SearchValueChanged(val input: String) : HomeScreenTasksEvent()
+
+    data class OnDeleteTagsInDialog(val selectedTags: List<Tag>) : HomeScreenTasksEvent()
+
+    data object TaskScreenLoaded : HomeScreenTasksEvent()
+
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/util/HomeScreenNotesEvent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/util/HomeScreenNotesEvent.kt b/app/src/main/java/com/golden_minute/nota/domain/util/HomeScreenNotesEvent.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/util/HomeScreenNotesEvent.kt	
@@ -0,0 +1,34 @@
+package com.golden_minute.nota.domain.util
+
+import com.golden_minute.nota.domain.model.Note
+import com.golden_minute.nota.domain.model.Tag
+import com.golden_minute.nota.presentation.SelectModeEvents
+
+sealed class HomeScreenNotesEvent {
+
+    data class OrderNote(val noteOrder: NoteOrderType, val tagOrderIsActive: Boolean = false) :
+        HomeScreenNotesEvent()
+
+    data class DeleteNote(val note: Note) : HomeScreenNotesEvent()
+
+    data object ToggleToolbarActionsVisibility : HomeScreenNotesEvent()
+
+    data class OnSelectionNoteClick(val note: Note, val isSelected: Boolean) :
+        HomeScreenNotesEvent()
+
+    data object ToggleSearchbarVisibility : HomeScreenNotesEvent()
+
+    data class OnNotesFilteredByTags(val selectedTags: List<Tag>) : HomeScreenNotesEvent()
+
+    data class ToolbarActionClicked(val action: SelectModeEvents) : HomeScreenNotesEvent()
+
+    data class SearchValueChanged(val input: String) : HomeScreenNotesEvent()
+
+    data object OnTagDialogClick : HomeScreenNotesEvent()
+
+    data object NoteScreenLoaded : HomeScreenNotesEvent()
+
+    data class OnDeleteTagsInDialog(val selectedTags: List<Tag>) : HomeScreenNotesEvent()
+
+
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/GetTasks.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/GetTasks.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/GetTasks.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/GetTasks.kt	
@@ -0,0 +1,29 @@
+package com.golden_minute.nota.domain.use_case.tasks
+
+import com.golden_minute.nota.domain.model.Task
+import com.golden_minute.nota.domain.repository.TaskRepository
+import com.golden_minute.nota.domain.util.TaskOrderType
+import kotlinx.coroutines.flow.Flow
+import kotlinx.coroutines.flow.map
+
+class GetTasks(private val taskRepository: TaskRepository) {
+    operator fun invoke(
+        taskOrderType: TaskOrderType = TaskOrderType.Descending,
+    ): Flow<List<Task>> {
+        return taskRepository.getAllTasks().map { tasks ->
+                when (taskOrderType) {
+                    is TaskOrderType.Ascending -> tasks.sortedBy { it.title }
+                    is TaskOrderType.Descending -> tasks.sortedByDescending { it.title }
+                    is TaskOrderType.DueDate -> tasks.sortedBy { it.dueDate }
+                    is TaskOrderType.Priority -> tasks.sortedByDescending { it.priority }
+                    is TaskOrderType.Completed -> tasks.sortedBy { it.isChecked?.not() }
+                    is TaskOrderType.Undone -> tasks.sortedBy { it.isChecked ?: false }
+                    is TaskOrderType.Default -> tasks
+
+                }
+
+            }
+    }
+
+
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/UpdateTasks.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/UpdateTasks.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/UpdateTasks.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/UpdateTasks.kt	
@@ -0,0 +1,8 @@
+package com.golden_minute.nota.domain.use_case.tasks
+
+import com.golden_minute.nota.domain.model.Task
+import com.golden_minute.nota.domain.repository.TaskRepository
+
+class UpdateTasks(private val repository: TaskRepository) {
+    suspend operator fun invoke(tasks:List<Task>) = repository.updateSelectedTasks(tasks)
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/DI/AppModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/DI/AppModule.kt b/app/src/main/java/com/golden_minute/nota/DI/AppModule.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/DI/AppModule.kt	
@@ -0,0 +1,121 @@
+package com.golden_minute.nota.DI
+
+import android.app.Application
+import androidx.room.Room
+import com.golden_minute.nota.data.data_source.NotaDatabase
+import com.golden_minute.nota.data.data_source.SettingsDataStore
+import com.golden_minute.nota.data.data_source.TagDao
+import com.golden_minute.nota.data.repository.NoteRepositoryImpl
+import com.golden_minute.nota.data.repository.TaskRepositoryImpl
+import com.golden_minute.nota.domain.repository.NoteRepository
+import com.golden_minute.nota.domain.repository.TaskRepository
+import com.golden_minute.nota.domain.use_case.notes.AddNote
+import com.golden_minute.nota.domain.use_case.notes.DeleteNote
+import com.golden_minute.nota.domain.use_case.notes.DeleteNotes
+import com.golden_minute.nota.domain.use_case.notes.GetNote
+import com.golden_minute.nota.domain.use_case.notes.GetNotes
+import com.golden_minute.nota.domain.use_case.notes.NoteUseCases
+import com.golden_minute.nota.domain.use_case.notes.SearchNote
+import com.golden_minute.nota.domain.use_case.notes.UpdateNote
+import com.golden_minute.nota.domain.use_case.tags.AddTag
+import com.golden_minute.nota.domain.use_case.tags.AddTags
+import com.golden_minute.nota.domain.use_case.tags.DeleteTag
+import com.golden_minute.nota.domain.use_case.tags.DeleteTags
+import com.golden_minute.nota.domain.use_case.tags.GetTags
+import com.golden_minute.nota.domain.use_case.tags.TagsUseCases
+import com.golden_minute.nota.domain.use_case.tags.UpdateTags
+import com.golden_minute.nota.domain.use_case.tasks.AddTask
+import com.golden_minute.nota.domain.use_case.tasks.CheckSelectedTasks
+import com.golden_minute.nota.domain.use_case.tasks.DeleteTask
+import com.golden_minute.nota.domain.use_case.tasks.DeleteTasks
+import com.golden_minute.nota.domain.use_case.tasks.GetTask
+import com.golden_minute.nota.domain.use_case.tasks.GetTasks
+import com.golden_minute.nota.domain.use_case.tasks.SearchTask
+import com.golden_minute.nota.domain.use_case.tasks.TaskUseCases
+import com.golden_minute.nota.domain.use_case.tasks.UpdateTask
+import com.golden_minute.nota.domain.use_case.tasks.UpdateTasks
+import dagger.Module
+import dagger.Provides
+import dagger.hilt.InstallIn
+import dagger.hilt.components.SingletonComponent
+import javax.inject.Singleton
+
+@Module
+@InstallIn(SingletonComponent::class)
+object AppModule {
+    @Provides
+    @Singleton
+    fun provideNotaDatabase(app: Application): NotaDatabase {
+        return Room.databaseBuilder(app, NotaDatabase::class.java, NotaDatabase.DATABASE_NAME)
+            .build()
+    }
+
+    @Provides
+    @Singleton
+    fun provideNoteRepository(db: NotaDatabase): NoteRepository {
+        return NoteRepositoryImpl(db.noteDao)
+    }
+
+    @Provides
+    @Singleton
+    fun provideTaskRepository(db: NotaDatabase): TaskRepository {
+        return TaskRepositoryImpl(db.taskDao)
+    }
+
+    @Provides
+    @Singleton
+    fun provideTagDao(db: NotaDatabase): TagDao {
+        return db.tagDao
+    }
+
+    @Provides
+    @Singleton
+    fun provideNoteUseCases(noteRepository: NoteRepository,tagDao: TagDao,app: Application): NoteUseCases {
+        return NoteUseCases(
+            GetNotes(noteRepository),
+            DeleteNote(noteRepository),
+            DeleteNotes(noteRepository),
+            AddNote(noteRepository,app.applicationContext),
+            GetNote(noteRepository),
+            UpdateNote(noteRepository),
+            SearchNote(noteRepository)
+        )
+    }
+
+    @Provides
+    @Singleton
+    fun provideTaskUseCases(taskRepository: TaskRepository,tagDao: TagDao,app: Application): TaskUseCases {
+        return TaskUseCases(
+            GetTasks(taskRepository),
+            DeleteTask(taskRepository),
+            DeleteTasks(taskRepository),
+            UpdateTasks(taskRepository),
+            UpdateTask(taskRepository),
+            CheckSelectedTasks(taskRepository),
+            AddTask(taskRepository,app.applicationContext),
+            GetTask(taskRepository),
+            SearchTask(taskRepository)
+        )
+    }
+
+    @Provides
+    @Singleton
+    fun provideTagUseCases(tagDao: TagDao): TagsUseCases {
+        return TagsUseCases(
+            AddTag(tagDao),
+            AddTags(tagDao),
+            DeleteTag(tagDao),
+            DeleteTags(tagDao),
+            UpdateTags(tagDao),
+            GetTags(tagDao)
+        )
+    }
+
+
+    @Provides
+    @Singleton
+    fun provideSettingsDataStore(app: Application):SettingsDataStore{
+        return SettingsDataStore(app.applicationContext)
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/TaskUseCases.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/TaskUseCases.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/TaskUseCases.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/TaskUseCases.kt	
@@ -0,0 +1,16 @@
+package com.golden_minute.nota.domain.use_case.tasks
+
+/**
+ * this class is for wrap use cases into one class for cleaner access when get called in viewModel parameter
+ */
+data class TaskUseCases(
+    val getTasks: GetTasks,
+    val deleteTask: DeleteTask,
+    val deleteTasks: DeleteTasks,
+    val updateTasks: UpdateTasks,
+    val updateTask: UpdateTask,
+    val checkSelectedTasks: CheckSelectedTasks,
+    val addTask: AddTask,
+    val getTask: GetTask,
+    val searchTask: SearchTask
+)
Index: app/src/main/java/com/golden_minute/nota/presentation/TagsDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/presentation/TagsDialog.kt b/app/src/main/java/com/golden_minute/nota/presentation/TagsDialog.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/presentation/TagsDialog.kt	
@@ -0,0 +1,357 @@
+package com.golden_minute.nota.presentation
+
+import androidx.compose.foundation.BorderStroke
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.lazy.LazyColumn
+import androidx.compose.foundation.lazy.items
+import androidx.compose.foundation.lazy.rememberLazyListState
+import androidx.compose.foundation.shape.RoundedCornerShape
+import androidx.compose.material.Button
+import androidx.compose.material.ButtonDefaults
+import androidx.compose.material.Card
+import androidx.compose.material.Divider
+import androidx.compose.material.MaterialTheme
+import androidx.compose.material.OutlinedButton
+import androidx.compose.material.Text
+import androidx.compose.material3.Checkbox
+import androidx.compose.material3.CheckboxDefaults
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateListOf
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.rememberCoroutineScope
+import androidx.compose.runtime.saveable.rememberSaveable
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.res.stringResource
+import androidx.compose.ui.text.style.TextAlign
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.window.Dialog
+import com.golden_minute.nota.R
+import com.golden_minute.nota.domain.model.Tag
+import com.golden_minute.nota.domain.util.HomeScreenNotesEvent
+import com.golden_minute.nota.domain.util.HomeScreenTasksEvent
+import com.golden_minute.nota.ui.theme.deleteWarning
+import kotlinx.coroutines.launch
+
+
+var showTagsDialog by mutableStateOf(false)
+
+
+@Composable
+fun TagsSelectionDialog(viewModel: HomeScreenViewModel) {
+
+    val coroutineScope = rememberCoroutineScope()
+
+    val selectedTags =
+        remember {
+            mutableStateListOf<Tag>()
+        }
+
+
+    var enableApplyButton by rememberSaveable { mutableStateOf(false) }
+
+
+
+    Dialog(onDismissRequest = { showTagsDialog = false }) {
+        Card(shape = RoundedCornerShape(15.dp), modifier = Modifier.padding(horizontal = 24.dp)) {
+            if (viewModel.tagsList.any { it.taskID != null }&& currentPage == 0)
+                Column {
+                    LazyColumn(
+                        modifier = Modifier
+                            .fillMaxWidth()
+                            .height(300.dp)
+                            .padding(bottom = 16.dp), state = rememberLazyListState()
+                    ) {
+
+                        items(if (currentPage == 0)
+                            viewModel.tagsList.filter { it.taskID != null }
+                                .distinctBy { it.tagName }
+                        else viewModel.tagsList.filter { it.noteID != null }
+                            .distinctBy { it.tagName },
+                            key = { it.tagName }) { tag ->
+
+
+                            var currentTagIsChecked by rememberSaveable { mutableStateOf(false) }
+                            enableApplyButton = selectedTags.isNotEmpty()
+
+
+                            Column(Modifier.fillMaxSize()) {
+                                Row(
+                                    Modifier
+                                        .fillMaxWidth()
+                                        .clickable {
+                                            currentTagIsChecked = !currentTagIsChecked
+
+                                            if (currentTagIsChecked && selectedTags.none { it.tagName == tag.tagName })
+                                                selectedTags.add(tag)
+                                            else
+                                                selectedTags.remove(tag)
+
+
+//                                        tag.isChecked = currentTagIsChecked
+                                        }, verticalAlignment = Alignment.CenterVertically
+                                ) {
+                                    Checkbox(modifier = Modifier.padding(start = 8.dp),
+                                        colors = CheckboxDefaults.colors(
+                                            MaterialTheme.colors.primary,
+                                            checkmarkColor = Color.White
+                                        ),
+                                        checked = currentTagIsChecked,
+                                        onCheckedChange = {
+                                            currentTagIsChecked = !currentTagIsChecked
+                                            tag.isChecked = currentTagIsChecked
+                                            if (currentTagIsChecked)
+                                                selectedTags.add(tag)
+                                            else
+                                                selectedTags.remove(tag)
+                                        })
+                                    Text(
+                                        text = tag.tagName,
+                                        textAlign = TextAlign.Start,
+                                        modifier = Modifier.padding(
+                                            horizontal = 12.dp,
+                                            vertical = 14.dp
+                                        )
+                                    )
+                                }
+                                Divider(color = MaterialTheme.colors.onSurface.copy(0.3f))
+
+
+                            }
+
+                        }
+
+
+                    }
+                    if (viewModel.tagsList.isNotEmpty()) {
+
+                        Button(
+                            onClick = {
+                                if (currentPage == 1)
+                                    viewModel.onEvent(
+                                        HomeScreenNotesEvent.OnNotesFilteredByTags(
+                                            selectedTags
+                                        )
+                                    )
+                                else
+                                    viewModel.onEvent(
+                                        HomeScreenTasksEvent.OnTasksFilteredByTags(
+                                            selectedTags
+                                        )
+                                    )
+                                showTagsDialog = false
+                            },
+                            enabled = enableApplyButton,
+                            modifier = Modifier
+                                .fillMaxWidth()
+                                .padding(start = 16.dp, end = 16.dp, bottom = 6.dp)
+                        ) {
+                            Text(
+                                text = stringResource(R.string.filter_tags),
+                                color = Color.White
+                            )
+                        }
+                        OutlinedButton(enabled = enableApplyButton,
+                            border = BorderStroke(
+                                ButtonDefaults.OutlinedBorderSize,
+                                color = if (enableApplyButton) deleteWarning else MaterialTheme.colors.onSurface.copy(
+                                    0.2f
+                                )
+                            ),
+                            colors = ButtonDefaults.outlinedButtonColors(contentColor = deleteWarning),
+                            modifier = Modifier
+                                .fillMaxWidth()
+                                .padding(start = 16.dp, end = 16.dp, bottom = 6.dp),
+                            onClick = {
+                                coroutineScope.launch {
+
+
+                                    if (currentPage == 1)
+                                        viewModel.onEvent(
+                                            HomeScreenNotesEvent.OnDeleteTagsInDialog(
+                                                selectedTags
+                                            )
+                                        )
+                                    else
+                                        viewModel.onEvent(
+                                            HomeScreenTasksEvent.OnDeleteTagsInDialog(
+                                                selectedTags
+                                            )
+                                        )
+//                                    viewModel.tagsUseCases.deleteTags(selectedTags)
+
+//                                    viewModel.getTags()
+                                    showTagsDialog = false
+                                }
+                            }) {
+                            Text(text = stringResource(R.string.delete_tags))
+                        }
+
+
+                    }
+
+                }
+            else if (viewModel.tagsList.any { it.noteID != null } && currentPage == 1)
+                Column {
+                    LazyColumn(
+                        modifier = Modifier
+                            .fillMaxWidth()
+                            .height(300.dp)
+                            .padding(bottom = 16.dp), state = rememberLazyListState()
+                    ) {
+
+                        items(if (currentPage == 0)
+                            viewModel.tagsList.filter { it.taskID != null }
+                                .distinctBy { it.tagName }
+                        else viewModel.tagsList.filter { it.noteID != null }
+                            .distinctBy { it.tagName },
+                            key = { it.tagName }) { tag ->
+
+
+                            var currentTagIsChecked by rememberSaveable { mutableStateOf(false) }
+                            enableApplyButton = selectedTags.isNotEmpty()
+
+
+                            Column(Modifier.fillMaxSize()) {
+                                Row(
+                                    Modifier
+                                        .fillMaxWidth()
+                                        .clickable {
+                                            currentTagIsChecked = !currentTagIsChecked
+
+                                            if (currentTagIsChecked && selectedTags.none { it.tagName == tag.tagName })
+                                                selectedTags.add(tag)
+                                            else
+                                                selectedTags.remove(tag)
+
+
+//                                        tag.isChecked = currentTagIsChecked
+                                        }, verticalAlignment = Alignment.CenterVertically
+                                ) {
+                                    Checkbox(modifier = Modifier.padding(start = 8.dp),
+                                        colors = CheckboxDefaults.colors(
+                                            MaterialTheme.colors.primary,
+                                            checkmarkColor = Color.White
+                                        ),
+                                        checked = currentTagIsChecked,
+                                        onCheckedChange = {
+                                            currentTagIsChecked = !currentTagIsChecked
+                                            tag.isChecked = currentTagIsChecked
+                                            if (currentTagIsChecked)
+                                                selectedTags.add(tag)
+                                            else
+                                                selectedTags.remove(tag)
+                                        })
+                                    Text(
+                                        text = tag.tagName,
+                                        textAlign = TextAlign.Start,
+                                        modifier = Modifier.padding(
+                                            horizontal = 12.dp,
+                                            vertical = 14.dp
+                                        )
+                                    )
+                                }
+                                Divider(color = MaterialTheme.colors.onSurface.copy(0.3f))
+
+
+                            }
+
+                        }
+
+
+                    }
+                    if (viewModel.tagsList.isNotEmpty()) {
+
+                        Button(
+                            onClick = {
+                                if (currentPage == 1)
+                                    viewModel.onEvent(
+                                        HomeScreenNotesEvent.OnNotesFilteredByTags(
+                                            selectedTags
+                                        )
+                                    )
+                                else
+                                    viewModel.onEvent(
+                                        HomeScreenTasksEvent.OnTasksFilteredByTags(
+                                            selectedTags
+                                        )
+                                    )
+                                showTagsDialog = false
+                            },
+                            enabled = enableApplyButton,
+                            modifier = Modifier
+                                .fillMaxWidth()
+                                .padding(start = 16.dp, end = 16.dp, bottom = 6.dp)
+                        ) {
+                            Text(
+                                text = stringResource(R.string.filter_tags),
+                                color = Color.White
+                            )
+                        }
+                        OutlinedButton(enabled = enableApplyButton,
+                            border = BorderStroke(
+                                ButtonDefaults.OutlinedBorderSize,
+                                color = if (enableApplyButton) deleteWarning else MaterialTheme.colors.onSurface.copy(
+                                    0.2f
+                                )
+                            ),
+                            colors = ButtonDefaults.outlinedButtonColors(contentColor = deleteWarning),
+                            modifier = Modifier
+                                .fillMaxWidth()
+                                .padding(start = 16.dp, end = 16.dp, bottom = 6.dp),
+                            onClick = {
+                                coroutineScope.launch {
+
+
+                                    if (currentPage == 1)
+                                        viewModel.onEvent(
+                                            HomeScreenNotesEvent.OnDeleteTagsInDialog(
+                                                selectedTags
+                                            )
+                                        )
+                                    else
+                                        viewModel.onEvent(
+                                            HomeScreenTasksEvent.OnDeleteTagsInDialog(
+                                                selectedTags
+                                            )
+                                        )
+//                                    viewModel.tagsUseCases.deleteTags(selectedTags)
+
+//                                    viewModel.getTags()
+                                    showTagsDialog = false
+                                }
+                            }) {
+                            Text(text = stringResource(R.string.delete_tags))
+                        }
+
+
+                    }
+
+                }
+            else
+                Box(Modifier.height(300.dp), contentAlignment = Alignment.Center) {
+                    Text(
+                        text = stringResource(R.string.tag_s_list_is_empty),
+                        style = MaterialTheme.typography.h6,
+                        textAlign = TextAlign.Center,
+                        modifier = Modifier
+                            .fillMaxWidth()
+                            .align(Alignment.Center)
+                    )
+                }
+        }
+    }
+
+}
+
Index: app/src/main/java/com/golden_minute/nota/domain/repository/TaskRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/repository/TaskRepository.kt b/app/src/main/java/com/golden_minute/nota/domain/repository/TaskRepository.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/repository/TaskRepository.kt	
@@ -0,0 +1,40 @@
+package com.golden_minute.nota.domain.repository
+
+
+import com.golden_minute.nota.domain.model.Priority
+import com.golden_minute.nota.domain.model.Task
+import kotlinx.coroutines.flow.Flow
+
+interface TaskRepository {
+
+    fun getAllTasks(): Flow<List<Task>>
+
+    fun searchTask(input: String): Flow<List<Task>>
+
+    fun getScheduledTasks(): Flow<List<Task>>
+
+    suspend fun addTask(task: Task): Long
+
+    suspend fun checkSelectedTasks(selectedTasks: List<Int>)
+
+    suspend fun deleteSelectedTasks(tasks: List<Task>)
+
+    suspend fun updateTask(id: Int?,
+                           title: String,
+                           description: String,
+                           priority: Priority,
+                           tagNumber1: String?,
+                           tagNumber2: String?,
+                           tagNumber3: String?,
+                           dueDate: String?,
+                           repeatTime: String?, isChecked: Boolean?,
+                           hasReminder: Boolean)
+
+    suspend fun updateSelectedTasks(tasks: List<Task>)
+
+
+    suspend fun deleteTask(task: Task)
+
+
+    suspend fun getTaskByTitle(id: Int): Task?
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/data/data_source/TaskDao.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/data/data_source/TaskDao.kt b/app/src/main/java/com/golden_minute/nota/data/data_source/TaskDao.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/data/data_source/TaskDao.kt	
@@ -0,0 +1,55 @@
+package com.golden_minute.nota.data.data_source
+
+import androidx.room.Dao
+import androidx.room.Delete
+import androidx.room.Insert
+import androidx.room.OnConflictStrategy
+import androidx.room.Query
+import androidx.room.Update
+import com.golden_minute.nota.domain.model.Priority
+import com.golden_minute.nota.domain.model.Task
+import kotlinx.coroutines.flow.Flow
+@Dao
+interface TaskDao {
+    @Query("SELECT * FROM tbl_task")
+    fun getAllTasks (): Flow<List<Task>>
+
+    @Query("SELECT * FROM TBL_TASK WHERE title || description LIKE '%' || :input || '%' ")
+    fun searchTask(input:String):Flow<List<Task>>
+
+    @Query("SELECT * FROM TBL_TASK WHERE LENGTH(dueDate) > 0 & hasReminder ")
+    fun getScheduledTasks():Flow<List<Task>>
+
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+   suspend fun addTask(task: Task):Long
+
+   @Query("UPDATE TBL_TASK SET isChecked = 1 WHERE id IN (:selectedTasksIds)")
+   suspend fun checkSelectedTasks(selectedTasksIds:List<Int>)
+
+    @Delete
+    suspend fun deleteAllTasks(tasks:List<Task>)
+
+    @Update
+    suspend fun updateTasks(tasks:List<Task>)
+
+    @Query("UPDATE tbl_task SET title = :title, description = :description, " +
+            "priority = :priority, dueDate = :dueDate, repeatTime = :repeatTime, " +
+            "isChecked = :isChecked, hasReminder = :hasReminder " +
+            "WHERE id = :id"
+    )
+    suspend fun updateTask(
+        id: Int?,
+        title: String,
+        description: String,
+        priority: Priority,
+        dueDate: String?,
+        repeatTime: String?, isChecked: Boolean?,
+        hasReminder: Boolean
+    )
+
+    @Delete
+    suspend fun deleteTask(task: Task)
+
+    @Query("SELECT * FROM TBL_TASK WHERE id = :id")
+   suspend fun getTaskById(id:Int):Task?
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/data/repository/TaskRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/data/repository/TaskRepositoryImpl.kt b/app/src/main/java/com/golden_minute/nota/data/repository/TaskRepositoryImpl.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/data/repository/TaskRepositoryImpl.kt	
@@ -0,0 +1,71 @@
+package com.golden_minute.nota.data.repository
+
+import com.golden_minute.nota.data.data_source.TaskDao
+import com.golden_minute.nota.domain.model.Priority
+import com.golden_minute.nota.domain.model.Task
+import com.golden_minute.nota.domain.repository.TaskRepository
+import kotlinx.coroutines.flow.Flow
+
+class TaskRepositoryImpl(private val taskDao: TaskDao) : TaskRepository {
+    override fun getAllTasks(): Flow<List<Task>> {
+        return taskDao.getAllTasks()
+    }
+
+
+    override fun searchTask(input: String): Flow<List<Task>> {
+        return taskDao.searchTask(input)
+    }
+
+    override fun getScheduledTasks(): Flow<List<Task>> {
+        return taskDao.getScheduledTasks()
+    }
+
+    override suspend fun addTask(task: Task): Long {
+        return taskDao.addTask(task)
+    }
+
+    override suspend fun checkSelectedTasks(selectedTasks: List<Int>) {
+        return taskDao.checkSelectedTasks(selectedTasks)
+    }
+
+    override suspend fun deleteSelectedTasks(tasks: List<Task>) {
+        return taskDao.deleteAllTasks(tasks)
+    }
+
+    override suspend fun updateTask(
+        id: Int?,
+        title: String,
+        description: String,
+        priority: Priority,
+        tagNumber1: String?,
+        tagNumber2: String?,
+        tagNumber3: String?,
+        dueDate: String?,
+        repeatTime: String?, isChecked: Boolean?,
+        hasReminder: Boolean
+    ) {
+        return taskDao.updateTask(
+            id,
+            title,
+            description,
+            priority,
+            dueDate,
+            repeatTime,
+            isChecked,
+            hasReminder
+        )
+    }
+
+
+    override suspend fun updateSelectedTasks(tasks: List<Task>) {
+        return taskDao.updateTasks(tasks)
+    }
+
+    override suspend fun deleteTask(task: Task) {
+        return taskDao.deleteTask(task)
+    }
+
+    override suspend fun getTaskByTitle(id: Int): Task? {
+        return taskDao.getTaskById(id)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/UpdateTask.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/UpdateTask.kt b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/UpdateTask.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/domain/use_case/tasks/UpdateTask.kt	
@@ -0,0 +1,19 @@
+package com.golden_minute.nota.domain.use_case.tasks
+
+import com.golden_minute.nota.domain.model.Priority
+import com.golden_minute.nota.domain.repository.TaskRepository
+
+class UpdateTask(private val repository: TaskRepository) {
+    suspend operator fun invoke(id: Int?,
+                                title: String,
+                                description: String,
+                                priority: Priority,
+                                tagNumber1: String?,
+                                tagNumber2: String?,
+                                tagNumber3: String?,
+                                dueDate: String?,
+                                repeatTime: String?, isChecked: Boolean?,
+                                hasReminder: Boolean) {
+           return repository.updateTask(id, title, description, priority, tagNumber1, tagNumber2, tagNumber3, dueDate, repeatTime, isChecked, hasReminder)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/presentation/AddItemScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/presentation/AddItemScreen.kt b/app/src/main/java/com/golden_minute/nota/presentation/AddItemScreen.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/presentation/AddItemScreen.kt	
@@ -0,0 +1,1170 @@
+package com.golden_minute.nota.presentation
+
+
+//noinspection UsingMaterialAndMaterial3Libraries
+//noinspection UsingMaterialAndMaterial3Libraries
+//noinspection UsingMaterialAndMaterial3Libraries
+//noinspection UsingMaterialAndMaterial3Libraries
+//noinspection UsingMaterialAndMaterial3Libraries
+//noinspection UsingMaterialAndMaterial3Libraries
+//noinspection UsingMaterialAndMaterial3Libraries
+//noinspection UsingMaterialAndMaterial3Libraries
+import android.annotation.SuppressLint
+import androidx.compose.animation.AnimatedContent
+import androidx.compose.animation.AnimatedVisibility
+import androidx.compose.animation.animateColorAsState
+import androidx.compose.animation.core.animateDpAsState
+import androidx.compose.animation.core.animateFloatAsState
+import androidx.compose.animation.fadeOut
+import androidx.compose.foundation.background
+import androidx.compose.foundation.border
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.interaction.MutableInteractionSource
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.size
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.foundation.shape.RoundedCornerShape
+import androidx.compose.foundation.text.KeyboardOptions
+import androidx.compose.foundation.verticalScroll
+import androidx.compose.material.Button
+import androidx.compose.material.Icon
+import androidx.compose.material.IconButton
+import androidx.compose.material.MaterialTheme
+import androidx.compose.material.OutlinedTextField
+import androidx.compose.material.Scaffold
+import androidx.compose.material.Text
+import androidx.compose.material.TextFieldDefaults
+import androidx.compose.material.TopAppBar
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.automirrored.filled.ArrowBack
+import androidx.compose.material.icons.rounded.Add
+import androidx.compose.material.rememberScaffoldState
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.rememberCoroutineScope
+import androidx.compose.runtime.saveable.rememberSaveable
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.AbsoluteAlignment
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.clip
+import androidx.compose.ui.draw.shadow
+import androidx.compose.ui.focus.onFocusEvent
+import androidx.compose.ui.graphics.Brush
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.res.painterResource
+import androidx.compose.ui.res.stringResource
+import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.text.input.ImeAction
+import androidx.compose.ui.text.style.TextAlign
+import androidx.compose.ui.unit.dp
+import androidx.constraintlayout.compose.ConstraintLayout
+import androidx.constraintlayout.compose.Dimension
+import androidx.hilt.navigation.compose.hiltViewModel
+import androidx.navigation.NavController
+import com.golden_minute.nota.R
+import com.golden_minute.nota.domain.model.Priority
+import com.golden_minute.nota.domain.util.Add_Edit_Events
+import com.golden_minute.nota.domain.util.ChooseDateTimeDialogEvents
+import com.golden_minute.nota.domain.util.leadingZero
+import com.golden_minute.nota.ui.theme.Gold200
+import com.golden_minute.nota.ui.theme.darkerBlue
+import com.golden_minute.nota.ui.theme.darkerRed
+import com.golden_minute.nota.ui.theme.darkerYellow
+import com.golden_minute.nota.ui.theme.elevatedSurface
+import com.golden_minute.nota.ui.theme.iranYekan
+import com.golden_minute.nota.ui.theme.iranYekanFarsiNamerals
+import com.golden_minute.nota.ui.theme.lighterBlue
+import com.golden_minute.nota.ui.theme.lighterRed
+import com.golden_minute.nota.ui.theme.lighterYellow
+import kotlinx.coroutines.delay
+import kotlinx.coroutines.flow.collectLatest
+import kotlinx.coroutines.launch
+import java.time.LocalDateTime
+import java.time.format.DateTimeFormatter
+
+
+var title by mutableStateOf("")
+var description by mutableStateOf("")
+
+
+@SuppressLint("SuspiciousIndentation", "UnusedMaterialScaffoldPaddingParameter")
+@Composable
+fun Add_Edit_Item(
+    navController: NavController,
+    currentPage: Int,
+    addEditViewmodel: Add_EditScreenViewModel = hiltViewModel(),
+    mainActivityViewModel: MainActivityViewModel,
+
+    ) {
+
+
+    val scrollState = rememberScrollState()
+
+    var txtShowDateAndTime by rememberSaveable {
+        mutableStateOf(addEditViewmodel.state.value.dueDate)
+    }
+
+    val coroutineScope = rememberCoroutineScope()
+
+    val snackBarHostState = rememberScaffoldState()
+
+    LaunchedEffect(key1 = true) {
+        addEditViewmodel.eventFlow.collectLatest { event ->
+            when (event) {
+                is Add_EditScreenViewModel.UiEvent.Save -> {
+                    navController.popBackStack()
+                }
+
+                is Add_EditScreenViewModel.UiEvent.ShowSnackBar -> {
+                    snackBarHostState.snackbarHostState.showSnackbar(event.snackBarTitle)
+                }
+            }
+        }
+    }
+
+    val context = LocalContext.current
+
+
+    val confirmButtonText =
+        if (addEditViewmodel.currentId == null) {
+            if (currentPage == 0) stringResource(id = R.string.add_to_the_tasks) else stringResource(
+                id = R.string.add_to_the_notes
+            )
+        } else {
+            if (currentPage == 0) stringResource(id = R.string.edit_the_task) else stringResource(id = R.string.edit_the_note)
+        }
+
+    val topAppBarText =
+        if (addEditViewmodel.currentId == null) {
+            if (currentPage == 0) stringResource(R.string.adding_task) else stringResource(R.string.adding_note)
+        } else {
+            if (currentPage == 0) stringResource(id = R.string.edit_the_task) else stringResource(id = R.string.edit_the_note)
+        }
+
+
+    Scaffold(scaffoldState = snackBarHostState, topBar = {
+        TopAppBar(title = {
+            Text(
+                text = topAppBarText,
+                style = MaterialTheme.typography.h6, fontWeight = FontWeight.Bold,
+                color = MaterialTheme.colors.primaryVariant
+            )
+        }, backgroundColor = MaterialTheme.colors.surface, elevation = 0.dp, navigationIcon = {
+            IconButton(onClick = { navController.popBackStack() }) {
+                Icon(
+                    imageVector = Icons.AutoMirrored.Filled.ArrowBack,
+                    tint = MaterialTheme.colors.primaryVariant,
+                    contentDescription = "back"
+                )
+            }
+        })
+    }) {
+        ConstraintLayout(
+            Modifier
+                .fillMaxSize()
+                .background(MaterialTheme.colors.surface)
+                .verticalScroll(scrollState)
+        )
+        {
+            val (titlePosition, priorityPosition, lowerColumnPosition, descriptionPosition, priorityTextPosition) = createRefs()
+
+
+
+            if (addEditViewmodel.dialogState.value.showDateAndTimeDialog)
+                ChooseDateTimeDialog(mainActivityViewModel, addEditViewmodel)
+
+            if (addEditViewmodel.showRepeatDialog)
+                RepeatTaskDialog()
+
+
+
+            OutlinedTextField(
+                isError = addEditViewmodel.titleError,
+                value = addEditViewmodel.state.value.title,
+                colors = TextFieldDefaults.textFieldColors(
+                    textColor = MaterialTheme.colors.onSurface,
+                    backgroundColor = if (mainActivityViewModel.themeData.value) elevatedSurface else Color.Black.copy(
+                        0.12f
+                    )
+                ),
+                onValueChange = {
+                    addEditViewmodel.titleError = false
+                    addEditViewmodel.onEvent(Add_Edit_Events.EnteredTitle(it))
+                },
+                label = {
+                    Text(
+                        text = stringResource(
+                            R.string.text_field_title
+                        )
+                    )
+                },
+                modifier = Modifier.constrainAs(titlePosition) {
+                    top.linkTo(parent.top, 16.dp)
+                    start.linkTo(parent.start, 16.dp)
+                    end.linkTo(parent.end, 16.dp)
+                    width = Dimension.fillToConstraints
+                })
+
+            OutlinedTextField(
+                isError = addEditViewmodel.descriptionError,
+                value = addEditViewmodel.state.value.description,
+                colors = TextFieldDefaults.textFieldColors(
+                    textColor = MaterialTheme.colors.onSurface,
+                    backgroundColor = if (mainActivityViewModel.themeData.value) elevatedSurface else Color.Black.copy(
+                        0.12f
+                    )
+                ),
+                onValueChange = {
+                    addEditViewmodel.descriptionError = false
+                    addEditViewmodel.onEvent(Add_Edit_Events.EnteredDescription(it))
+                },
+                label = {
+                    Text(
+                        text = if (currentPage == 0) stringResource(R.string.textfield_description_optional) else stringResource(
+                            id = R.string.textfield_description
+                        )
+                    )
+                },
+                modifier = Modifier.constrainAs(descriptionPosition) {
+                    start.linkTo(parent.start, 16.dp)
+                    end.linkTo(parent.end, 16.dp)
+                    width = Dimension.fillToConstraints
+                    top.linkTo(titlePosition.bottom, 32.dp)
+                })
+
+
+            if (currentPage == 0) {
+                Text(
+                    text = stringResource(R.string.level_of_importance),
+                    style = MaterialTheme.typography.h6,
+                    color = MaterialTheme.colors.onSurface,
+                    modifier = Modifier.constrainAs(priorityTextPosition) {
+                        top.linkTo(descriptionPosition.bottom, 32.dp)
+                        start.linkTo(parent.start, 16.dp)
+                        end.linkTo(parent.end, 16.dp)
+                        width = Dimension.fillToConstraints
+                    })
+                Row(
+                    verticalAlignment = Alignment.CenterVertically,
+                    horizontalArrangement = Arrangement.spacedBy(24.dp),
+                    modifier = Modifier.constrainAs(priorityPosition) {
+                        width = Dimension.fillToConstraints
+                        start.linkTo(parent.start, 16.dp)
+                        end.linkTo(parent.end, 16.dp)
+                        top.linkTo(priorityTextPosition.bottom, 24.dp)
+
+                    }) {
+
+                    var blueIsSelected by rememberSaveable {
+                        mutableStateOf(addEditViewmodel.state.value.taskPriority == Priority.LOW)
+                    }
+                    var yellowIsSelected by rememberSaveable {
+                        mutableStateOf(addEditViewmodel.state.value.taskPriority == Priority.MEDIUM)
+                    }
+                    var redIsSelected by rememberSaveable {
+                        mutableStateOf(addEditViewmodel.state.value.taskPriority == Priority.HIGH)
+                    }
+
+
+                    txtShowDateAndTime =
+                        addEditViewmodel.state.value.dueDate.ifBlank { stringResource(id = R.string.due_date) }
+
+                    val redWeight by animateFloatAsState(targetValue = if (redIsSelected) 2f else 1f)
+                    val yellowWeight by animateFloatAsState(targetValue = if (yellowIsSelected) 2f else 1f)
+                    val blueWeight by animateFloatAsState(targetValue = if (blueIsSelected) 2f else 1f)
+                    val redBorder by animateDpAsState(targetValue = if (redIsSelected) 3.dp else 0.dp)
+                    val yellowBorder by animateDpAsState(targetValue = if (yellowIsSelected) 3.dp else 0.dp)
+                    val blueBorder by animateDpAsState(targetValue = if (blueIsSelected) 3.dp else 0.dp)
+                    val interactionSource = remember { MutableInteractionSource() }
+                    val blueSize by animateDpAsState(targetValue = if (blueIsSelected) 75.dp else 45.dp)
+                    val redSize by animateDpAsState(targetValue = if (redIsSelected) 75.dp else 45.dp)
+                    val yellowSize by animateDpAsState(targetValue = if (yellowIsSelected) 75.dp else 45.dp)
+
+                    when (addEditViewmodel.state.value.taskPriority) {
+                        Priority.LOW -> {
+                            blueIsSelected = true
+                            yellowIsSelected = false
+                            redIsSelected = false
+                        }
+
+                        Priority.MEDIUM -> {
+                            yellowIsSelected = true
+                            blueIsSelected = false
+                            redIsSelected = false
+                        }
+
+                        Priority.HIGH -> {
+                            redIsSelected = true
+                            yellowIsSelected = false
+                            blueIsSelected = false
+                        }
+                    }
+
+                    Box(
+                        modifier = Modifier
+                            .shadow(
+                                20.dp,
+                                RoundedCornerShape(15.dp),
+                                spotColor = if (mainActivityViewModel.themeData.value && blueIsSelected) Color.White else Color.Black
+                            )
+                            .border(
+                                width = blueBorder,
+                                color = if (blueIsSelected) MaterialTheme.colors.onSurface else Color.Transparent,
+                                RoundedCornerShape(15.dp)
+                            )
+                            .clip(RoundedCornerShape(15.dp))
+                            .height(blueSize)
+                            .background(
+                                Brush.verticalGradient(
+                                    listOf(lighterBlue, darkerBlue),
+                                    startY = -10f
+                                )
+                            )
+                            .weight(blueWeight)
+                            .clickable(
+                                indication = null,
+                                interactionSource = interactionSource
+                            ) {
+                                blueIsSelected = true
+                                yellowIsSelected = false
+                                redIsSelected = false
+                                addEditViewmodel.onEvent(Add_Edit_Events.ChangePriority(Priority.LOW))
+                            },
+                    ) {
+                        AnimatedContent(
+                            targetState = blueIsSelected,
+                            modifier = Modifier.align(Alignment.Center), label = ""
+                        ) {
+                            if (it)
+                                Text(
+                                    text = stringResource(id = R.string.low),
+                                    style = MaterialTheme.typography.h6,
+                                    fontWeight = FontWeight.Bold,
+                                    color = Color.White,
+                                    modifier = Modifier.align(Alignment.Center)
+                                )
+                            else
+                                Text(
+                                    text = stringResource(id = R.string.low),
+                                    style = MaterialTheme.typography.body1,
+                                    color = Color.White,
+                                    modifier = Modifier.align(Alignment.Center)
+                                )
+                        }
+                    }
+
+                    Box(
+                        modifier = Modifier
+                            .shadow(
+                                20.dp, RoundedCornerShape(15.dp),
+                                spotColor = if (mainActivityViewModel.themeData.value && yellowIsSelected) Color.White else Color.Black
+                            )
+                            .border(
+                                yellowBorder,
+                                if (yellowIsSelected) MaterialTheme.colors.onSurface else Color.Transparent,
+                                RoundedCornerShape(15.dp)
+                            )
+                            .clip(RoundedCornerShape(15.dp))
+                            .background(
+                                Brush.verticalGradient(
+                                    listOf(lighterYellow, darkerYellow),
+                                    startY = -10f
+                                )
+                            )
+                            .weight(yellowWeight)
+                            .clickable(
+                                indication = null,
+                                interactionSource = interactionSource
+                            ) {
+                                yellowIsSelected = true
+                                redIsSelected = false
+                                blueIsSelected = false
+                                addEditViewmodel.onEvent(Add_Edit_Events.ChangePriority(Priority.MEDIUM))
+                            }
+                            .size(yellowSize),
+                    ) {
+                        AnimatedContent(
+                            targetState = yellowIsSelected,
+                            modifier = Modifier.align(Alignment.Center)
+                        ) {
+                            if (it)
+                                Text(
+                                    text = stringResource(id = R.string.medium),
+                                    style = MaterialTheme.typography.h6,
+                                    fontWeight = FontWeight.Bold,
+                                    color = Color.White,
+                                    modifier = Modifier.align(Alignment.Center)
+                                )
+                            else
+                                Text(
+                                    text = stringResource(id = R.string.medium),
+                                    style = MaterialTheme.typography.body1,
+                                    color = Color.White,
+                                    modifier = Modifier.align(Alignment.Center)
+                                )
+                        }
+
+                    }
+
+
+
+
+                    Box(
+                        modifier = Modifier
+                            .shadow(
+                                20.dp, RoundedCornerShape(15.dp),
+                                spotColor = if (mainActivityViewModel.themeData.value && redIsSelected) Color.White else Color.Black
+                            )
+                            .border(
+                                redBorder,
+                                if (redIsSelected) MaterialTheme.colors.onSurface else Color.Transparent,
+                                RoundedCornerShape(15.dp)
+                            )
+                            .clip(RoundedCornerShape(15.dp))
+                            .weight(redWeight)
+                            .background(
+                                Brush.verticalGradient(
+                                    listOf(lighterRed, darkerRed),
+                                    startY = -15f
+                                )
+                            )
+                            .clickable(
+                                indication = null,
+                                interactionSource = interactionSource
+                            ) {
+                                redIsSelected = true
+                                yellowIsSelected = false
+                                blueIsSelected = false
+                                addEditViewmodel.onEvent(Add_Edit_Events.ChangePriority(Priority.HIGH))
+                            }
+                            .height(redSize),
+                    ) {
+                        AnimatedContent(
+                            targetState = redIsSelected,
+                            modifier = Modifier.align(Alignment.Center)
+                        ) {
+                            if (it)
+                                Text(
+                                    text = stringResource(id = R.string.high),
+                                    style = MaterialTheme.typography.h6,
+                                    fontWeight = FontWeight.Bold,
+                                    color = Color.White,
+                                    modifier = Modifier.align(Alignment.Center)
+                                )
+                            else
+                                Text(
+                                    text = stringResource(id = R.string.high),
+                                    style = MaterialTheme.typography.body1,
+                                    color = Color.White,
+                                    modifier = Modifier.align(Alignment.Center)
+                                )
+
+                        }
+                    }
+                }
+
+                Column(
+                    Modifier
+                        .constrainAs(lowerColumnPosition) {
+                            start.linkTo(priorityPosition.start)
+                            end.linkTo(priorityPosition.end)
+                            top.linkTo(priorityPosition.bottom, 40.dp)
+                            width = Dimension.fillToConstraints
+                        }
+                        .fillMaxWidth(), horizontalAlignment = Alignment.Start)
+                {
+                    var dueDateButtonIsSelected by remember { mutableStateOf(addEditViewmodel.state.value.dueDate.isNotBlank()) }
+                    dueDateButtonIsSelected = addEditViewmodel.state.value.dueDate.isNotBlank()
+                    val taskOptions =
+                        listOf(
+                            context.getString(R.string.repeat),
+                            context.getString(R.string.due_date_add_screen)
+                        )
+
+                    Row(
+                        verticalAlignment = Alignment.CenterVertically,
+                        horizontalArrangement = Arrangement.spacedBy(32.dp),
+                        modifier = Modifier.padding(bottom = 32.dp)
+                    ) {
+                        var repeatButtonSelected by remember { mutableStateOf(addEditViewmodel.state.value.repeatTime.isNotEmpty()) }
+
+                        val repeatIsSelectedColor by animateColorAsState(  //TODO   WE WANT TO TURN THIS BUTTON ON ONLY WHEN REPEAT DATE HAS BEEN SET , AND THEN TURN IT OFF
+                            targetValue = if (addEditViewmodel.selectedRepeatTaskOption.isNotEmpty() || addEditViewmodel.state.value.repeatTime.isNotBlank()) MaterialTheme.colors.primary else MaterialTheme.colors.onSurface.copy(
+                                0.6f
+                            ),
+                            label = "repeatColorIsSelected"
+                        )
+                        val dueDateIsSelectedColor by animateColorAsState(
+                            targetValue = if (addEditViewmodel.dialogState.value.dueDateHasBeenSet || addEditViewmodel.state.value.dueDate.isNotBlank()) MaterialTheme.colors.primary else MaterialTheme.colors.onSurface.copy(
+                                0.6f
+                            ),
+                            label = "dueDateColorIsSelected"
+                        )
+                        taskOptions.forEach {
+
+                            Column(
+                                horizontalAlignment = Alignment.CenterHorizontally,
+                                modifier = Modifier
+                                    .weight(1f)
+                                    .border(
+                                        width = 1.5.dp,
+                                        if (it == context.getString(R.string.repeat)) repeatIsSelectedColor else dueDateIsSelectedColor,
+                                        RoundedCornerShape(12.dp)
+                                    )
+                                    .clip(
+                                        RoundedCornerShape(12.dp)
+                                    )
+                                    .clickable(
+                                        indication = null,
+                                        interactionSource = MutableInteractionSource()
+                                    ) {
+                                        if (it == context.getString(R.string.repeat)) {
+                                            if (addEditViewmodel.selectedRepeatTaskOption.isNotEmpty() || addEditViewmodel.state.value.repeatTime.isNotBlank() && addEditViewmodel.state.value.dueDate.isNotBlank()) {
+                                                addEditViewmodel.selectedRepeatTaskOption = ""
+                                                addEditViewmodel.onEvent(
+                                                    Add_Edit_Events.EnteredRepeatDialog(
+                                                        ""
+                                                    )
+                                                )
+                                                repeatButtonSelected = false
+
+                                            } else {
+                                                addEditViewmodel.showRepeatDialog = true
+                                                repeatButtonSelected = true
+
+
+                                            }
+
+                                        } else {
+
+                                            if (addEditViewmodel.dialogState.value.dueDateHasBeenSet || addEditViewmodel.state.value.dueDate.isNotBlank()) {
+
+                                                addEditViewmodel.onEvent(Add_Edit_Events.EnteredRepeatDialog(""))
+
+                                                addEditViewmodel.dialogEvents(
+                                                    ChooseDateTimeDialogEvents.ToggleDueDate(false)
+                                                )
+                                                addEditViewmodel.dialogEvents(
+                                                    ChooseDateTimeDialogEvents.ClearAllValues
+                                                )
+                                            } else {
+                                                addEditViewmodel.dialogEvents(
+                                                    ChooseDateTimeDialogEvents.ShowDateAndTimeDialog(
+                                                        true
+                                                    )
+                                                )
+                                                addEditViewmodel.dialogEvents(
+                                                    ChooseDateTimeDialogEvents.ToggleDueDate(true)
+                                                )
+                                                dueDateButtonIsSelected = true
+
+                                            }
+
+                                        }
+
+                                    }
+                                    .padding(vertical = 8.dp)
+                            ) {
+                                Icon(
+                                    painter = painterResource(
+                                        id = if (it == context.getString(R.string.repeat))
+                                            R.drawable.clock_refresh
+                                        else
+                                            R.drawable.calendar
+                                    ),
+                                    contentDescription = "repeat",
+                                    tint = if (it == context.getString(R.string.repeat)) repeatIsSelectedColor else dueDateIsSelectedColor
+                                )
+                                if (it == context.getString(R.string.due_date_add_screen)) {
+                                    AnimatedContent(
+                                        targetState = addEditViewmodel.dialogState.value.dueDateHasBeenSet || addEditViewmodel.state.value.dueDate.isNotBlank(),
+                                        label = "dueDateAnimation"
+                                    ) { dueDateHasBeenSet ->
+
+                                        Text(
+                                            modifier = Modifier.fillMaxWidth(),
+                                            textAlign = TextAlign.Center,
+                                            fontFamily = if (mainActivityViewModel.languageData.value == "fa-ir") iranYekanFarsiNamerals else iranYekan,
+                                            text = if (dueDateHasBeenSet) {
+                                                if (addEditViewmodel.dialogState.value.reminderIsChecked && addEditViewmodel.state.value.dueDate.isNotBlank()) {
+                                                    val localDate = LocalDateTime.parse(
+                                                        addEditViewmodel.state.value.dueDate,
+                                                        DateTimeFormatter.ISO_LOCAL_DATE_TIME
+                                                    )
+                                                    val calendarType =
+                                                        if (mainActivityViewModel.languageData.value == "fa-ir") gregorian_to_jalali(
+                                                            localDate.year,
+                                                            localDate.monthValue,
+                                                            localDate.dayOfMonth
+                                                        ) else intArrayOf(
+                                                            localDate.year,
+                                                            localDate.monthValue,
+                                                            localDate.dayOfMonth
+                                                        )
+                                                    "${calendarType[0]}/${leadingZero(calendarType[1].toString())}/${
+                                                        leadingZero(
+                                                            calendarType[2].toString()
+                                                        )
+                                                    } \n ${leadingZero(localDate.hour.toString())}:${
+                                                        leadingZero(
+                                                            localDate.minute.toString()
+                                                        )
+                                                    } \n ${
+                                                        stringResource(
+                                                            R.string.has_reminder
+                                                        )
+                                                    }"
+                                                } else if (addEditViewmodel.state.value.dueDate.isNotBlank()) {
+                                                    val localDate = LocalDateTime.parse(
+                                                        addEditViewmodel.state.value.dueDate,
+                                                        DateTimeFormatter.ISO_LOCAL_DATE_TIME
+                                                    )
+                                                    "${localDate.year}/${leadingZero(localDate.monthValue.toString())}/${
+                                                        leadingZero(
+                                                            localDate.dayOfMonth.toString()
+                                                        )
+                                                    } \n ${leadingZero(localDate.hour.toString())}:${
+                                                        leadingZero(
+                                                            localDate.minute.toString()
+                                                        )
+                                                    }"
+                                                } else ""
+                                            } else
+                                                context.getString(
+                                                    R.string.due_date_add_screen
+                                                ),
+                                            color = if (it == context.getString(R.string.repeat)) repeatIsSelectedColor else dueDateIsSelectedColor
+                                        )
+                                    }
+                                } else
+                                    AnimatedContent(
+                                        targetState = addEditViewmodel.selectedRepeatTaskOption.isNotEmpty() || addEditViewmodel.state.value.repeatTime.isNotBlank(),
+                                        label = "repeatAnimation"
+                                    ) { dueDateIsSet ->
+                                        Text(
+                                            modifier = Modifier.fillMaxWidth(),
+                                            textAlign = TextAlign.Center,
+                                            text = if (dueDateIsSet) addEditViewmodel.state.value.repeatTime else context.getString(
+                                                R.string.repeat
+                                            ),
+                                            color = if (it == context.getString(R.string.repeat)) repeatIsSelectedColor else dueDateIsSelectedColor
+                                        )
+                                    }
+
+
+                            }
+                        }
+                    }
+
+                    Text(
+                        text = stringResource(R.string.tags),
+                        color = MaterialTheme.colors.onSurface,
+                        style = MaterialTheme.typography.h6
+                    )
+
+                    Text(
+                        text = stringResource(R.string.up_to_three_tags),
+                        color = Gold200,
+                        style = MaterialTheme.typography.body2,
+                        modifier = Modifier.padding(top = 12.dp)
+                    )
+
+                    var tagValue by rememberSaveable { mutableStateOf("") }
+
+                    var tagError by rememberSaveable { mutableStateOf(false) }
+
+                    var characterLimit by rememberSaveable { mutableStateOf<Byte>(0) }
+
+                    Column(Modifier.fillMaxWidth()) {
+                        AnimatedContent(
+                            targetState = characterLimit,
+                            label = "characterLimit",
+                            modifier = Modifier
+                                .align(AbsoluteAlignment.Right)
+                                .padding(end = 4.dp, bottom = 4.dp, top = 4.dp)
+                        ) {
+                            Text(
+                                text = "$it / 25",
+                                color = MaterialTheme.colors.onSurface.copy(0.5f)
+                            )
+                        }
+                        OutlinedTextField(
+                            value = tagValue,
+                            enabled = addEditViewmodel.state.value.tagNumber1.isBlank() || addEditViewmodel.state.value.tagNumber2.isBlank() || addEditViewmodel.state.value.tagNumber3.isBlank(),
+                            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
+                            onValueChange = {
+
+                                if (!it.startsWith(" ") && it.length <= 25) {
+                                    characterLimit = it.length.toByte()
+                                    tagValue = it
+                                    tagError = false
+                                } else tagError = true
+
+
+                            },
+                            isError = tagError,
+                            trailingIcon = {
+                                IconButton(enabled = addEditViewmodel.state.value.tagNumber1.isBlank() || addEditViewmodel.state.value.tagNumber2.isBlank() || addEditViewmodel.state.value.tagNumber3.isBlank(),
+                                    onClick = {
+
+                                        addEditViewmodel.onEvent(
+                                            Add_Edit_Events.PressedAddTagButton(
+                                                tagValue
+                                            )
+                                        )
+                                        tagValue = ""
+                                        characterLimit = 0
+
+                                    }) {
+                                    Icon(
+                                        imageVector = Icons.Rounded.Add,
+                                        contentDescription = "",
+                                        tint = MaterialTheme.colors.onSurface
+                                    )
+                                }
+                            },
+                            placeholder = { Text(text = stringResource(R.string.tag_name)) },
+                            colors = TextFieldDefaults.outlinedTextFieldColors(
+                                textColor = MaterialTheme.colors.onSurface,
+                                backgroundColor = if (mainActivityViewModel.themeData.value) elevatedSurface else Color.Black.copy(
+                                    0.12f
+                                )
+                            ),
+                            modifier = Modifier
+                                .onFocusEvent {
+                                    if (it.isFocused)
+                                        coroutineScope.launch {
+                                            delay(500)
+                                            scrollState.animateScrollTo(scrollState.maxValue)
+                                        }
+
+                                }
+                                .fillMaxWidth()
+                                .padding(bottom = if (addEditViewmodel.state.value.tagNumber1.isEmpty()) 24.dp else 0.dp)
+                        )
+
+
+                    }
+
+                    AnimatedVisibility(visible = addEditViewmodel.state.value.tagNumber1.isNotEmpty() || addEditViewmodel.state.value.tagNumber2.isNotEmpty() || addEditViewmodel.state.value.tagNumber3.isNotEmpty()) {
+                        Column(
+                            Modifier
+                                .fillMaxWidth()
+                                .padding(vertical = 24.dp),
+                            verticalArrangement = Arrangement.spacedBy(12.dp)
+                        ) {
+
+                            Row(
+                                Modifier.fillMaxWidth(),
+                                horizontalArrangement = Arrangement.spacedBy(12.dp),
+                                verticalAlignment = Alignment.CenterVertically
+                            ) {
+
+
+                                AnimatedVisibility(
+                                    visible = addEditViewmodel.state.value.tagNumber1.isNotEmpty() && addEditViewmodel.state.value.tagNumber1.length < 25,
+                                    exit = fadeOut()
+                                ) {
+                                    myTag(
+                                        addEditViewmodel.state.value.tagNumber1,
+                                        MaterialTheme.colors.onSurface,
+                                        borderStroke = 1.dp, deletable = true
+                                    ) {
+                                        addEditViewmodel.onEvent(
+                                            Add_Edit_Events.PressedDeleteTagButton(
+                                                "tagNumber1"
+                                            )
+                                        )
+                                        return@myTag Unit
+                                    }
+                                }
+                                AnimatedVisibility(
+                                    visible = addEditViewmodel.state.value.tagNumber2.isNotEmpty() && addEditViewmodel.state.value.tagNumber2.length < 16,
+                                    exit = fadeOut()
+                                ) {
+                                    myTag(
+                                        addEditViewmodel.state.value.tagNumber2,
+                                        MaterialTheme.colors.onSurface,
+                                        borderStroke = 1.dp, deletable = true
+                                    ) {
+                                        addEditViewmodel.onEvent(
+                                            Add_Edit_Events.PressedDeleteTagButton(
+                                                "tagNumber2"
+                                            )
+                                        )
+                                        return@myTag Unit
+                                    }
+                                }
+
+                                AnimatedVisibility(
+                                    visible = addEditViewmodel.state.value.tagNumber3.isNotEmpty() && addEditViewmodel.state.value.tagNumber2.length < 13,
+                                    exit = fadeOut()
+                                ) {
+                                    addEditViewmodel.state.value.tagNumber3.let {
+                                        myTag(
+                                            it,
+                                            MaterialTheme.colors.onSurface,
+                                            borderStroke = 1.dp, deletable = true
+                                        ) {
+
+                                            addEditViewmodel.onEvent(
+                                                Add_Edit_Events.PressedDeleteTagButton(
+                                                    "tagNumber3"
+                                                )
+                                            )
+                                            return@myTag Unit
+                                        }
+                                    }
+                                }
+
+                            }
+                            AnimatedVisibility(
+                                visible = addEditViewmodel.state.value.tagNumber1.isNotEmpty() && addEditViewmodel.state.value.tagNumber1.length >= 25,
+                                exit = fadeOut()
+                            ) {
+                                myTag(
+                                    addEditViewmodel.state.value.tagNumber1,
+                                    MaterialTheme.colors.onSurface,
+                                    borderStroke = 1.dp,
+                                    deletable = true
+                                ) {
+                                    addEditViewmodel.onEvent(
+                                        Add_Edit_Events.PressedDeleteTagButton(
+                                            "tagNumber1"
+                                        )
+                                    )
+                                    return@myTag Unit
+                                }
+
+                            }
+
+                            AnimatedVisibility(
+                                visible = addEditViewmodel.state.value.tagNumber2.length >= 16,
+                                exit = fadeOut()
+                            ) {
+                                myTag(
+                                    addEditViewmodel.state.value.tagNumber2,
+                                    MaterialTheme.colors.onSurface,
+                                    borderStroke = 1.dp,
+                                    deletable = true
+                                ) {
+                                    addEditViewmodel.onEvent(
+                                        Add_Edit_Events.PressedDeleteTagButton(
+                                            "tagNumber2"
+                                        )
+                                    )
+                                    return@myTag Unit
+                                }
+
+                            }
+
+                            AnimatedVisibility(
+                                visible = addEditViewmodel.state.value.tagNumber3.length >= 13,
+                                exit = fadeOut()
+                            ) {
+                                myTag(
+                                    addEditViewmodel.state.value.tagNumber3,
+                                    MaterialTheme.colors.onSurface,
+                                    borderStroke = 1.dp,
+                                    deletable = true
+                                ) {
+                                    addEditViewmodel.onEvent(
+                                        Add_Edit_Events.PressedDeleteTagButton(
+                                            "tagNumber3"
+                                        )
+                                    )
+                                    return@myTag Unit
+                                }
+                            }
+
+
+                        }
+                    }
+
+                    Spacer(
+                        modifier = Modifier
+                            .fillMaxWidth()
+                            .weight(1f)
+                    )
+                    Button(
+                        onClick = {
+                            addEditViewmodel.onEvent(Add_Edit_Events.Save)
+                        }, modifier = Modifier
+                            .fillMaxWidth()
+                            .padding(top = 8.dp)
+                    ) {
+                        Text(
+                            text = confirmButtonText,
+                            color = Color.White,
+                            fontWeight = FontWeight.Bold,
+                            style = MaterialTheme.typography.body1,
+                            modifier = Modifier.padding(bottom = 3.dp)
+                        )
+                    }
+                }
+            } else {
+                Column(Modifier.constrainAs(lowerColumnPosition) {
+                    start.linkTo(descriptionPosition.start)
+                    end.linkTo(descriptionPosition.end)
+                    top.linkTo(descriptionPosition.bottom, 16.dp)
+                    bottom.linkTo(parent.bottom)
+                    width = Dimension.fillToConstraints
+                    height = Dimension.fillToConstraints
+                }) {
+                    Text(
+                        text = stringResource(R.string.tags),
+                        color = MaterialTheme.colors.onSurface,
+                        style = MaterialTheme.typography.h6, modifier = Modifier.padding(top = 8.dp)
+                    )
+
+                    Text(
+                        text = stringResource(R.string.up_to_three_tags),
+                        color = Gold200,
+                        style = MaterialTheme.typography.body2,
+                        modifier = Modifier.padding(top = 12.dp)
+                    )
+
+                    var tagValue by remember { mutableStateOf("") }
+
+                    var characterLimit by remember { mutableStateOf<Byte>(0) }
+
+                    Column(Modifier.fillMaxWidth()) {
+                        AnimatedContent(
+                            targetState = characterLimit,
+                            label = "characterLimit",
+                            modifier = Modifier
+                                .align(Alignment.End)
+                                .padding(end = 4.dp, bottom = 4.dp)
+                        ) {
+                            Text(
+                                text = "$it / 25",
+                                color = MaterialTheme.colors.onSurface.copy(0.5f)
+                            )
+                        }
+                        OutlinedTextField(
+                            value = tagValue,
+
+                            enabled = addEditViewmodel.state.value.tagNumber1.isBlank() || addEditViewmodel.state.value.tagNumber2.isBlank() || addEditViewmodel.state.value.tagNumber3.isBlank(),
+                            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
+                            onValueChange = {
+
+                                if (!it.startsWith(" ") && it.length <= 25) {
+                                    characterLimit = it.length.toByte()
+                                    tagValue = it
+
+                                }
+
+
+                            },
+                            trailingIcon = {
+                                IconButton(enabled = addEditViewmodel.state.value.tagNumber1.isBlank() || addEditViewmodel.state.value.tagNumber2.isBlank() || addEditViewmodel.state.value.tagNumber3.isBlank(),
+                                    onClick = {
+
+                                        addEditViewmodel.onEvent(
+                                            Add_Edit_Events.PressedAddTagButton(
+                                                tagValue
+                                            )
+                                        )
+
+                                        tagValue = ""
+                                        characterLimit = 0
+
+                                    }) {
+                                    Icon(
+                                        imageVector = Icons.Rounded.Add,
+                                        contentDescription = "",
+                                        tint = MaterialTheme.colors.onSurface
+                                    )
+                                }
+                            },
+                            placeholder = { Text(text = stringResource(R.string.tag_name)) },
+                            colors = TextFieldDefaults.outlinedTextFieldColors(
+                                textColor = MaterialTheme.colors.onSurface,
+                                backgroundColor = if (mainActivityViewModel.themeData.value) elevatedSurface else Color.Black.copy(
+                                    0.12f
+                                )
+                            ),
+                            modifier = Modifier
+                                .fillMaxWidth()
+                                .padding(bottom = if (addEditViewmodel.state.value.tagNumber1.isEmpty()) 24.dp else 0.dp)
+                        )
+
+
+                    }
+
+
+                    AnimatedVisibility(visible = addEditViewmodel.state.value.tagNumber1.isNotEmpty() || addEditViewmodel.state.value.tagNumber2.isNotEmpty() || addEditViewmodel.state.value.tagNumber3.isNotEmpty()) {
+                        Column(
+                            Modifier
+                                .fillMaxWidth()
+                                .padding(vertical = 24.dp),
+                            verticalArrangement = Arrangement.spacedBy(12.dp)
+                        ) {
+
+                            Row(
+                                Modifier.fillMaxWidth(),
+                                horizontalArrangement = Arrangement.spacedBy(12.dp),
+                                verticalAlignment = Alignment.CenterVertically
+                            ) {
+
+
+                                AnimatedVisibility(
+                                    visible = addEditViewmodel.state.value.tagNumber1.isNotEmpty() && addEditViewmodel.state.value.tagNumber1.length < 25,
+                                    exit = fadeOut()
+                                ) {
+                                    myTag(
+                                        addEditViewmodel.state.value.tagNumber1,
+                                        MaterialTheme.colors.onSurface,
+                                        borderStroke = 1.dp, deletable = true
+                                    ) {
+                                        addEditViewmodel.onEvent(
+                                            Add_Edit_Events.PressedDeleteTagButton(
+                                                "tagNumber1"
+                                            )
+                                        )
+                                        return@myTag Unit
+                                    }
+                                }
+                                AnimatedVisibility(
+                                    visible = addEditViewmodel.state.value.tagNumber2.isNotEmpty() && addEditViewmodel.state.value.tagNumber2.length < 16,
+                                    exit = fadeOut()
+                                ) {
+                                    myTag(
+                                        addEditViewmodel.state.value.tagNumber2,
+                                        MaterialTheme.colors.onSurface,
+                                        borderStroke = 1.dp, deletable = true
+                                    ) {
+                                        addEditViewmodel.onEvent(
+                                            Add_Edit_Events.PressedDeleteTagButton(
+                                                "tagNumber2"
+                                            )
+                                        )
+                                        return@myTag Unit
+                                    }
+                                }
+
+                                AnimatedVisibility(
+                                    visible = addEditViewmodel.state.value.tagNumber3.isNotEmpty() && addEditViewmodel.state.value.tagNumber2.length < 13,
+                                    exit = fadeOut()
+                                ) {
+                                    addEditViewmodel.state.value.tagNumber3.let {
+                                        myTag(
+                                            it,
+                                            MaterialTheme.colors.onSurface,
+                                            borderStroke = 1.dp, deletable = true
+                                        ) {
+
+                                            addEditViewmodel.onEvent(
+                                                Add_Edit_Events.PressedDeleteTagButton(
+                                                    "tagNumber3"
+                                                )
+                                            )
+                                            return@myTag Unit
+                                        }
+                                    }
+                                }
+
+                            }
+                            AnimatedVisibility(
+                                visible = addEditViewmodel.state.value.tagNumber1.isNotEmpty() && addEditViewmodel.state.value.tagNumber1.length >= 25,
+                                exit = fadeOut()
+                            ) {
+                                myTag(
+                                    addEditViewmodel.state.value.tagNumber1,
+                                    MaterialTheme.colors.onSurface,
+                                    borderStroke = 1.dp,
+                                    deletable = true
+                                ) {
+                                    addEditViewmodel.onEvent(
+                                        Add_Edit_Events.PressedDeleteTagButton(
+                                            "tagNumber1"
+                                        )
+                                    )
+                                    return@myTag Unit
+                                }
+
+                            }
+
+                            AnimatedVisibility(
+                                visible = addEditViewmodel.state.value.tagNumber2.length >= 16,
+                                exit = fadeOut()
+                            ) {
+                                myTag(
+                                    addEditViewmodel.state.value.tagNumber2,
+                                    MaterialTheme.colors.onSurface,
+                                    borderStroke = 1.dp,
+                                    deletable = true
+                                ) {
+                                    addEditViewmodel.onEvent(
+                                        Add_Edit_Events.PressedDeleteTagButton(
+                                            "tagNumber2"
+                                        )
+                                    )
+                                    return@myTag Unit
+                                }
+
+                            }
+
+                            AnimatedVisibility(
+                                visible = addEditViewmodel.state.value.tagNumber3.length >= 13,
+                                exit = fadeOut()
+                            ) {
+                                myTag(
+                                    addEditViewmodel.state.value.tagNumber3,
+                                    MaterialTheme.colors.onSurface,
+                                    borderStroke = 1.dp,
+                                    deletable = true
+                                ) {
+                                    addEditViewmodel.onEvent(
+                                        Add_Edit_Events.PressedDeleteTagButton(
+                                            "tagNumber3"
+                                        )
+                                    )
+                                    return@myTag Unit
+                                }
+                            }
+
+
+                        }
+                    }
+
+                    Spacer(
+                        modifier = Modifier
+                            .fillMaxWidth()
+                            .weight(1f)
+                    )
+                    Button(
+                        onClick = { addEditViewmodel.onEvent(Add_Edit_Events.Save) },
+                        modifier = Modifier
+                            .fillMaxWidth()
+                            .padding(bottom = 16.dp)
+                    ) {
+                        Text(
+                            text = confirmButtonText,
+                            color = Color.White,
+                            fontWeight = FontWeight.Bold,
+                            style = MaterialTheme.typography.body1,
+                            modifier = Modifier.padding(bottom = 3.dp)
+                        )
+                    }
+                }
+            }
+        }
+    }
+
+
+}
+
Index: app/src/main/java/com/golden_minute/nota/presentation/Add_EditScreenViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/presentation/Add_EditScreenViewModel.kt b/app/src/main/java/com/golden_minute/nota/presentation/Add_EditScreenViewModel.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/presentation/Add_EditScreenViewModel.kt	
@@ -0,0 +1,369 @@
+package com.golden_minute.nota.presentation
+
+import android.annotation.SuppressLint
+import android.app.Application
+import androidx.compose.runtime.State
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableIntStateOf
+import androidx.compose.runtime.mutableStateListOf
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.setValue
+import androidx.compose.runtime.toMutableStateList
+import androidx.lifecycle.AndroidViewModel
+import androidx.lifecycle.SavedStateHandle
+import androidx.lifecycle.viewModelScope
+import com.golden_minute.nota.R
+import com.golden_minute.nota.data.Alarm_manager.AlarmSchedulerImpl
+import com.golden_minute.nota.domain.model.InvalidItemException
+import com.golden_minute.nota.domain.model.Note
+import com.golden_minute.nota.domain.model.Tag
+import com.golden_minute.nota.domain.model.Task
+import com.golden_minute.nota.domain.use_case.notes.NoteUseCases
+import com.golden_minute.nota.domain.use_case.tags.TagsUseCases
+import com.golden_minute.nota.domain.use_case.tasks.TaskUseCases
+import com.golden_minute.nota.domain.util.Add_Edit_Events
+import com.golden_minute.nota.domain.util.Add_Edit_State
+import com.golden_minute.nota.domain.util.ChooseDateDialogState
+import com.golden_minute.nota.domain.util.ChooseDateTimeDialogEvents
+import com.golden_minute.nota.domain.util.compareDateTimes
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.flow.MutableSharedFlow
+import kotlinx.coroutines.flow.SharedFlow
+import kotlinx.coroutines.flow.first
+import kotlinx.coroutines.launch
+import java.time.LocalDateTime
+import java.time.temporal.ChronoUnit
+import javax.inject.Inject
+
+@HiltViewModel
+class Add_EditScreenViewModel @Inject constructor(
+    private val noteUseCases: NoteUseCases,
+    private val taskUseCases: TaskUseCases,
+    private val tagsUseCases: TagsUseCases,
+    private val application: Application,
+    savedStateHandle: SavedStateHandle
+) : AndroidViewModel(application) {
+    private val _state = mutableStateOf(Add_Edit_State())
+    val state: State<Add_Edit_State> = _state
+
+    private val _dialogState = mutableStateOf(ChooseDateDialogState())
+    val dialogState: State<ChooseDateDialogState> = _dialogState
+
+    private val alarmManager = AlarmSchedulerImpl(application)
+
+    private var _eventFlow = MutableSharedFlow<UiEvent>()
+    val eventFlow: SharedFlow<UiEvent> = _eventFlow
+
+    sealed class UiEvent {
+        data class ShowSnackBar(val snackBarTitle: String) : UiEvent()
+        data object Save : UiEvent()
+    }
+
+    var titleError by mutableStateOf(false)
+
+
+    var descriptionError by mutableStateOf(false)
+
+    private var tagsList = mutableStateListOf<Tag>()
+
+    var selectedRepeatTaskOption by mutableStateOf("")
+
+    var showRepeatDialog by mutableStateOf(false)
+
+    private var timeComparison by mutableIntStateOf(0)
+
+    private var deletedTag1InEditMode by mutableStateOf("")
+    private var deletedTag2InEditMode by mutableStateOf("")
+    private var deletedTag3InEditMode by mutableStateOf("")
+
+
+    var currentId: Int? = null
+
+    init {
+        savedStateHandle.get<Int>("id")?.let {
+            if (it != -1) {
+                if (currentPage == 1) {
+                    viewModelScope.launch(Dispatchers.IO) {
+                        noteUseCases.getNote(it)?.also { note ->
+                           tagsList = tagsUseCases.getTags().first().toMutableStateList()
+                            currentId = note.id
+                            _state.value = state.value.copy(
+                                title = note.title,
+                                description = note.description,
+                                tagNumber1 = tagsList.find { tag -> tag.noteID == note.id && tag.tagNumber == 1 }?.tagName ?: "",
+                                tagNumber2 = tagsList.find { tag -> tag.noteID == note.id && tag.tagNumber == 2 }?.tagName ?: "",
+                                tagNumber3 = tagsList.find { tag -> tag.noteID == note.id && tag.tagNumber == 3 }?.tagName ?: "",
+                            )
+                        }
+
+
+
+                    }
+                } else {
+                    viewModelScope.launch(Dispatchers.IO) {
+                        taskUseCases.getTask(it)?.also { task ->
+                           tagsList = tagsUseCases.getTags().first().toMutableStateList()
+                            currentId = task.id
+                            _state.value = state.value.copy(
+                                title = task.title,
+                                description = task.description,
+                                taskPriority = task.priority,
+                                dueDate = task.dueDate ?: "",
+                                repeatTime = task.repeatTime.toString(),
+                                itHasReminder = task.hasReminder,
+                                tagNumber1 = tagsList.find { tag -> tag.taskID == task.id && tag.tagNumber == 1 }?.tagName ?: "",
+                                tagNumber2 = tagsList.find { tag -> tag.taskID == task.id && tag.tagNumber == 2 }?.tagName ?: "",
+                                tagNumber3 = tagsList.find { tag -> tag.taskID == task.id && tag.tagNumber == 3 }?.tagName ?: ""
+                            )
+                        }
+                    }
+                }
+
+
+            } else return@let
+
+        } ?: println("title is null , from ViewModel")
+
+
+    }
+
+    @SuppressLint("SuspiciousIndentation")
+    fun onEvent(events: Add_Edit_Events) {
+        when (events) {
+            is Add_Edit_Events.EnteredTitle -> _state.value = state.value.copy(title = events.title)
+            is Add_Edit_Events.EnteredDescription -> _state.value =
+                state.value.copy(description = events.description)
+
+            is Add_Edit_Events.ChangePriority -> _state.value =
+                state.value.copy(taskPriority = events.priority)
+
+            is Add_Edit_Events.SaveDueDate -> {
+                _state.value = state.value.copy(dueDate = events.dueDate.format(Task.timeFormat))
+
+            }
+
+
+            is Add_Edit_Events.PressedAddTagButton -> {
+
+                if (state.value.tagNumber1.isBlank())
+                    _state.value = state.value.copy(tagNumber1 = events.tag)
+                else if (state.value.tagNumber2.isBlank())
+                    _state.value = state.value.copy(tagNumber2 = events.tag)
+                else if (state.value.tagNumber3.isBlank())
+                    _state.value = state.value.copy(tagNumber3 = events.tag)
+            }
+
+            Add_Edit_Events.ToggleTaskReminder -> _state.value =
+                state.value.copy(itHasReminder = !state.value.itHasReminder)
+
+            Add_Edit_Events.Save -> {
+                viewModelScope.launch {
+
+                    try {
+                        if (state.value.dueDate.isNotBlank()) {
+                            if (compareDateTimes(
+                                    state.value.dueDate,
+                                    LocalDateTime.now().truncatedTo(ChronoUnit.SECONDS).toString(),
+                                    "yyyy-MM-dd'T'HH:mm:ss"
+                                ) == -1
+                            ) {
+                                timeComparison = -1
+                                throw InvalidItemException(application.getString(R.string.time_or_date_is_before_current_time))
+                            }
+                        }
+
+                        if (currentPage == 0) {
+
+                            val tempDeletionTagList = arrayListOf<Tag>()
+
+                            tagsList.find { it.tagName == deletedTag1InEditMode }?.let {
+                                tempDeletionTagList.add(it)
+                            }
+                            tagsList.find { it.tagName == deletedTag2InEditMode }?.let {
+                                tempDeletionTagList.add(it)
+                            }
+                            tagsList.find { it.tagName == deletedTag3InEditMode }?.let {
+                                tempDeletionTagList.add(it)
+                            }
+
+                            if (tempDeletionTagList.isNotEmpty())
+                                tagsUseCases.deleteTags(tempDeletionTagList)
+
+                            deletedTag1InEditMode = ""
+                            deletedTag2InEditMode = ""
+                            deletedTag3InEditMode = ""
+
+                            val tempTagList = arrayListOf<Tag>()
+
+                            val task = Task(
+                                id = currentId,
+                                title = state.value.title,
+                                description = state.value.description,
+                                priority = state.value.taskPriority,
+                                dueDate = state.value.dueDate.ifBlank { null },
+                                repeatTime = state.value.repeatTime,
+                                isChecked = false,
+                                hasReminder = dialogState.value.reminderIsChecked
+                            )
+                           val taskId = taskUseCases.addTask(task).also {
+
+                               if (dialogState.value.reminderIsChecked && state.value.dueDate.isNotBlank())
+                                   alarmManager.schedule(task.copy(id = it.toInt()))
+                               else if (currentId != null)
+                                   alarmManager.cancel(task.copy(id = it.toInt()))
+
+                           }
+
+                            if (state.value.tagNumber1.isNotBlank())
+                                tempTagList.add(Tag(tagName = state.value.tagNumber1, taskID = taskId.toInt(), tagNumber = 1))
+
+                            if (state.value.tagNumber2.isNotBlank())
+                                tempTagList.add(Tag(tagName = state.value.tagNumber2,taskID = taskId.toInt(), tagNumber = 2))
+
+                            if (state.value.tagNumber3.isNotBlank())
+                                tempTagList.add(Tag(tagName = state.value.tagNumber3, taskID = taskId.toInt(), tagNumber = 3))
+
+                            tagsUseCases.addTags(tempTagList)
+
+                        } else {
+
+                            val tempDeletionTagList = arrayListOf<Tag>()
+
+                            tagsList.find { it.tagName == deletedTag1InEditMode }?.let {
+                                tempDeletionTagList.add(it)
+                            }
+                            tagsList.find { it.tagName == deletedTag2InEditMode }?.let {
+                                tempDeletionTagList.add(it)
+                            }
+                            tagsList.find { it.tagName == deletedTag3InEditMode }?.let {
+                                tempDeletionTagList.add(it)
+                            }
+
+                            if (tempDeletionTagList.isNotEmpty())
+                                tagsUseCases.deleteTags(tempDeletionTagList)
+
+                            deletedTag1InEditMode = ""
+                            deletedTag2InEditMode = ""
+                            deletedTag3InEditMode = ""
+
+
+                            val note = Note(
+                                title = state.value.title,
+                                description = state.value.description,
+                                id = currentId,
+                                creationDate = System.currentTimeMillis()
+                            )
+
+                            val noteId = noteUseCases.addNote(note)
+
+                            val tempTagList = arrayListOf<Tag>()
+
+                            if (state.value.tagNumber1.isNotBlank())
+                                tempTagList.add(Tag(tagName = state.value.tagNumber1, noteID = noteId.toInt(), tagNumber = 1))
+
+                            if (state.value.tagNumber2.isNotBlank())
+                                tempTagList.add(Tag(tagName = state.value.tagNumber2, noteID = noteId.toInt(), tagNumber = 2))
+
+                            if (state.value.tagNumber3.isNotBlank())
+                                tempTagList.add(Tag(tagName = state.value.tagNumber3, noteID = noteId.toInt(), tagNumber = 3))
+
+                            tagsUseCases.addTags(tempTagList)
+
+
+                        }
+                        _eventFlow.emit(UiEvent.Save)
+                    } catch (e: InvalidItemException) {
+                        if (state.value.title.isBlank())
+                            titleError = true
+                        else if (state.value.description.isBlank() && currentPage != 0)
+                            descriptionError = true
+                        else if (timeComparison == -1) {
+                            timeComparison = 0
+                        }
+
+
+
+
+                        _eventFlow.emit(UiEvent.ShowSnackBar(e.message ?: "Unknown Error"))
+
+                    }
+                }
+            }
+
+            is Add_Edit_Events.PressedDeleteTagButton -> {
+
+                when (events.selectedTag) {
+                    "tagNumber1" -> {
+                        deletedTag1InEditMode = state.value.tagNumber1
+                        _state.value = state.value.copy(tagNumber1 = "")
+                    }
+
+                    "tagNumber2" -> {
+                        deletedTag2InEditMode = state.value.tagNumber2
+                        _state.value = state.value.copy(tagNumber2 = "")
+                    }
+
+                    "tagNumber3" -> {
+                        deletedTag3InEditMode = state.value.tagNumber3
+                        _state.value = state.value.copy(tagNumber3 = "")
+                    }
+                }
+            }
+
+            Add_Edit_Events.ShowValidationSnackBar -> TODO()
+
+            is Add_Edit_Events.EnteredRepeatDialog -> {
+                _state.value = state.value.copy(repeatTime = events.period)
+            }
+        }
+
+    }
+
+    fun dialogEvents(event: ChooseDateTimeDialogEvents) {
+        when (event) {
+            is ChooseDateTimeDialogEvents.EnteredDateType ->
+                _dialogState.value =
+                    dialogState.value.copy(dateTypeIsPredefined = event.isPredefined)
+
+            is ChooseDateTimeDialogEvents.ToggleDueDate -> {
+                _dialogState.value = dialogState.value.copy(dueDateHasBeenSet = event.dueDateIsSet)
+            }
+
+            is ChooseDateTimeDialogEvents.EnteredDay -> {
+                _dialogState.value = dialogState.value.copy(dayFromTextField = event.day)
+            }
+
+            is ChooseDateTimeDialogEvents.EnteredMonth ->
+                _dialogState.value = dialogState.value.copy(monthFromTextField = event.month)
+
+            is ChooseDateTimeDialogEvents.EnteredYear ->
+                _dialogState.value = dialogState.value.copy(yearFromTextField = event.year)
+
+            is ChooseDateTimeDialogEvents.ReminderStatusIsChanged ->
+                _dialogState.value = dialogState.value.copy(reminderIsChecked = event.isChecked)
+
+            is ChooseDateTimeDialogEvents.ShowDateAndTimeDialog ->
+                _dialogState.value = dialogState.value.copy(showDateAndTimeDialog = event.status)
+
+            ChooseDateTimeDialogEvents.ClearAllValues -> {
+                _dialogState.value = ChooseDateDialogState()
+                _state.value = state.value.copy(dueDate = "")
+            }
+
+            is ChooseDateTimeDialogEvents.TimeDialogVisibility -> {
+                _dialogState.value = dialogState.value.copy(showTimePickerDialog = event.status)
+            }
+
+            is ChooseDateTimeDialogEvents.EnteredHour -> {
+                _dialogState.value = dialogState.value.copy(hourValue = event.hour)
+            }
+
+            is ChooseDateTimeDialogEvents.EnteredMinute -> {
+                _dialogState.value = dialogState.value.copy(minuteValue = event.minute)
+            }
+        }
+    }
+
+
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/presentation/ChooseDateAndTimeDialogPreview.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/presentation/ChooseDateAndTimeDialogPreview.kt b/app/src/main/java/com/golden_minute/nota/presentation/ChooseDateAndTimeDialogPreview.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/presentation/ChooseDateAndTimeDialogPreview.kt	
@@ -0,0 +1,620 @@
+@file:Suppress("AnimatedContentLabel")
+
+package com.golden_minute.nota.presentation
+
+import android.widget.Toast
+import androidx.compose.animation.AnimatedContent
+import androidx.compose.animation.ContentTransform
+import androidx.compose.animation.animateColorAsState
+import androidx.compose.animation.fadeIn
+import androidx.compose.animation.fadeOut
+import androidx.compose.animation.slideInVertically
+import androidx.compose.foundation.ExperimentalFoundationApi
+import androidx.compose.foundation.basicMarquee
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.interaction.MutableInteractionSource
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.width
+import androidx.compose.foundation.shape.RoundedCornerShape
+import androidx.compose.foundation.text.KeyboardOptions
+import androidx.compose.material.Button
+import androidx.compose.material.Card
+import androidx.compose.material.DropdownMenu
+import androidx.compose.material.DropdownMenuItem
+import androidx.compose.material.ExperimentalMaterialApi
+import androidx.compose.material.ExposedDropdownMenuBox
+import androidx.compose.material.ExposedDropdownMenuDefaults
+import androidx.compose.material.MaterialTheme
+import androidx.compose.material.OutlinedButton
+import androidx.compose.material.Text
+import androidx.compose.material.TextField
+import androidx.compose.material3.ExperimentalMaterial3Api
+import androidx.compose.material3.Icon
+import androidx.compose.material3.Switch
+import androidx.compose.material3.SwitchDefaults
+import androidx.compose.material3.TextButton
+import androidx.compose.material3.TimePicker
+import androidx.compose.material3.TimePickerDefaults
+import androidx.compose.material3.rememberTimePickerState
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.CompositionLocalProvider
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.platform.LocalLayoutDirection
+import androidx.compose.ui.res.painterResource
+import androidx.compose.ui.res.stringResource
+import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.text.input.KeyboardType
+import androidx.compose.ui.text.style.TextAlign
+import androidx.compose.ui.unit.LayoutDirection
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.window.Dialog
+import com.golden_minute.nota.R
+import com.golden_minute.nota.domain.model.Task
+import com.golden_minute.nota.domain.util.Add_Edit_Events
+import com.golden_minute.nota.domain.util.ChooseDateTimeDialogEvents
+import com.golden_minute.nota.domain.util.leadingZero
+import com.golden_minute.nota.ui.theme.LighterGreen
+import java.text.SimpleDateFormat
+import java.time.LocalDateTime
+import java.util.Calendar
+import java.util.Date
+
+
+@OptIn(
+    ExperimentalMaterialApi::class, ExperimentalFoundationApi::class,
+    ExperimentalMaterial3Api::class
+)
+@Composable
+fun ChooseDateTimeDialog(
+    activityViewModel: MainActivityViewModel,
+    addScreenViewModel: Add_EditScreenViewModel
+) {
+
+
+    var dayError by remember { mutableStateOf(false) }
+    var monthError by remember { mutableStateOf(false) }
+    var yearError by remember { mutableStateOf(false) }
+    val customTagColor by animateColorAsState(
+        targetValue = if (!addScreenViewModel.dialogState.value.dateTypeIsPredefined) MaterialTheme.colors.primaryVariant else MaterialTheme.colors.onSurface.copy(
+            0.8f
+        )
+    )
+    val predefinedTagColor by animateColorAsState(
+        targetValue = if (addScreenViewModel.dialogState.value.dateTypeIsPredefined) MaterialTheme.colors.primaryVariant else MaterialTheme.colors.onSurface.copy(
+            0.8f
+        )
+    )
+
+
+    val context = LocalContext.current
+
+    Dialog(onDismissRequest = {
+        addScreenViewModel.dialogEvents(ChooseDateTimeDialogEvents.ClearAllValues)
+        addScreenViewModel.dialogEvents(
+            ChooseDateTimeDialogEvents.ShowDateAndTimeDialog(false)
+        )
+    }) {
+        Card(
+            shape = RoundedCornerShape(15.dp)
+        ) {
+            if (addScreenViewModel.dialogState.value.showTimePickerDialog)
+                TimePickerDialog(addScreenViewModel)
+            Column(
+                modifier = Modifier
+                    .fillMaxWidth()
+                    .padding(horizontal = 16.dp)
+            ) {
+                Row(
+                    Modifier.fillMaxWidth(),
+                    horizontalArrangement = Arrangement.spacedBy(
+                        12.dp,
+                        alignment = Alignment.CenterHorizontally
+                    ),
+                    verticalAlignment = Alignment.CenterVertically
+                ) {
+
+                    Text(
+                        text = stringResource(R.string.date),
+                        style = MaterialTheme.typography.h6,
+                        modifier = Modifier.padding(top = 14.dp, end = 6.dp)
+                    )
+                    myTag(
+                        color = predefinedTagColor,
+                        tagTitle = stringResource(R.string.predefined),
+                        roundedCornerValue = 10.dp,
+                        modifier = Modifier
+                            .weight(1f)
+                            .padding(top = 15.dp)
+                            .clickable(indication = null,
+                                interactionSource = remember { MutableInteractionSource() }) {
+                                addScreenViewModel.dialogEvents(
+                                    ChooseDateTimeDialogEvents.EnteredDateType(
+                                        true
+                                    )
+                                )
+                            }, textModifier = Modifier.padding(all = 6.dp)
+                    )
+                    myTag(
+                        color = customTagColor,
+                        tagTitle = stringResource(R.string.custom),
+                        roundedCornerValue = 10.dp,
+                        modifier = Modifier
+                            .weight(1f)
+                            .padding(top = 15.dp)
+                            .clickable(indication = null,
+                                interactionSource = remember { MutableInteractionSource() }) {
+                                addScreenViewModel.dialogEvents(
+                                    ChooseDateTimeDialogEvents.EnteredDateType(
+                                        false
+                                    )
+                                )
+                            }, textModifier = Modifier.padding(all = 6.dp)
+                    )
+                }
+
+                Spacer(modifier = Modifier.height(12.dp))
+
+                var expanded by remember { mutableStateOf(false) }
+                val dropdownItems = listOf(
+                    context.getString(R.string.today),
+                    context.getString(R.string.tomorrow),
+                    context.getString(R.string.after_tomorrow)
+                )
+                var selectedItemDropDown by remember { mutableStateOf("") }
+
+                AnimatedContent(
+                    targetState = !addScreenViewModel.dialogState.value.dateTypeIsPredefined,
+                    transitionSpec = {
+                        ContentTransform(
+                            targetContentEnter = slideInVertically() + fadeIn(),
+                            initialContentExit = fadeOut()
+                        )
+                    }) { selected ->
+                    if (selected) {
+                        Row(
+                            horizontalArrangement = Arrangement.spacedBy(16.dp),
+                            modifier = Modifier.padding(top = 12.dp)
+
+                        ) {
+                            TextField(value = addScreenViewModel.dialogState.value.dayFromTextField,
+                                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
+                                placeholder = { Text(text = stringResource(R.string.day)) },
+                                modifier = Modifier
+                                    .width(60.dp)
+                                    .weight(1f), isError = dayError,
+                                onValueChange = {
+                                    try {
+                                        if (it.length < 3)
+                                            addScreenViewModel.dialogEvents(
+                                                ChooseDateTimeDialogEvents.EnteredDay(it)
+                                            )
+                                        if (addScreenViewModel.dialogState.value.dayFromTextField.isNotEmpty())
+                                            dayError =
+                                                addScreenViewModel.dialogState.value.dayFromTextField.toInt() > 31 || addScreenViewModel.dialogState.value.dayFromTextField.toInt() == 0
+                                    } catch (e: Exception) {
+                                        Toast.makeText(
+                                            context,
+                                            context.getString(R.string.invalid_input),
+                                            Toast.LENGTH_SHORT
+                                        ).show()
+                                        addScreenViewModel.dialogEvents(
+                                            ChooseDateTimeDialogEvents.EnteredDay(
+                                                ""
+                                            )
+                                        )
+                                    }
+
+                                })
+                            TextField(value = addScreenViewModel.dialogState.value.monthFromTextField,
+                                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
+                                placeholder = { Text(text = stringResource(R.string.month)) },
+                                modifier = Modifier
+                                    .width(60.dp)
+                                    .weight(1f), isError = monthError,
+                                onValueChange = {
+                                    try {
+                                        if (it.length < 3)
+                                            addScreenViewModel.dialogEvents(
+                                                ChooseDateTimeDialogEvents.EnteredMonth(it)
+                                            )
+                                        if (addScreenViewModel.dialogState.value.monthFromTextField.isNotEmpty())
+                                            monthError =
+                                                addScreenViewModel.dialogState.value.monthFromTextField.toInt() > 12 || addScreenViewModel.dialogState.value.monthFromTextField.toInt() == 0
+                                    } catch (e: Exception) {
+                                        Toast.makeText(
+                                            context,
+                                            context.getString(R.string.invalid_input),
+                                            Toast.LENGTH_SHORT
+                                        ).show()
+                                        addScreenViewModel.dialogEvents(
+                                            ChooseDateTimeDialogEvents.EnteredMonth(
+                                                ""
+                                            )
+                                        )
+                                    }
+
+                                })
+                            TextField(value = addScreenViewModel.dialogState.value.yearFromTextField,
+                                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
+                                placeholder = { Text(text = stringResource(R.string.year)) },
+                                modifier = Modifier
+                                    .width(60.dp)
+                                    .weight(1f), isError = yearError,
+                                onValueChange = {
+                                    try {
+                                        if (it.length < 5) {
+                                            addScreenViewModel.dialogEvents(
+                                                ChooseDateTimeDialogEvents.EnteredYear(it)
+                                            )
+                                            yearError = it.length != 4
+                                        } else yearError = true
+
+                                    } catch (e: Exception) {
+                                        Toast.makeText(
+                                            context,
+                                            context.getString(R.string.invalid_input),
+                                            Toast.LENGTH_SHORT
+                                        ).show()
+                                        addScreenViewModel.dialogEvents(
+                                            ChooseDateTimeDialogEvents.EnteredYear(
+                                                ""
+                                            )
+                                        )
+                                    }
+
+                                })
+                        }
+                    } else {
+                        ExposedDropdownMenuBox(
+                            expanded = expanded,
+                            onExpandedChange = { expanded = !expanded }) {
+
+                            TextField(
+                                value = selectedItemDropDown,
+                                onValueChange = {},
+                                readOnly = true,
+                                trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },
+                                placeholder = { Text(text = stringResource(R.string.choose)) },
+                                modifier = Modifier
+                                    .fillMaxWidth()
+                                    .padding(top = 12.dp)
+
+
+                            )
+                            DropdownMenu(
+                                expanded = expanded,
+                                onDismissRequest = { expanded = false }, modifier = Modifier
+                                    .width(288.dp)
+                                    .basicMarquee()
+                            ) {
+                                dropdownItems.forEach { currentItem ->
+                                    DropdownMenuItem(onClick = {
+                                        when (currentItem) {
+                                            context.getString(R.string.today) -> {
+                                                addScreenViewModel.dialogEvents(
+                                                    ChooseDateTimeDialogEvents.EnteredDay(
+                                                        currentSystemDay.toString()
+                                                    )
+                                                )
+                                                addScreenViewModel.dialogEvents(
+                                                    ChooseDateTimeDialogEvents.EnteredMonth(
+                                                        currentSystemMonth.toString()
+                                                    )
+                                                )
+                                                addScreenViewModel.dialogEvents(
+                                                    ChooseDateTimeDialogEvents.EnteredYear(
+                                                        currentSystemYear.toString()
+                                                    )
+                                                )
+                                            }
+
+                                            context.getString(R.string.tomorrow) -> {
+                                                addScreenViewModel.dialogEvents(
+                                                    ChooseDateTimeDialogEvents.EnteredDay(
+                                                        if (currentSystemDay < 30) (1 + currentSystemDay).toString()
+                                                        else 1.toString()
+                                                    )
+                                                )
+
+                                                addScreenViewModel.dialogEvents(
+                                                    ChooseDateTimeDialogEvents.EnteredMonth(
+                                                        currentSystemMonth.toString()
+                                                    )
+                                                )
+                                                addScreenViewModel.dialogEvents(
+                                                    ChooseDateTimeDialogEvents.EnteredYear(
+                                                        currentSystemYear.toString()
+                                                    )
+                                                )
+                                            }
+
+                                            context.getString(R.string.after_tomorrow) -> {
+                                                addScreenViewModel.dialogEvents(
+                                                    ChooseDateTimeDialogEvents.EnteredDay(
+                                                        if (currentSystemDay < 30)
+                                                            (2 + currentSystemDay).toString()
+                                                        else 2.toString()
+                                                    )
+                                                )
+
+                                                addScreenViewModel.dialogEvents(
+                                                    ChooseDateTimeDialogEvents.EnteredMonth(
+                                                        currentSystemMonth.toString()
+                                                    )
+                                                )
+                                                addScreenViewModel.dialogEvents(
+                                                    ChooseDateTimeDialogEvents.EnteredYear(
+                                                        currentSystemYear.toString()
+                                                    )
+                                                )
+                                            }
+                                        }
+                                        selectedItemDropDown = currentItem
+                                        expanded = false
+
+                                    }) {
+                                        Text(text = currentItem)
+                                    }
+                                }
+                            }
+
+
+                        }
+
+                    }
+
+
+                }
+
+                Spacer(modifier = Modifier.height(32.dp))
+
+                Text(
+                    text = stringResource(id = R.string.time),
+                    style = MaterialTheme.typography.h6,
+                    modifier = Modifier
+                        .fillMaxWidth()
+                        .padding(bottom = 8.dp),
+                    textAlign = TextAlign.Start
+                )
+
+
+                OutlinedButton(
+                    onClick = {
+                        addScreenViewModel.dialogEvents(
+                            ChooseDateTimeDialogEvents.TimeDialogVisibility(
+                                true
+                            )
+                        )
+                    },
+                    modifier = Modifier.fillMaxWidth()
+                ) {
+                    Text(
+                        text = stringResource(R.string.choose_time),
+                        style = MaterialTheme.typography.body1
+                    )
+                }
+
+                Row(
+                    modifier = Modifier
+                        .fillMaxWidth()
+                        .padding(vertical = 18.dp),
+                    verticalAlignment = Alignment.CenterVertically,
+                    horizontalArrangement = Arrangement.Center
+                ) {
+                    Icon(
+                        painter = painterResource(id = R.drawable.bell_01),
+                        contentDescription = "reminder",
+                        tint = MaterialTheme.colors.onSurface
+                    )
+                    Spacer(modifier = Modifier.width(12.dp))
+                    Text(text = stringResource(R.string.have_reminder))
+                    Spacer(modifier = Modifier.width(16.dp))
+                    Switch(
+                        checked = addScreenViewModel.dialogState.value.reminderIsChecked,
+                        colors = SwitchDefaults.colors(
+                            Color.White,
+                            MaterialTheme.colors.primary
+                        ),
+                        onCheckedChange = {
+                            addScreenViewModel.dialogEvents(
+                                ChooseDateTimeDialogEvents.ReminderStatusIsChanged(!addScreenViewModel.dialogState.value.reminderIsChecked)
+                            )
+                        })
+                }
+
+
+
+                Button(
+                    enabled = addScreenViewModel.dialogState.value.dayFromTextField.isNotBlank() && addScreenViewModel.dialogState.value.monthFromTextField.isNotBlank() && addScreenViewModel.dialogState.value.yearFromTextField.isNotBlank() && addScreenViewModel.dialogState.value.hourValue.isNotBlank() && addScreenViewModel.dialogState.value.minuteValue.isNotBlank(),
+                    onClick = {
+                        val simpleFormat = SimpleDateFormat("yyyy-MM-dd")
+                        val currentDate: Date =
+                            simpleFormat.parse("$currentSystemYear-$currentSystemMonth-$currentSystemDay") as Date
+
+                        val enteredDate =
+                            simpleFormat.parse(
+                                "${addScreenViewModel.dialogState.value.yearFromTextField}-${
+                                    leadingZero(
+                                        addScreenViewModel.dialogState.value.monthFromTextField
+                                    )
+                                }-${addScreenViewModel.dialogState.value.dayFromTextField}"
+                            ) as Date
+
+                        val dateIsOld = enteredDate.before(currentDate)
+                        if (dateIsOld) {
+                            Toast.makeText(
+                                context,
+                                context.getString(R.string.the_date_entered_is_before_today_s_date),
+                                Toast.LENGTH_LONG
+                            ).show()
+                        } else {
+                            addScreenViewModel.dialogEvents(
+                                ChooseDateTimeDialogEvents.ShowDateAndTimeDialog(
+                                    false
+                                )
+                            )
+                        }
+                        addScreenViewModel.dialogEvents(
+                            ChooseDateTimeDialogEvents.ToggleDueDate(
+                                true
+                            )
+                        )
+                        addScreenViewModel.onEvent(
+                            Add_Edit_Events.SaveDueDate(
+                                if (activityViewModel.languageData.value == "en") {
+                                    LocalDateTime.parse(
+                                        "${addScreenViewModel.dialogState.value.yearFromTextField}-${
+                                            leadingZero(
+                                                addScreenViewModel.dialogState.value.monthFromTextField
+                                            )
+                                        }-${leadingZero(addScreenViewModel.dialogState.value.dayFromTextField)}T${
+                                            leadingZero(
+                                                addScreenViewModel.dialogState.value.hourValue
+                                            )
+                                        }:${leadingZero(addScreenViewModel.dialogState.value.minuteValue)}:00",
+                                        Task.timeFormat
+                                    )
+                                } else {
+                                    val convertedDate = jalali_to_gregorian(
+                                        addScreenViewModel.dialogState.value.yearFromTextField.toInt(),
+                                        addScreenViewModel.dialogState.value.monthFromTextField.toInt(),
+                                        addScreenViewModel.dialogState.value.dayFromTextField.toInt()
+                                    )
+                                    LocalDateTime.parse(
+                                        "${convertedDate[0]}-${
+                                            leadingZero(convertedDate[1].toString())
+                                        }-${
+                                            leadingZero(convertedDate[2].toString())
+                                        }T${leadingZero(addScreenViewModel.dialogState.value.hourValue)}:${
+                                            leadingZero(addScreenViewModel.dialogState.value.minuteValue)
+                                        }:00",
+                                        Task.timeFormat
+                                    )
+                                }
+
+                            )
+                        )
+
+
+                    }, modifier = Modifier
+                        .fillMaxWidth()
+                        .padding(bottom = 16.dp)
+
+                ) {
+                    Text(
+                        text = stringResource(R.string.set_time_and_date),
+                        style = MaterialTheme.typography.body1,
+                        color = MaterialTheme.colors.onSurface
+                    )
+                }
+            }
+        }
+    }
+
+}
+
+@OptIn(ExperimentalMaterial3Api::class)
+@Composable
+fun TimePickerDialog(addScreenViewModel: Add_EditScreenViewModel) {
+
+    val calendar = Calendar.getInstance()
+    val timePickerState = rememberTimePickerState(
+        initialHour = calendar.get(Calendar.HOUR_OF_DAY),
+        initialMinute = calendar.get(Calendar.MINUTE),
+        is24Hour = true
+    )
+
+    Dialog(onDismissRequest = {
+        addScreenViewModel.dialogEvents(
+            ChooseDateTimeDialogEvents.TimeDialogVisibility(
+                false
+            )
+        )
+    },
+        content = {
+            Card(shape = RoundedCornerShape(12.dp)) {
+                Column(
+                    modifier = Modifier.padding(12.dp),
+                    horizontalAlignment = Alignment.CenterHorizontally
+                ) {
+
+                    Text(
+                        text = stringResource(R.string.choose_time),
+                        style = MaterialTheme.typography.h6,
+                        fontWeight = FontWeight.Bold
+                    )
+                    Spacer(modifier = Modifier.height(24.dp))
+                    CompositionLocalProvider(value = LocalLayoutDirection provides LayoutDirection.Ltr) { // this piece of code will force the child composable to be always in LTR
+                        TimePicker(
+                            state = timePickerState,
+                            colors = TimePickerDefaults.colors(
+                                selectorColor = MaterialTheme.colors.primary,
+                                timeSelectorSelectedContainerColor = MaterialTheme.colors.primary,
+                                timeSelectorSelectedContentColor = Color.White,
+                                periodSelectorBorderColor = MaterialTheme.colors.primary
+
+                            )
+                        )
+                    }
+                    Column(
+                        Modifier.fillMaxWidth(),
+                        verticalArrangement = Arrangement.Center,
+                        horizontalAlignment = Alignment.CenterHorizontally
+                    ) {
+                        TextButton(onClick = {
+                            addScreenViewModel.dialogEvents(
+                                ChooseDateTimeDialogEvents.TimeDialogVisibility(false)
+                            )
+                        }) {
+                            Text(
+                                text = stringResource(id = R.string.dismiss), color = LighterGreen
+                            )
+                        }
+                        TextButton(onClick = {
+                            addScreenViewModel.dialogEvents(
+                                ChooseDateTimeDialogEvents.EnteredHour(
+                                    timePickerState.hour.toString()
+                                )
+                            )
+                            addScreenViewModel.dialogEvents(
+                                ChooseDateTimeDialogEvents.EnteredMinute(
+                                    timePickerState.minute.toString()
+                                )
+                            )
+                            addScreenViewModel.dialogEvents(
+                                ChooseDateTimeDialogEvents.TimeDialogVisibility(
+                                    false
+                                )
+                            )
+                        }) {
+                            Text(
+                                text = stringResource(id = R.string.OK), color = LighterGreen
+                            )
+                        }
+                    }
+                }
+
+
+            }
+
+        })
+}
+
+
+
+
+
+
Index: app/src/main/java/com/golden_minute/nota/presentation/HomeScreenViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/presentation/HomeScreenViewModel.kt b/app/src/main/java/com/golden_minute/nota/presentation/HomeScreenViewModel.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/presentation/HomeScreenViewModel.kt	
@@ -0,0 +1,465 @@
+package com.golden_minute.nota.presentation
+
+import android.annotation.SuppressLint
+import android.app.Application
+import androidx.compose.runtime.State
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateListOf
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.setValue
+import androidx.compose.runtime.toMutableStateList
+import androidx.lifecycle.AndroidViewModel
+import androidx.lifecycle.viewModelScope
+import com.golden_minute.nota.data.Alarm_manager.AlarmSchedulerImpl
+import com.golden_minute.nota.domain.model.Note
+import com.golden_minute.nota.domain.model.Tag
+import com.golden_minute.nota.domain.model.Task
+import com.golden_minute.nota.domain.use_case.notes.NoteUseCases
+import com.golden_minute.nota.domain.use_case.tags.TagsUseCases
+import com.golden_minute.nota.domain.use_case.tasks.TaskUseCases
+import com.golden_minute.nota.domain.util.HomeScreenNotesEvent
+import com.golden_minute.nota.domain.util.HomeScreenTasksEvent
+import com.golden_minute.nota.domain.util.NoteOrderType
+import com.golden_minute.nota.domain.util.NotesState
+import com.golden_minute.nota.domain.util.TaskOrderType
+import com.golden_minute.nota.domain.util.TasksState
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.Job
+import kotlinx.coroutines.async
+import kotlinx.coroutines.flow.launchIn
+import kotlinx.coroutines.flow.onEach
+import kotlinx.coroutines.flow.takeWhile
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+sealed class SelectModeEvents {
+    data object DeleteTasks : SelectModeEvents()
+    data object DeleteNotes : SelectModeEvents()
+    data object SelectAllNotes : SelectModeEvents()
+    data object SelectAllTasks : SelectModeEvents()
+    data object CheckSelectedTasks : SelectModeEvents()
+}
+
+
+@HiltViewModel
+class HomeScreenViewModel @Inject constructor(
+    val noteUseCases: NoteUseCases,
+    private val taskUseCases: TaskUseCases,
+    val tagsUseCases: TagsUseCases,
+    app: Application
+) : AndroidViewModel(app) {
+
+    var currentNoteOrder: NoteOrderType? = null
+    var taskCurrentOrder: TaskOrderType? = null
+
+    private var getNotesJob: Job? = null
+    private var getTasksJob: Job? = null
+    private var getTagsJob: Job? = null
+
+    private val _taskState = mutableStateOf(TasksState())
+    val taskState: State<TasksState> = _taskState
+
+    private val alarmManager = AlarmSchedulerImpl(app)
+
+
+    private val _noteState = mutableStateOf(NotesState())
+    val noteState: State<NotesState> = _noteState
+
+    var tagsList = mutableStateListOf(Tag())
+
+    var selectedNotesList = mutableStateListOf(Note(title = "", description = ""))
+
+    var selectedTasksList = mutableStateListOf<Task>()
+
+    var searchValue by mutableStateOf("")
+
+    private var tagsFromSelectedNotes = ArrayList<Tag>()
+
+    private var tagsFromSelectedTasks = ArrayList<Tag>()
+
+
+    init {
+        selectedNotesList.clear()
+        selectedTasksList.clear()
+
+        getTasks(TaskOrderType.Ascending)
+        getTags()
+    }
+
+    @SuppressLint("SuspiciousIndentation")
+    fun onEvent(homeScreenNotesEvent: HomeScreenNotesEvent) {
+        when (homeScreenNotesEvent) {
+
+            is HomeScreenNotesEvent.DeleteNote -> {
+                viewModelScope.launch {
+                    noteUseCases.deleteNote(homeScreenNotesEvent.note)
+                }
+            }
+
+            is HomeScreenNotesEvent.OrderNote -> {
+                if (noteState.value.noteOrder::class == homeScreenNotesEvent.noteOrder::class)
+                    return
+
+                currentNoteOrder = homeScreenNotesEvent.noteOrder
+                getNotes( noteOrderType = homeScreenNotesEvent.noteOrder)
+                getTags()
+            }
+
+            is HomeScreenNotesEvent.ToggleToolbarActionsVisibility -> {
+                _noteState.value =
+                    noteState.value.copy(isToolbarActionVisible = !noteState.value.isToolbarActionVisible)
+            }
+
+            is HomeScreenNotesEvent.ToggleSearchbarVisibility -> {
+                _noteState.value =
+                    noteState.value.copy(isSearchbarVisible = !noteState.value.isSearchbarVisible)
+            }
+
+            HomeScreenNotesEvent.NoteScreenLoaded -> {
+                getNotes(noteOrderType = currentNoteOrder ?: NoteOrderType.Ascending)
+                getTags()
+            }
+
+
+            is HomeScreenNotesEvent.SearchValueChanged -> {
+
+
+                if (homeScreenNotesEvent.input.isNotBlank()) {
+                    noteUseCases.searchNote(
+                        homeScreenNotesEvent.input,
+                        currentNoteOrder ?: NoteOrderType.Ascending
+                    ).takeWhile { searchValue.isNotBlank() }.onEach {
+                        _noteState.value = noteState.value.copy(
+                            notes = it,
+                        )
+                    }.launchIn(viewModelScope)
+                } else
+                    getNotes(noteOrderType = NoteOrderType.Descending)
+
+
+            }
+
+            is HomeScreenNotesEvent.OnTagDialogClick -> getTags()
+
+            is HomeScreenNotesEvent.ToolbarActionClicked -> {
+
+                when (homeScreenNotesEvent.action) {
+                    is SelectModeEvents.CheckSelectedTasks -> return
+                    is SelectModeEvents.DeleteNotes -> {
+                        viewModelScope.launch(Dispatchers.IO) {
+
+                            noteUseCases.deleteNotes(selectedNotesList)
+
+                            selectedNotesList.clear()
+                        }
+                    }
+
+                    is SelectModeEvents.DeleteTasks -> return
+                    SelectModeEvents.SelectAllNotes -> {
+                        selectedNotesList.clear()
+                        tagsFromSelectedNotes.clear()
+                        selectedNotesList.addAll(noteState.value.notes)
+                        tagsFromSelectedNotes.addAll(tagsList)
+                    }
+
+                    SelectModeEvents.SelectAllTasks -> return
+                }
+            }
+
+            is HomeScreenNotesEvent.OnSelectionNoteClick -> {
+                if (homeScreenNotesEvent.isSelected && selectedNotesList.none { it.id == homeScreenNotesEvent.note.id })
+                    selectedNotesList.add(homeScreenNotesEvent.note)
+                else
+                    selectedNotesList.remove(homeScreenNotesEvent.note)
+            }
+
+            is HomeScreenNotesEvent.OnDeleteTagsInDialog -> {
+                val tags = arrayListOf<Tag>()
+                noteState.value.notes.forEach { note ->
+                    homeScreenNotesEvent.selectedTags.forEach{ tag ->
+                        if ( note.id == tag.noteID ){
+                            if(tagsList.count { it.tagName == tag.tagName } > 1) {
+                                tags.addAll(tagsList.filter { it.tagName == tag.tagName })
+                            }
+                            else tags.add(tag)
+                        }
+                    }
+                }
+
+
+                viewModelScope.launch {
+                    val deletionIsFinished = async(Dispatchers.IO) { tagsUseCases.deleteTags(tags) }
+
+                    launch {
+                        if (deletionIsFinished.await() > 0)
+                            getNotes( noteOrderType = NoteOrderType.Default)
+                    }
+                }
+            }
+
+            is HomeScreenNotesEvent.OnNotesFilteredByTags -> {
+
+                var filteredNotes = arrayListOf<Note>()
+                val normalNotes = arrayListOf<Note>()
+
+                noteState.value.notes.forEach { note ->
+                    homeScreenNotesEvent.selectedTags.forEach { tag ->
+                        if (note.id == tag.noteID && filteredNotes.none { it.id == note.id }){
+                            if(tagsList.count { it.tagName == tag.tagName } > 1) {
+
+                                val noteIds =  tagsList.filter { it.tagName == tag.tagName }.map { it.noteID }
+                                noteIds.forEach { duplicateTag ->
+                                    noteState.value.notes.find { it.id == duplicateTag }
+                                        ?.let { filteredNotes.add(it) }
+                                }
+
+                            }
+                            else
+                                filteredNotes.add(note)
+                        }
+
+                        else if (normalNotes.none { it.id == note.id } && filteredNotes.none { it.id == note.id })
+                            normalNotes.add(note)
+                    }
+                }
+                filteredNotes = filteredNotes.distinctBy { it.id } as ArrayList<Note>
+                normalNotes.removeIf { normNote -> filteredNotes.any { filteredNote -> filteredNote.id == normNote.id } }
+                filteredNotes.addAll(normalNotes)
+                getNotes(givenNotes = filteredNotes, noteOrderType = NoteOrderType.Default)
+            }
+
+        }
+    }
+
+    @SuppressLint("SuspiciousIndentation")
+    fun onEvent(taskEvents: HomeScreenTasksEvent) {
+        when (taskEvents) {
+
+            is HomeScreenTasksEvent.HomeScreenTasksOrder -> {
+                if (taskState.value.taskOrder::class == taskEvents.taskOrderType::class)
+                    return
+                taskCurrentOrder = taskEvents.taskOrderType
+                getTasks(taskEvents.taskOrderType)
+                getTags()
+            }
+
+            is HomeScreenTasksEvent.DeleteTask -> {
+                viewModelScope.launch {
+                    taskUseCases.deleteTask(taskEvents.task)
+
+                    if (taskEvents.task.dueDate?.isNotBlank() == true)
+                        alarmManager.cancel(taskEvents.task)
+                }
+            }
+
+            is HomeScreenTasksEvent.ToggleSearchbarVisibility -> {
+                _taskState.value =
+                    taskState.value.copy(isSearchBarVisible = !taskState.value.isSearchBarVisible)
+            }
+
+            is HomeScreenTasksEvent.ToggleToolbarActions -> {
+                _taskState.value =
+                    taskState.value.copy(isToolbarActionsVisible = !taskState.value.isToolbarActionsVisible)
+            }
+
+            HomeScreenTasksEvent.TaskScreenLoaded -> {
+                getTasks(
+                    taskCurrentOrder ?: TaskOrderType.Ascending
+                )
+                getTags() // tags for task list is different than tags for note list , so you should change it
+            }
+
+            is HomeScreenTasksEvent.SearchValueChanged -> {
+
+
+                if (searchValue.isNotBlank()) {
+                    taskUseCases.searchTask(
+                        taskEvents.input,
+                        taskCurrentOrder ?: TaskOrderType.Ascending
+                    ).takeWhile { searchValue.isNotBlank() }.onEach {
+
+                        _taskState.value = taskState.value.copy(
+                            tasks = it,
+                        )
+                    }.launchIn(viewModelScope)
+                } else {
+                    getTasks(TaskOrderType.Ascending)
+                }
+
+            }
+
+
+            is HomeScreenTasksEvent.ToolbarActionClicked -> {
+                when (taskEvents.action) {
+                    is SelectModeEvents.CheckSelectedTasks -> {
+
+                        val taskList: ArrayList<Task> =
+                            taskState.value.tasks.toCollection(ArrayList())
+                        taskList.forEach { task ->
+
+                            selectedTasksList.forEach { selectedTask ->
+                                task.isChecked = task.id == selectedTask.id
+                            }
+                        }
+
+                        viewModelScope.launch {
+                            _taskState.value = taskState.value.copy(tasks = taskList)
+                            getTasks(TaskOrderType.Ascending)
+                            taskUseCases.checkSelectedTasks(selectedTasksList.map { it.id!! })
+                            selectedTasksList.clear()
+                        }
+
+                    }
+
+                    SelectModeEvents.DeleteNotes -> return
+                    SelectModeEvents.DeleteTasks -> {
+                        viewModelScope.launch(Dispatchers.IO) {
+
+                            taskUseCases.deleteTasks(selectedTasksList)
+
+                            selectedTasksList.clear()
+                        }
+
+                    }
+
+                    SelectModeEvents.SelectAllNotes -> return
+                    SelectModeEvents.SelectAllTasks -> {
+                        selectedTasksList.clear()
+                        selectedTasksList.addAll(taskState.value.tasks)
+//                        tagsFromSelectedTasks.clear()
+//                        tagsFromSelectedTasks.addAll(tagsList)
+                    }
+                }
+            }
+
+            is HomeScreenTasksEvent.OnSelectionTaskClick -> {
+                if (taskEvents.isSelected && selectedTasksList.none { it.id == taskEvents.task.id })
+                    selectedTasksList.add(taskEvents.task)
+                else
+                    selectedTasksList.remove(taskEvents.task)
+            }
+
+            is HomeScreenTasksEvent.OnCheckChange -> {
+                viewModelScope.launch {
+                    taskUseCases.addTask(taskEvents.checkedTask)
+                }
+
+            }
+
+            is HomeScreenTasksEvent.OnTagDialogClick -> getTags()
+
+            is HomeScreenTasksEvent.OnDeleteTagsInDialog -> {
+
+                val tags = arrayListOf<Tag>()
+                taskState.value.tasks.forEach { task ->
+                    taskEvents.selectedTags.forEach { tag ->
+                       if ( task.id == tag.taskID ){
+                           if(tagsList.count { it.tagName == tag.tagName } > 1) {
+                               tags.addAll(tagsList.filter { it.tagName == tag.tagName })
+                           }
+                           else tags.add(tag)
+                       }
+                    }
+                }
+
+
+                viewModelScope.launch {
+                   val deletionIsFinished = async(Dispatchers.IO) { tagsUseCases.deleteTags(tags) }
+
+                launch {
+                    if (deletionIsFinished.await() > 0)
+                    getTasks(TaskOrderType.Default)
+                }
+                }
+
+            }
+
+            is HomeScreenTasksEvent.OnTasksFilteredByTags -> {
+
+                var filteredTasks = arrayListOf<Task>()
+                val normalTasks = arrayListOf<Task>()
+
+                taskState.value.tasks.forEach { task ->
+                    taskEvents.selectedTags.forEach { tag ->
+                        if (task.id == tag.taskID && filteredTasks.none { it.id == task.id }){
+                            if(tagsList.count { it.tagName == tag.tagName } > 1) {
+
+                              val taskIds =  tagsList.filter { it.tagName == tag.tagName }.map { it.taskID }
+                                taskIds.forEach { duplicateTag ->
+                                    taskState.value.tasks.find { it.id == duplicateTag }
+                                        ?.let { filteredTasks.add(it) }
+                                }
+
+                            }
+                            else
+                            filteredTasks.add(task)
+                        }
+
+                        else if (normalTasks.none { it.id == task.id } && filteredTasks.none { it.id == task.id })
+                            normalTasks.add(task)
+                    }
+                }
+               filteredTasks = filteredTasks.distinctBy { it.id } as ArrayList<Task>
+                normalTasks.removeIf { normTask -> filteredTasks.any { filteredTask -> filteredTask.id == normTask.id } }
+                filteredTasks.addAll(normalTasks)
+                getTasks(givenTasks = filteredTasks, taskOrderType = TaskOrderType.Default)
+            }
+        }
+    }
+
+
+
+    private fun getNotes(
+        givenNotes: List<Note> = emptyList(),
+        noteOrderType: NoteOrderType
+    ) {
+        if (givenNotes.isEmpty()){
+            getNotesJob?.cancel()
+            getNotesJob = noteUseCases.getNotes(noteOrderType).onEach { notes ->
+                _noteState.value = noteState.value.copy(
+                    notes = notes,
+                    noteOrder = noteOrderType,
+                    listIsEmpty = noteState.value.notes.isEmpty()
+                )
+            }.launchIn(viewModelScope)
+        }
+        else
+            _noteState.value = noteState.value.copy(notes = givenNotes, noteOrder = noteOrderType)
+
+    }
+
+    private fun getTasks(
+        taskOrderType: TaskOrderType,
+        givenTasks:List<Task> = emptyList()
+    ) {
+        if (givenTasks.isEmpty()){
+            getTasksJob?.cancel()
+            getTasksJob = taskUseCases.getTasks(taskOrderType).onEach { tasks ->
+                _taskState.value = taskState.value.copy(
+                    tasks = tasks,
+                    taskOrder = taskOrderType,
+                    listIsEmpty = taskState.value.tasks.isEmpty()
+                )
+
+            }.launchIn(viewModelScope)
+        }
+        else{
+            _taskState.value = taskState.value.copy(tasks = givenTasks, taskOrder = taskOrderType)
+        }
+
+    }
+
+    private fun getTags() {
+
+        getTagsJob?.cancel()
+        getTagsJob = tagsUseCases.getTags().onEach { tags ->
+
+            tagsList = tags.toMutableStateList()
+
+        }.launchIn(viewModelScope)
+
+
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/golden_minute/nota/NotaApplication.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/golden_minute/nota/NotaApplication.kt b/app/src/main/java/com/golden_minute/nota/NotaApplication.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/golden_minute/nota/NotaApplication.kt	
@@ -0,0 +1,32 @@
+package com.golden_minute.nota
+
+import android.app.Application
+import android.app.NotificationChannel
+import android.app.NotificationManager
+import android.content.Context
+import com.golden_minute.nota.data.Alarm_manager.AlarmReceiver
+import dagger.hilt.android.HiltAndroidApp
+
+@HiltAndroidApp
+class NotaApplication: Application(){
+    override fun onCreate() {
+        super.onCreate()
+        createNotificationChannel()
+    }
+
+    private fun createNotificationChannel() {
+
+        val channel:NotificationChannel = NotificationChannel(
+            AlarmReceiver.REMINDER_CHANNEL_ID,"Task Reminder",
+            NotificationManager.IMPORTANCE_HIGH
+        ).apply {
+            description = "this channel is for reminding tasks"
+            lightColor = android.graphics.Color.RED
+            enableLights(true)
+        }
+
+        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
+        notificationManager.createNotificationChannel(channel)
+    }
+}
+
